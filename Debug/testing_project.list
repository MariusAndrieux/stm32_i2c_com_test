
testing_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000787c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007a20  08007a20  00008a20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e34  08007e34  000091dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007e34  08007e34  00008e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e3c  08007e3c  000091dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e3c  08007e3c  00008e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e40  08007e40  00008e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08007e44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001dc  08008020  000091dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  08008020  000093e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b406  00000000  00000000  0000920c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be6  00000000  00000000  00014612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  000161f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080a  00000000  00000000  00016c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169f7  00000000  00000000  00017452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b5  00000000  00000000  0002de49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0dc  00000000  00000000  0003b3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c54da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae4  00000000  00000000  000c5520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c9004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a04 	.word	0x08007a04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007a04 	.word	0x08007a04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <calculate_crc>:
    .i2c_handle = &hi2c1,
    .device_address = SHT3X_I2C_DEVICE_ADDRESS
};

static uint8_t calculate_crc(const uint8_t *data, size_t length)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
	uint8_t crc = 0xff;
 8000eb2:	23ff      	movs	r3, #255	@ 0xff
 8000eb4:	75fb      	strb	r3, [r7, #23]
	for (size_t i = 0; i < length; i++) {
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	e020      	b.n	8000efe <calculate_crc+0x56>
		crc ^= data[i];
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	4053      	eors	r3, r2
 8000ec8:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e010      	b.n	8000ef2 <calculate_crc+0x4a>
			if ((crc & 0x80u) != 0) {
 8000ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	da06      	bge.n	8000ee6 <calculate_crc+0x3e>
				crc = (uint8_t)((uint8_t)(crc << 1u) ^ 0x31u);
 8000ed8:	7dfb      	ldrb	r3, [r7, #23]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8000ee2:	75fb      	strb	r3, [r7, #23]
 8000ee4:	e002      	b.n	8000eec <calculate_crc+0x44>
			} else {
				crc <<= 1u;
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	75fb      	strb	r3, [r7, #23]
		for (size_t j = 0; j < 8; j++) {
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b07      	cmp	r3, #7
 8000ef6:	d9eb      	bls.n	8000ed0 <calculate_crc+0x28>
	for (size_t i = 0; i < length; i++) {
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	3301      	adds	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3da      	bcc.n	8000ebc <calculate_crc+0x14>
			}
		}
	}
	return crc;
 8000f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <sht3x_init>:

bool sht3x_init(sht3x_handle_t *handle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
	assert(handle->i2c_handle->Init.NoStretchMode == I2C_NOSTRETCH_DISABLE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d005      	beq.n	8000f32 <sht3x_init+0x1e>
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <sht3x_init+0x74>)
 8000f28:	4a18      	ldr	r2, [pc, #96]	@ (8000f8c <sht3x_init+0x78>)
 8000f2a:	2172      	movs	r1, #114	@ 0x72
 8000f2c:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <sht3x_init+0x7c>)
 8000f2e:	f004 f8d7 	bl	80050e0 <__assert_func>
	// TODO: Assert i2c frequency is not too high

	uint8_t status_reg_and_checksum[3];
	if (HAL_I2C_Mem_Read(handle->i2c_handle, handle->device_address << 1u, SHT3X_COMMAND_READ_STATUS, 2, (uint8_t*)&status_reg_and_checksum,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	889b      	ldrh	r3, [r3, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	231e      	movs	r3, #30
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2303      	movs	r3, #3
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f24f 322d 	movw	r2, #62253	@ 0xf32d
 8000f52:	f000 ffcd 	bl	8001ef0 <HAL_I2C_Mem_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <sht3x_init+0x4c>
					  sizeof(status_reg_and_checksum), SHT3X_I2C_TIMEOUT) != HAL_OK) {
		return false;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e00e      	b.n	8000f7e <sht3x_init+0x6a>
	}

	uint8_t calculated_crc = calculate_crc(status_reg_and_checksum, 2);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2102      	movs	r1, #2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff9e 	bl	8000ea8 <calculate_crc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]

	if (calculated_crc != status_reg_and_checksum[2]) {
 8000f70:	7bbb      	ldrb	r3, [r7, #14]
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d001      	beq.n	8000f7c <sht3x_init+0x68>
		return false;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e000      	b.n	8000f7e <sht3x_init+0x6a>
	}

	return true;
 8000f7c:	2301      	movs	r3, #1
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	08007a20 	.word	0x08007a20
 8000f8c:	08007a9c 	.word	0x08007a9c
 8000f90:	08007a60 	.word	0x08007a60

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 fb17 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f823 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 f8d7 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa6:	f000 f8ab 	bl	8001100 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000faa:	f000 f87b 	bl	80010a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t txData[] = "Hello, UART!\r\n";
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <main+0x48>)
 8000fb0:	f107 0408 	add.w	r4, r7, #8
 8000fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fb6:	c407      	stmia	r4!, {r0, r1, r2}
 8000fb8:	8023      	strh	r3, [r4, #0]
 8000fba:	3402      	adds	r4, #2
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	7023      	strb	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Initialise sensor (tests connection by reading the status register).
	  if (!sht3x_init(&handle)) {
 8000fc0:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <main+0x4c>)
 8000fc2:	f7ff ffa7 	bl	8000f14 <sht3x_init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	f083 0301 	eor.w	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f6      	beq.n	8000fc0 <main+0x2c>
		  printf("SHT3x access failed.\n\r");
 8000fd2:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <main+0x50>)
 8000fd4:	f004 fdce 	bl	8005b74 <iprintf>
	  if (!sht3x_init(&handle)) {
 8000fd8:	e7f2      	b.n	8000fc0 <main+0x2c>
 8000fda:	bf00      	nop
 8000fdc:	08007a8c 	.word	0x08007a8c
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	08007a74 	.word	0x08007a74

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	@ 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f004 fe11 	bl	8005c1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <SystemClock_Config+0xb4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <SystemClock_Config+0xb4>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <SystemClock_Config+0xb4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <SystemClock_Config+0xb8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <SystemClock_Config+0xb8>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <SystemClock_Config+0xb8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f003 f925 	bl	80042a8 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001064:	f000 f89e 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f003 fb88 	bl	8004798 <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800108e:	f000 f889 	bl	80011a4 <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	@ 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f000 fdab 	bl	8001c3c <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 f85a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001f8 	.word	0x200001f8
 80010f8:	40005400 	.word	0x40005400
 80010fc:	000186a0 	.word	0x000186a0

08001100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_USART2_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001138:	f003 fd0e 	bl	8004b58 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 f82f 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	2000024c 	.word	0x2000024c
 8001150:	40004400 	.word	0x40004400

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <MX_GPIO_Init+0x4c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a0f      	ldr	r2, [pc, #60]	@ (80011a0 <MX_GPIO_Init+0x4c>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b0d      	ldr	r3, [pc, #52]	@ (80011a0 <MX_GPIO_Init+0x4c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	@ (80011a0 <MX_GPIO_Init+0x4c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <MX_GPIO_Init+0x4c>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <MX_GPIO_Init+0x4c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <Error_Handler+0x8>

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	@ (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	@ (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	@ 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a21      	ldr	r2, [pc, #132]	@ (80012a4 <HAL_I2C_MspInit+0xa4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d13b      	bne.n	800129a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_I2C_MspInit+0xa8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a1f      	ldr	r2, [pc, #124]	@ (80012a8 <HAL_I2C_MspInit+0xa8>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <HAL_I2C_MspInit+0xa8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800123e:	23c0      	movs	r3, #192	@ 0xc0
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001242:	2312      	movs	r3, #18
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800124e:	2304      	movs	r3, #4
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4814      	ldr	r0, [pc, #80]	@ (80012ac <HAL_I2C_MspInit+0xac>)
 800125a:	f000 fb6b 	bl	8001934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <HAL_I2C_MspInit+0xa8>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a10      	ldr	r2, [pc, #64]	@ (80012a8 <HAL_I2C_MspInit+0xa8>)
 8001268:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <HAL_I2C_MspInit+0xa8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	201f      	movs	r0, #31
 8001280:	f000 faf1 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001284:	201f      	movs	r0, #31
 8001286:	f000 fb0a 	bl	800189e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2020      	movs	r0, #32
 8001290:	f000 fae9 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001294:	2020      	movs	r0, #32
 8001296:	f000 fb02 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	@ 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40005400 	.word	0x40005400
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020400 	.word	0x40020400

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <HAL_UART_MspInit+0x84>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d12b      	bne.n	800132a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <HAL_UART_MspInit+0x88>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012da:	4a17      	ldr	r2, [pc, #92]	@ (8001338 <HAL_UART_MspInit+0x88>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_UART_MspInit+0x88>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <HAL_UART_MspInit+0x88>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_UART_MspInit+0x88>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001338 <HAL_UART_MspInit+0x88>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800130a:	230c      	movs	r3, #12
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131a:	2307      	movs	r3, #7
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <HAL_UART_MspInit+0x8c>)
 8001326:	f000 fb05 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	@ 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004400 	.word	0x40004400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <NMI_Handler+0x4>

08001348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	bf00      	nop
 8001356:	e7fd      	b.n	8001354 <MemManage_Handler+0x4>

08001358 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135c:	bf00      	nop
 800135e:	e7fd      	b.n	800135c <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <UsageFault_Handler+0x4>

08001368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f96b 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <I2C1_EV_IRQHandler+0x10>)
 80013a6:	f000 ffd5 	bl	8002354 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001f8 	.word	0x200001f8

080013b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80013b8:	4802      	ldr	r0, [pc, #8]	@ (80013c4 <I2C1_ER_IRQHandler+0x10>)
 80013ba:	f001 f91e 	bl	80025fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200001f8 	.word	0x200001f8

080013c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return 1;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_kill>:

int _kill(int pid, int sig)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013e2:	f004 fc6f 	bl	8005cc4 <__errno>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2216      	movs	r2, #22
 80013ea:	601a      	str	r2, [r3, #0]
  return -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <_exit>:

void _exit (int status)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001400:	f04f 31ff 	mov.w	r1, #4294967295
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ffe7 	bl	80013d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800140a:	bf00      	nop
 800140c:	e7fd      	b.n	800140a <_exit+0x12>

0800140e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e00a      	b.n	8001436 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001420:	f3af 8000 	nop.w
 8001424:	4601      	mov	r1, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1c5a      	adds	r2, r3, #1
 800142a:	60ba      	str	r2, [r7, #8]
 800142c:	b2ca      	uxtb	r2, r1
 800142e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	3301      	adds	r3, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbf0      	blt.n	8001420 <_read+0x12>
  }

  return len;
 800143e:	687b      	ldr	r3, [r7, #4]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e009      	b.n	800146e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	dbf1      	blt.n	800145a <_write+0x12>
  }
  return len;
 8001476:	687b      	ldr	r3, [r7, #4]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <_close>:

int _close(int file)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a8:	605a      	str	r2, [r3, #4]
  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_isatty>:

int _isatty(int file)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c0:	2301      	movs	r3, #1
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	@ (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	@ (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	@ (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f004 fbd4 	bl	8005cc4 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	@ (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	@ (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	@ (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20020000 	.word	0x20020000
 8001548:	00000400 	.word	0x00000400
 800154c:	20000294 	.word	0x20000294
 8001550:	200003e8 	.word	0x200003e8

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	@ (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	@ (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	@ (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015a6:	f004 fb93 	bl	8005cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fcf3 	bl	8000f94 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015bc:	08007e44 	.word	0x08007e44
  ldr r2, =_sbss
 80015c0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015c4:	200003e8 	.word	0x200003e8

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f92b 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	200f      	movs	r0, #15
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fdd6 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	@ (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f943 	bl	80018ba <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f90b 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	@ (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000008 	.word	0x20000008
 8001668:	20000010 	.word	0x20000010
 800166c:	2000000c 	.word	0x2000000c

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000010 	.word	0x20000010
 8001694:	20000298 	.word	0x20000298

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	@ (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000298 	.word	0x20000298

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	@ (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	@ (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	@ (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	@ (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	@ 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	@ 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	@ (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff29 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff3e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff31 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d004      	beq.n	80018f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	@ 0x80
 80018ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e00c      	b.n	800190a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2205      	movs	r2, #5
 80018f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0201 	bic.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001924:	b2db      	uxtb	r3, r3
}
 8001926:	4618      	mov	r0, r3
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e159      	b.n	8001c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 8148 	bne.w	8001bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	2b02      	cmp	r3, #2
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a2 	beq.w	8001bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b57      	ldr	r3, [pc, #348]	@ (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a56      	ldr	r2, [pc, #344]	@ (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b54      	ldr	r3, [pc, #336]	@ (8001c1c <HAL_GPIO_Init+0x2e8>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad6:	4a52      	ldr	r2, [pc, #328]	@ (8001c20 <HAL_GPIO_Init+0x2ec>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a49      	ldr	r2, [pc, #292]	@ (8001c24 <HAL_GPIO_Init+0x2f0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d019      	beq.n	8001b36 <HAL_GPIO_Init+0x202>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a48      	ldr	r2, [pc, #288]	@ (8001c28 <HAL_GPIO_Init+0x2f4>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d013      	beq.n	8001b32 <HAL_GPIO_Init+0x1fe>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a47      	ldr	r2, [pc, #284]	@ (8001c2c <HAL_GPIO_Init+0x2f8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00d      	beq.n	8001b2e <HAL_GPIO_Init+0x1fa>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <HAL_GPIO_Init+0x2fc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d007      	beq.n	8001b2a <HAL_GPIO_Init+0x1f6>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	@ (8001c34 <HAL_GPIO_Init+0x300>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d101      	bne.n	8001b26 <HAL_GPIO_Init+0x1f2>
 8001b22:	2304      	movs	r3, #4
 8001b24:	e008      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e004      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e002      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_GPIO_Init+0x204>
 8001b36:	2300      	movs	r3, #0
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	f002 0203 	and.w	r2, r2, #3
 8001b3e:	0092      	lsls	r2, r2, #2
 8001b40:	4093      	lsls	r3, r2
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b48:	4935      	ldr	r1, [pc, #212]	@ (8001c20 <HAL_GPIO_Init+0x2ec>)
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	089b      	lsrs	r3, r3, #2
 8001b4e:	3302      	adds	r3, #2
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b56:	4b38      	ldr	r3, [pc, #224]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba4:	4a24      	ldr	r2, [pc, #144]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bce:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8001c38 <HAL_GPIO_Init+0x304>)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3301      	adds	r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	2b0f      	cmp	r3, #15
 8001c08:	f67f aea2 	bls.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40013800 	.word	0x40013800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e12b      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff facc 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	@ 0x24
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ca0:	f002 ff32 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	4a81      	ldr	r2, [pc, #516]	@ (8001eb0 <HAL_I2C_Init+0x274>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d807      	bhi.n	8001cc0 <HAL_I2C_Init+0x84>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4a80      	ldr	r2, [pc, #512]	@ (8001eb4 <HAL_I2C_Init+0x278>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	bf94      	ite	ls
 8001cb8:	2301      	movls	r3, #1
 8001cba:	2300      	movhi	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e006      	b.n	8001cce <HAL_I2C_Init+0x92>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8001eb8 <HAL_I2C_Init+0x27c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	bf94      	ite	ls
 8001cc8:	2301      	movls	r3, #1
 8001cca:	2300      	movhi	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0e7      	b.n	8001ea6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4a78      	ldr	r2, [pc, #480]	@ (8001ebc <HAL_I2C_Init+0x280>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb0 <HAL_I2C_Init+0x274>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d802      	bhi.n	8001d10 <HAL_I2C_Init+0xd4>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	e009      	b.n	8001d24 <HAL_I2C_Init+0xe8>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	4a69      	ldr	r2, [pc, #420]	@ (8001ec0 <HAL_I2C_Init+0x284>)
 8001d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d20:	099b      	lsrs	r3, r3, #6
 8001d22:	3301      	adds	r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	495c      	ldr	r1, [pc, #368]	@ (8001eb0 <HAL_I2C_Init+0x274>)
 8001d40:	428b      	cmp	r3, r1
 8001d42:	d819      	bhi.n	8001d78 <HAL_I2C_Init+0x13c>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e59      	subs	r1, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d52:	1c59      	adds	r1, r3, #1
 8001d54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d58:	400b      	ands	r3, r1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_I2C_Init+0x138>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e59      	subs	r1, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d72:	e051      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d74:	2304      	movs	r3, #4
 8001d76:	e04f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_I2C_Init+0x168>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e012      	b.n	8001dca <HAL_I2C_Init+0x18e>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	1e58      	subs	r0, r3, #1
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6859      	ldr	r1, [r3, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	0099      	lsls	r1, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x196>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e022      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10e      	bne.n	8001df8 <HAL_I2C_Init+0x1bc>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e58      	subs	r0, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dec:	3301      	adds	r3, #1
 8001dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df6:	e00f      	b.n	8001e18 <HAL_I2C_Init+0x1dc>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1e58      	subs	r0, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6859      	ldr	r1, [r3, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	0099      	lsls	r1, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0e:	3301      	adds	r3, #1
 8001e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	6809      	ldr	r1, [r1, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6911      	ldr	r1, [r2, #16]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68d2      	ldr	r2, [r2, #12]
 8001e52:	4311      	orrs	r1, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	430b      	orrs	r3, r1
 8001e5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	000186a0 	.word	0x000186a0
 8001eb4:	001e847f 	.word	0x001e847f
 8001eb8:	003d08ff 	.word	0x003d08ff
 8001ebc:	431bde83 	.word	0x431bde83
 8001ec0:	10624dd3 	.word	0x10624dd3

08001ec4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed6:	2b80      	cmp	r3, #128	@ 0x80
 8001ed8:	d103      	bne.n	8001ee2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08c      	sub	sp, #48	@ 0x30
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	817b      	strh	r3, [r7, #10]
 8001f02:	460b      	mov	r3, r1
 8001f04:	813b      	strh	r3, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f0a:	f7ff fbc5 	bl	8001698 <HAL_GetTick>
 8001f0e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	f040 8214 	bne.w	8002346 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2319      	movs	r3, #25
 8001f24:	2201      	movs	r2, #1
 8001f26:	497b      	ldr	r1, [pc, #492]	@ (8002114 <HAL_I2C_Mem_Read+0x224>)
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f001 ff81 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
 8001f36:	e207      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_I2C_Mem_Read+0x56>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e200      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d007      	beq.n	8001f6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2222      	movs	r2, #34	@ 0x22
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a5b      	ldr	r2, [pc, #364]	@ (8002118 <HAL_I2C_Mem_Read+0x228>)
 8001fac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001fae:	88f8      	ldrh	r0, [r7, #6]
 8001fb0:	893a      	ldrh	r2, [r7, #8]
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f001 fda6 	bl	8003b10 <I2C_RequestMemoryRead>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1bc      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d113      	bne.n	8001ffe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	623b      	str	r3, [r7, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e190      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002002:	2b01      	cmp	r3, #1
 8002004:	d11b      	bne.n	800203e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002014:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e170      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002042:	2b02      	cmp	r3, #2
 8002044:	d11b      	bne.n	800207e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002054:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	e150      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002094:	e144      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209a:	2b03      	cmp	r3, #3
 800209c:	f200 80f1 	bhi.w	8002282 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d123      	bne.n	80020f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f002 f853 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e145      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80020ee:	e117      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d14e      	bne.n	8002196 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fe:	2200      	movs	r2, #0
 8002100:	4906      	ldr	r1, [pc, #24]	@ (800211c <HAL_I2C_Mem_Read+0x22c>)
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f001 fe94 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e11a      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
 8002112:	bf00      	nop
 8002114:	00100002 	.word	0x00100002
 8002118:	ffff0000 	.word	0xffff0000
 800211c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002194:	e0c4      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800219c:	2200      	movs	r2, #0
 800219e:	496c      	ldr	r1, [pc, #432]	@ (8002350 <HAL_I2C_Mem_Read+0x460>)
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f001 fe45 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0cb      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f8:	2200      	movs	r2, #0
 80021fa:	4955      	ldr	r1, [pc, #340]	@ (8002350 <HAL_I2C_Mem_Read+0x460>)
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f001 fe17 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e09d      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226a:	3b01      	subs	r3, #1
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002280:	e04e      	b.n	8002320 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002284:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f001 ff66 	bl	8004158 <I2C_WaitOnRXNEFlagUntilTimeout>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e058      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d124      	bne.n	8002320 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002324:	2b00      	cmp	r3, #0
 8002326:	f47f aeb6 	bne.w	8002096 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	00010004 	.word	0x00010004

08002354 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002374:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800237c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b10      	cmp	r3, #16
 8002382:	d003      	beq.n	800238c <HAL_I2C_EV_IRQHandler+0x38>
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b40      	cmp	r3, #64	@ 0x40
 8002388:	f040 80b1 	bne.w	80024ee <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_I2C_EV_IRQHandler+0x6e>
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80023ac:	d003      	beq.n	80023b6 <HAL_I2C_EV_IRQHandler+0x62>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_EV_IRQHandler+0x66>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_I2C_EV_IRQHandler+0x68>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	f000 8114 	beq.w	80025ea <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00b      	beq.n	80023e4 <HAL_I2C_EV_IRQHandler+0x90>
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d006      	beq.n	80023e4 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f001 ff4a 	bl	8004270 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 fd7a 	bl	8002ed6 <I2C_Master_SB>
 80023e2:	e083      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_I2C_EV_IRQHandler+0xac>
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fdf2 	bl	8002fe2 <I2C_Master_ADD10>
 80023fe:	e075      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_I2C_EV_IRQHandler+0xc8>
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fe0e 	bl	8003036 <I2C_Master_ADDR>
 800241a:	e067      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b00      	cmp	r3, #0
 8002424:	d036      	beq.n	8002494 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002430:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002434:	f000 80db 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00d      	beq.n	800245e <HAL_I2C_EV_IRQHandler+0x10a>
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_I2C_EV_IRQHandler+0x10a>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d103      	bne.n	800245e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f9d6 	bl	8002808 <I2C_MasterTransmit_TXE>
 800245c:	e046      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80c2 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80bc 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002476:	7bbb      	ldrb	r3, [r7, #14]
 8002478:	2b21      	cmp	r3, #33	@ 0x21
 800247a:	d103      	bne.n	8002484 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 fa5f 	bl	8002940 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002482:	e0b4      	b.n	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b40      	cmp	r3, #64	@ 0x40
 8002488:	f040 80b1 	bne.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 facd 	bl	8002a2c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002492:	e0ac      	b.n	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800249e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a2:	f000 80a4 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_I2C_EV_IRQHandler+0x178>
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_I2C_EV_IRQHandler+0x178>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fb49 	bl	8002b5c <I2C_MasterReceive_RXNE>
 80024ca:	e00f      	b.n	80024ec <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 808b 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8085 	beq.w	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 fc01 	bl	8002cec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ea:	e080      	b.n	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
 80024ec:	e07f      	b.n	80025ee <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d004      	beq.n	8002500 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e007      	b.n	8002510 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d011      	beq.n	800253e <HAL_I2C_EV_IRQHandler+0x1ea>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00c      	beq.n	800253e <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002534:	69b9      	ldr	r1, [r7, #24]
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 ffcc 	bl	80034d4 <I2C_Slave_ADDR>
 800253c:	e05a      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_I2C_EV_IRQHandler+0x206>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f001 f806 	bl	8003564 <I2C_Slave_STOPF>
 8002558:	e04c      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	2b21      	cmp	r3, #33	@ 0x21
 800255e:	d002      	beq.n	8002566 <HAL_I2C_EV_IRQHandler+0x212>
 8002560:	7bbb      	ldrb	r3, [r7, #14]
 8002562:	2b29      	cmp	r3, #41	@ 0x29
 8002564:	d120      	bne.n	80025a8 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00d      	beq.n	800258c <HAL_I2C_EV_IRQHandler+0x238>
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d008      	beq.n	800258c <HAL_I2C_EV_IRQHandler+0x238>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fee7 	bl	8003358 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800258a:	e032      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d02d      	beq.n	80025f2 <HAL_I2C_EV_IRQHandler+0x29e>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800259c:	2b00      	cmp	r3, #0
 800259e:	d028      	beq.n	80025f2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 ff16 	bl	80033d2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a6:	e024      	b.n	80025f2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00d      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x27a>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x27a>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 ff24 	bl	8003414 <I2C_SlaveReceive_RXNE>
 80025cc:	e012      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d008      	beq.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 ff54 	bl	8003490 <I2C_SlaveReceive_BTF>
 80025e8:	e004      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08a      	sub	sp, #40	@ 0x28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800261c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00d      	beq.n	8002644 <HAL_I2C_ER_IRQHandler+0x4a>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002642:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <HAL_I2C_ER_IRQHandler+0x70>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d008      	beq.n	800266a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002668:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d03e      	beq.n	80026f2 <HAL_I2C_ER_IRQHandler+0xf8>
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d039      	beq.n	80026f2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800267e:	7efb      	ldrb	r3, [r7, #27]
 8002680:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002690:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002698:	7ebb      	ldrb	r3, [r7, #26]
 800269a:	2b20      	cmp	r3, #32
 800269c:	d112      	bne.n	80026c4 <HAL_I2C_ER_IRQHandler+0xca>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10f      	bne.n	80026c4 <HAL_I2C_ER_IRQHandler+0xca>
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b21      	cmp	r3, #33	@ 0x21
 80026a8:	d008      	beq.n	80026bc <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80026aa:	7cfb      	ldrb	r3, [r7, #19]
 80026ac:	2b29      	cmp	r3, #41	@ 0x29
 80026ae:	d005      	beq.n	80026bc <HAL_I2C_ER_IRQHandler+0xc2>
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	2b28      	cmp	r3, #40	@ 0x28
 80026b4:	d106      	bne.n	80026c4 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b21      	cmp	r3, #33	@ 0x21
 80026ba:	d103      	bne.n	80026c4 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f001 f881 	bl	80037c4 <I2C_Slave_AF>
 80026c2:	e016      	b.n	80026f2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80026cc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80026d6:	7efb      	ldrb	r3, [r7, #27]
 80026d8:	2b10      	cmp	r3, #16
 80026da:	d002      	beq.n	80026e2 <HAL_I2C_ER_IRQHandler+0xe8>
 80026dc:	7efb      	ldrb	r3, [r7, #27]
 80026de:	2b40      	cmp	r3, #64	@ 0x40
 80026e0:	d107      	bne.n	80026f2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026f0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <HAL_I2C_ER_IRQHandler+0x11e>
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d008      	beq.n	8002718 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002716:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f001 f8be 	bl	80038ac <I2C_ITError>
  }
}
 8002730:	bf00      	nop
 8002732:	3728      	adds	r7, #40	@ 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
 8002794:	4613      	mov	r3, r2
 8002796:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002816:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800281e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d150      	bne.n	80028d0 <I2C_MasterTransmit_TXE+0xc8>
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b21      	cmp	r3, #33	@ 0x21
 8002832:	d14d      	bne.n	80028d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b08      	cmp	r3, #8
 8002838:	d01d      	beq.n	8002876 <I2C_MasterTransmit_TXE+0x6e>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b20      	cmp	r3, #32
 800283e:	d01a      	beq.n	8002876 <I2C_MasterTransmit_TXE+0x6e>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002846:	d016      	beq.n	8002876 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002856:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2211      	movs	r2, #17
 800285c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff62 	bl	8002738 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002874:	e060      	b.n	8002938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002884:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002894:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d107      	bne.n	80028c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff7d 	bl	80027b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028be:	e03b      	b.n	8002938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff35 	bl	8002738 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028ce:	e033      	b.n	8002938 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b21      	cmp	r3, #33	@ 0x21
 80028d4:	d005      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0xda>
 80028d6:	7bbb      	ldrb	r3, [r7, #14]
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d12d      	bne.n	8002938 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b22      	cmp	r3, #34	@ 0x22
 80028e0:	d12a      	bne.n	8002938 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80028fc:	e01c      	b.n	8002938 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b40      	cmp	r3, #64	@ 0x40
 8002908:	d103      	bne.n	8002912 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f88e 	bl	8002a2c <I2C_MemoryTransmit_TXE_BTF>
}
 8002910:	e012      	b.n	8002938 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002936:	e7ff      	b.n	8002938 <I2C_MasterTransmit_TXE+0x130>
 8002938:	bf00      	nop
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b21      	cmp	r3, #33	@ 0x21
 8002958:	d164      	bne.n	8002a24 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002988:	e04c      	b.n	8002a24 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b08      	cmp	r3, #8
 800298e:	d01d      	beq.n	80029cc <I2C_MasterTransmit_BTF+0x8c>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b20      	cmp	r3, #32
 8002994:	d01a      	beq.n	80029cc <I2C_MasterTransmit_BTF+0x8c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800299c:	d016      	beq.n	80029cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2211      	movs	r2, #17
 80029b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff feb7 	bl	8002738 <HAL_I2C_MasterTxCpltCallback>
}
 80029ca:	e02b      	b.n	8002a24 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b40      	cmp	r3, #64	@ 0x40
 8002a04:	d107      	bne.n	8002a16 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fed2 	bl	80027b8 <HAL_I2C_MemTxCpltCallback>
}
 8002a14:	e006      	b.n	8002a24 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff fe8a 	bl	8002738 <HAL_I2C_MasterTxCpltCallback>
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11d      	bne.n	8002a80 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10b      	bne.n	8002a64 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5c:	1c9a      	adds	r2, r3, #2
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002a62:	e077      	b.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	121b      	asrs	r3, r3, #8
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a78:	1c5a      	adds	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a7e:	e069      	b.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10b      	bne.n	8002aa0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002a9e:	e059      	b.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d152      	bne.n	8002b4e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b22      	cmp	r3, #34	@ 0x22
 8002aac:	d10d      	bne.n	8002aca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002abc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002ac8:	e044      	b.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d015      	beq.n	8002b00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b21      	cmp	r3, #33	@ 0x21
 8002ad8:	d112      	bne.n	8002b00 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002afe:	e029      	b.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d124      	bne.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	2b21      	cmp	r3, #33	@ 0x21
 8002b0e:	d121      	bne.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fe36 	bl	80027b8 <HAL_I2C_MemTxCpltCallback>
}
 8002b4c:	e002      	b.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff f9b8 	bl	8001ec4 <I2C_Flush_DR>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b22      	cmp	r3, #34	@ 0x22
 8002b6e:	f040 80b9 	bne.w	8002ce4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d921      	bls.n	8002bca <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	b2d2      	uxtb	r2, r2
 8002b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	f040 8096 	bne.w	8002ce4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002bc8:	e08c      	b.n	8002ce4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d07f      	beq.n	8002cd2 <I2C_MasterReceive_RXNE+0x176>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d002      	beq.n	8002bde <I2C_MasterReceive_RXNE+0x82>
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d179      	bne.n	8002cd2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 fa88 	bl	80040f4 <I2C_WaitOnSTOPRequestThroughIT>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14c      	bne.n	8002c84 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b40      	cmp	r3, #64	@ 0x40
 8002c42:	d10a      	bne.n	8002c5a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fdba 	bl	80027cc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c58:	e044      	b.n	8002ce4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d002      	beq.n	8002c6e <I2C_MasterReceive_RXNE+0x112>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d103      	bne.n	8002c76 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c74:	e002      	b.n	8002c7c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2212      	movs	r2, #18
 8002c7a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7ff fd65 	bl	800274c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c82:	e02f      	b.n	8002ce4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c92:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff fd88 	bl	80027e0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cd0:	e008      	b.n	8002ce4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce0:	605a      	str	r2, [r3, #4]
}
 8002ce2:	e7ff      	b.n	8002ce4 <I2C_MasterReceive_RXNE+0x188>
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d11b      	bne.n	8002d3c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d12:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002d3a:	e0c8      	b.n	8002ece <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d129      	bne.n	8002d9a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d54:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d00a      	beq.n	8002d72 <I2C_MasterReceive_BTF+0x86>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d007      	beq.n	8002d72 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d98:	e099      	b.n	8002ece <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	f040 8081 	bne.w	8002ea8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d002      	beq.n	8002db2 <I2C_MasterReceive_BTF+0xc6>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b10      	cmp	r3, #16
 8002db0:	d108      	bne.n	8002dc4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e019      	b.n	8002df8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d002      	beq.n	8002dd0 <I2C_MasterReceive_BTF+0xe4>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d108      	bne.n	8002de2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e00a      	b.n	8002df8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d007      	beq.n	8002df8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002e52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d10a      	bne.n	8002e7e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff fca8 	bl	80027cc <HAL_I2C_MemRxCpltCallback>
}
 8002e7c:	e027      	b.n	8002ece <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2b08      	cmp	r3, #8
 8002e8a:	d002      	beq.n	8002e92 <I2C_MasterReceive_BTF+0x1a6>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d103      	bne.n	8002e9a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e98:	e002      	b.n	8002ea0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2212      	movs	r2, #18
 8002e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fc53 	bl	800274c <HAL_I2C_MasterRxCpltCallback>
}
 8002ea6:	e012      	b.n	8002ece <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b40      	cmp	r3, #64	@ 0x40
 8002ee8:	d117      	bne.n	8002f1a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d109      	bne.n	8002f06 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f02:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f04:	e067      	b.n	8002fd6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]
}
 8002f18:	e05d      	b.n	8002fd6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f22:	d133      	bne.n	8002f8c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b21      	cmp	r3, #33	@ 0x21
 8002f2e:	d109      	bne.n	8002f44 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f40:	611a      	str	r2, [r3, #16]
 8002f42:	e008      	b.n	8002f56 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <I2C_Master_SB+0x92>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d108      	bne.n	8002f7a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d032      	beq.n	8002fd6 <I2C_Master_SB+0x100>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d02d      	beq.n	8002fd6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f88:	605a      	str	r2, [r3, #4]
}
 8002f8a:	e024      	b.n	8002fd6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10e      	bne.n	8002fb2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	11db      	asrs	r3, r3, #7
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f003 0306 	and.w	r3, r3, #6
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	f063 030f 	orn	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]
}
 8002fb0:	e011      	b.n	8002fd6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10d      	bne.n	8002fd6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	11db      	asrs	r3, r3, #7
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f003 0306 	and.w	r3, r3, #6
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f063 030e 	orn	r3, r3, #14
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <I2C_Master_ADD10+0x26>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d108      	bne.n	800301a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00c      	beq.n	800302a <I2C_Master_ADD10+0x48>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003028:	605a      	str	r2, [r3, #4]
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003036:	b480      	push	{r7}
 8003038:	b091      	sub	sp, #68	@ 0x44
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003044:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003052:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b22      	cmp	r3, #34	@ 0x22
 800305e:	f040 8169 	bne.w	8003334 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <I2C_Master_ADDR+0x54>
 800306a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800306e:	2b40      	cmp	r3, #64	@ 0x40
 8003070:	d10b      	bne.n	800308a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003072:	2300      	movs	r3, #0
 8003074:	633b      	str	r3, [r7, #48]	@ 0x30
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	633b      	str	r3, [r7, #48]	@ 0x30
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	633b      	str	r3, [r7, #48]	@ 0x30
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	e160      	b.n	800334c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11d      	bne.n	80030ce <I2C_Master_ADDR+0x98>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800309a:	d118      	bne.n	80030ce <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80030cc:	e13e      	b.n	800334c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e115      	b.n	800332c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	f040 808a 	bne.w	8003220 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800310c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003112:	d137      	bne.n	8003184 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003122:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003132:	d113      	bne.n	800315c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003142:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	e0e7      	b.n	800332c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	623b      	str	r3, [r7, #32]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	e0d3      	b.n	800332c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	2b08      	cmp	r3, #8
 8003188:	d02e      	beq.n	80031e8 <I2C_Master_ADDR+0x1b2>
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318c:	2b20      	cmp	r3, #32
 800318e:	d02b      	beq.n	80031e8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	2b12      	cmp	r3, #18
 8003194:	d102      	bne.n	800319c <I2C_Master_ADDR+0x166>
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	2b01      	cmp	r3, #1
 800319a:	d125      	bne.n	80031e8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800319c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319e:	2b04      	cmp	r3, #4
 80031a0:	d00e      	beq.n	80031c0 <I2C_Master_ADDR+0x18a>
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d00b      	beq.n	80031c0 <I2C_Master_ADDR+0x18a>
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d008      	beq.n	80031c0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e007      	b.n	80031d0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80031ce:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d0:	2300      	movs	r3, #0
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	e0a1      	b.n	800332c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e085      	b.n	800332c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d14d      	bne.n	80032c6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	2b04      	cmp	r3, #4
 800322e:	d016      	beq.n	800325e <I2C_Master_ADDR+0x228>
 8003230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003232:	2b02      	cmp	r3, #2
 8003234:	d013      	beq.n	800325e <I2C_Master_ADDR+0x228>
 8003236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003238:	2b10      	cmp	r3, #16
 800323a:	d010      	beq.n	800325e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800324a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	e007      	b.n	800326e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800326c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800327c:	d117      	bne.n	80032ae <I2C_Master_ADDR+0x278>
 800327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003284:	d00b      	beq.n	800329e <I2C_Master_ADDR+0x268>
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	2b01      	cmp	r3, #1
 800328a:	d008      	beq.n	800329e <I2C_Master_ADDR+0x268>
 800328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328e:	2b08      	cmp	r3, #8
 8003290:	d005      	beq.n	800329e <I2C_Master_ADDR+0x268>
 8003292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003294:	2b10      	cmp	r3, #16
 8003296:	d002      	beq.n	800329e <I2C_Master_ADDR+0x268>
 8003298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800329a:	2b20      	cmp	r3, #32
 800329c:	d107      	bne.n	80032ae <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	e032      	b.n	800332c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032e4:	d117      	bne.n	8003316 <I2C_Master_ADDR+0x2e0>
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032ec:	d00b      	beq.n	8003306 <I2C_Master_ADDR+0x2d0>
 80032ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d008      	beq.n	8003306 <I2C_Master_ADDR+0x2d0>
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d005      	beq.n	8003306 <I2C_Master_ADDR+0x2d0>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032fc:	2b10      	cmp	r3, #16
 80032fe:	d002      	beq.n	8003306 <I2C_Master_ADDR+0x2d0>
 8003300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003302:	2b20      	cmp	r3, #32
 8003304:	d107      	bne.n	8003316 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003314:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003332:	e00b      	b.n	800334c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003334:	2300      	movs	r3, #0
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
}
 800334a:	e7ff      	b.n	800334c <I2C_Master_ADDR+0x316>
 800334c:	bf00      	nop
 800334e:	3744      	adds	r7, #68	@ 0x44
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003366:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d02b      	beq.n	80033ca <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d114      	bne.n	80033ca <I2C_SlaveTransmit_TXE+0x72>
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	2b29      	cmp	r3, #41	@ 0x29
 80033a4:	d111      	bne.n	80033ca <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2221      	movs	r2, #33	@ 0x21
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2228      	movs	r2, #40	@ 0x28
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff f9cb 	bl	8002760 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80033ca:	bf00      	nop
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d011      	beq.n	8003408 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003422:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02c      	beq.n	8003488 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d114      	bne.n	8003488 <I2C_SlaveReceive_RXNE+0x74>
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b2a      	cmp	r3, #42	@ 0x2a
 8003462:	d111      	bne.n	8003488 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003472:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2222      	movs	r2, #34	@ 0x22
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2228      	movs	r2, #40	@ 0x28
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff f976 	bl	8002774 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d012      	beq.n	80034c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034ee:	2b28      	cmp	r3, #40	@ 0x28
 80034f0:	d125      	bne.n	800353e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003500:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800350c:	2301      	movs	r3, #1
 800350e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	81bb      	strh	r3, [r7, #12]
 8003520:	e002      	b.n	8003528 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003530:	89ba      	ldrh	r2, [r7, #12]
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff f926 	bl	8002788 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800353c:	e00e      	b.n	800355c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003572:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003582:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	60bb      	str	r3, [r7, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c0:	d172      	bne.n	80036a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b22      	cmp	r3, #34	@ 0x22
 80035c6:	d002      	beq.n	80035ce <I2C_Slave_STOPF+0x6a>
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80035cc:	d135      	bne.n	800363a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003600:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe f985 	bl	8001916 <HAL_DMA_GetState>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d049      	beq.n	80036a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003616:	4a69      	ldr	r2, [pc, #420]	@ (80037bc <I2C_Slave_STOPF+0x258>)
 8003618:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe f957 	bl	80018d2 <HAL_DMA_Abort_IT>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d03d      	beq.n	80036a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003634:	4610      	mov	r0, r2
 8003636:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003638:	e035      	b.n	80036a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f94f 	bl	8001916 <HAL_DMA_GetState>
 8003678:	4603      	mov	r3, r0
 800367a:	2b01      	cmp	r3, #1
 800367c:	d014      	beq.n	80036a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003682:	4a4e      	ldr	r2, [pc, #312]	@ (80037bc <I2C_Slave_STOPF+0x258>)
 8003684:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe f921 	bl	80018d2 <HAL_DMA_Abort_IT>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80036a0:	4610      	mov	r0, r2
 80036a2:	4798      	blx	r3
 80036a4:	e000      	b.n	80036a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03e      	beq.n	8003730 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d112      	bne.n	80036e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695b      	ldr	r3, [r3, #20]
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b40      	cmp	r3, #64	@ 0x40
 80036f2:	d112      	bne.n	800371a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	691a      	ldr	r2, [r3, #16]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f8b7 	bl	80038ac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800373e:	e039      	b.n	80037b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	2b2a      	cmp	r3, #42	@ 0x2a
 8003744:	d109      	bne.n	800375a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2228      	movs	r2, #40	@ 0x28
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff f80d 	bl	8002774 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b28      	cmp	r3, #40	@ 0x28
 8003764:	d111      	bne.n	800378a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a15      	ldr	r2, [pc, #84]	@ (80037c0 <I2C_Slave_STOPF+0x25c>)
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff f80e 	bl	80027a4 <HAL_I2C_ListenCpltCallback>
}
 8003788:	e014      	b.n	80037b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378e:	2b22      	cmp	r3, #34	@ 0x22
 8003790:	d002      	beq.n	8003798 <I2C_Slave_STOPF+0x234>
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b22      	cmp	r3, #34	@ 0x22
 8003796:	d10d      	bne.n	80037b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe ffe0 	bl	8002774 <HAL_I2C_SlaveRxCpltCallback>
}
 80037b4:	bf00      	nop
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	08003ce1 	.word	0x08003ce1
 80037c0:	ffff0000 	.word	0xffff0000

080037c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d002      	beq.n	80037e6 <I2C_Slave_AF+0x22>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d129      	bne.n	800383a <I2C_Slave_AF+0x76>
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b28      	cmp	r3, #40	@ 0x28
 80037ea:	d126      	bne.n	800383a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a2e      	ldr	r2, [pc, #184]	@ (80038a8 <I2C_Slave_AF+0xe4>)
 80037f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003800:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800380a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe ffb6 	bl	80027a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003838:	e031      	b.n	800389e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	2b21      	cmp	r3, #33	@ 0x21
 800383e:	d129      	bne.n	8003894 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <I2C_Slave_AF+0xe4>)
 8003844:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2221      	movs	r2, #33	@ 0x21
 800384a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800386a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003874:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003884:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7fe fb1c 	bl	8001ec4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7fe ff67 	bl	8002760 <HAL_I2C_SlaveTxCpltCallback>
}
 8003892:	e004      	b.n	800389e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800389c:	615a      	str	r2, [r3, #20]
}
 800389e:	bf00      	nop
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	ffff0000 	.word	0xffff0000

080038ac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038c2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d002      	beq.n	80038d0 <I2C_ITError+0x24>
 80038ca:	7bbb      	ldrb	r3, [r7, #14]
 80038cc:	2b40      	cmp	r3, #64	@ 0x40
 80038ce:	d10a      	bne.n	80038e6 <I2C_ITError+0x3a>
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b22      	cmp	r3, #34	@ 0x22
 80038d4:	d107      	bne.n	80038e6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038ec:	2b28      	cmp	r3, #40	@ 0x28
 80038ee:	d107      	bne.n	8003900 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2228      	movs	r2, #40	@ 0x28
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80038fe:	e015      	b.n	800392c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800390a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800390e:	d00a      	beq.n	8003926 <I2C_ITError+0x7a>
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b60      	cmp	r3, #96	@ 0x60
 8003914:	d007      	beq.n	8003926 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800393a:	d162      	bne.n	8003a02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800394a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b01      	cmp	r3, #1
 8003958:	d020      	beq.n	800399c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	4a6a      	ldr	r2, [pc, #424]	@ (8003b08 <I2C_ITError+0x25c>)
 8003960:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd ffb3 	bl	80018d2 <HAL_DMA_Abort_IT>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8089 	beq.w	8003a86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003996:	4610      	mov	r0, r2
 8003998:	4798      	blx	r3
 800399a:	e074      	b.n	8003a86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a0:	4a59      	ldr	r2, [pc, #356]	@ (8003b08 <I2C_ITError+0x25c>)
 80039a2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fd ff92 	bl	80018d2 <HAL_DMA_Abort_IT>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d068      	beq.n	8003a86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039be:	2b40      	cmp	r3, #64	@ 0x40
 80039c0:	d10b      	bne.n	80039da <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039fc:	4610      	mov	r0, r2
 80039fe:	4798      	blx	r3
 8003a00:	e041      	b.n	8003a86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b60      	cmp	r3, #96	@ 0x60
 8003a0c:	d125      	bne.n	8003a5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a26:	2b40      	cmp	r3, #64	@ 0x40
 8003a28:	d10b      	bne.n	8003a42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe fece 	bl	80027f4 <HAL_I2C_AbortCpltCallback>
 8003a58:	e015      	b.n	8003a86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	d10b      	bne.n	8003a80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fe fead 	bl	80027e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10e      	bne.n	8003ab4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ac2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d113      	bne.n	8003b00 <I2C_ITError+0x254>
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b28      	cmp	r3, #40	@ 0x28
 8003adc:	d110      	bne.n	8003b00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <I2C_ITError+0x260>)
 8003ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fe fe52 	bl	80027a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	08003ce1 	.word	0x08003ce1
 8003b0c:	ffff0000 	.word	0xffff0000

08003b10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	4608      	mov	r0, r1
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4603      	mov	r3, r0
 8003b20:	817b      	strh	r3, [r7, #10]
 8003b22:	460b      	mov	r3, r1
 8003b24:	813b      	strh	r3, [r7, #8]
 8003b26:	4613      	mov	r3, r2
 8003b28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 f96a 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00d      	beq.n	8003b7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b70:	d103      	bne.n	8003b7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0aa      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b7e:	897b      	ldrh	r3, [r7, #10]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	4952      	ldr	r1, [pc, #328]	@ (8003cdc <I2C_RequestMemoryRead+0x1cc>)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 f9c5 	bl	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e097      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	6a39      	ldr	r1, [r7, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fa50 	bl	8004064 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00d      	beq.n	8003be6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e076      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bec:	893b      	ldrh	r3, [r7, #8]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
 8003bf6:	e021      	b.n	8003c3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bf8:	893b      	ldrh	r3, [r7, #8]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c08:	6a39      	ldr	r1, [r7, #32]
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa2a 	bl	8004064 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00d      	beq.n	8003c32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d107      	bne.n	8003c2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e050      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c32:	893b      	ldrh	r3, [r7, #8]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3e:	6a39      	ldr	r1, [r7, #32]
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fa0f 	bl	8004064 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00d      	beq.n	8003c68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d107      	bne.n	8003c64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e035      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 f8d3 	bl	8003e30 <I2C_WaitOnFlagUntilTimeout>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00d      	beq.n	8003cac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9e:	d103      	bne.n	8003ca8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e013      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cac:	897b      	ldrh	r3, [r7, #10]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	6a3a      	ldr	r2, [r7, #32]
 8003cc0:	4906      	ldr	r1, [pc, #24]	@ (8003cdc <I2C_RequestMemoryRead+0x1cc>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f92e 	bl	8003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	00010002 	.word	0x00010002

08003ce0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8003e28 <I2C_DMAAbort+0x148>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	08db      	lsrs	r3, r3, #3
 8003d00:	4a4a      	ldr	r2, [pc, #296]	@ (8003e2c <I2C_DMAAbort+0x14c>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0a1a      	lsrs	r2, r3, #8
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00da      	lsls	r2, r3, #3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003d26:	e00a      	b.n	8003d3e <I2C_DMAAbort+0x5e>
    }
    count--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3c:	d0ea      	beq.n	8003d14 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d80:	2200      	movs	r2, #0
 8003d82:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d90:	2200      	movs	r2, #0
 8003d92:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b60      	cmp	r3, #96	@ 0x60
 8003dae:	d10e      	bne.n	8003dce <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2220      	movs	r2, #32
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7fe fd14 	bl	80027f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dcc:	e027      	b.n	8003e1e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003dd4:	2b28      	cmp	r3, #40	@ 0x28
 8003dd6:	d117      	bne.n	8003e08 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003df6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2228      	movs	r2, #40	@ 0x28
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003e06:	e007      	b.n	8003e18 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7fe fce1 	bl	80027e0 <HAL_I2C_ErrorCallback>
}
 8003e1e:	bf00      	nop
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	14f8b589 	.word	0x14f8b589

08003e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	603b      	str	r3, [r7, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e40:	e048      	b.n	8003ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e48:	d044      	beq.n	8003ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4a:	f7fd fc25 	bl	8001698 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d139      	bne.n	8003ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d10d      	bne.n	8003e86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	43da      	mvns	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4013      	ands	r3, r2
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	bf0c      	ite	eq
 8003e7c:	2301      	moveq	r3, #1
 8003e7e:	2300      	movne	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	e00c      	b.n	8003ea0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	43da      	mvns	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d116      	bne.n	8003ed4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e023      	b.n	8003f1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	0c1b      	lsrs	r3, r3, #16
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d10d      	bne.n	8003efa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	e00c      	b.n	8003f14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	43da      	mvns	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	4013      	ands	r3, r2
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	bf0c      	ite	eq
 8003f0c:	2301      	moveq	r3, #1
 8003f0e:	2300      	movne	r3, #0
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d093      	beq.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f32:	e071      	b.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f42:	d123      	bne.n	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	f043 0204 	orr.w	r2, r3, #4
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e067      	b.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	d041      	beq.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f94:	f7fd fb80 	bl	8001698 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d302      	bcc.n	8003faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d136      	bne.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	0c1b      	lsrs	r3, r3, #16
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10c      	bne.n	8003fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	bf14      	ite	ne
 8003fc6:	2301      	movne	r3, #1
 8003fc8:	2300      	moveq	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e00b      	b.n	8003fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	f043 0220 	orr.w	r2, r3, #32
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e021      	b.n	800405c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b01      	cmp	r3, #1
 8004020:	d10c      	bne.n	800403c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	43da      	mvns	r2, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4013      	ands	r3, r2
 800402e:	b29b      	uxth	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	bf14      	ite	ne
 8004034:	2301      	movne	r3, #1
 8004036:	2300      	moveq	r3, #0
 8004038:	b2db      	uxtb	r3, r3
 800403a:	e00b      	b.n	8004054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	43da      	mvns	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	4013      	ands	r3, r2
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	f47f af6d 	bne.w	8003f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004070:	e034      	b.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f8cd 	bl	8004212 <I2C_IsAcknowledgeFailed>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e034      	b.n	80040ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d028      	beq.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408a:	f7fd fb05 	bl	8001698 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	d302      	bcc.n	80040a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d11d      	bne.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040aa:	2b80      	cmp	r3, #128	@ 0x80
 80040ac:	d016      	beq.n	80040dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e007      	b.n	80040ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e6:	2b80      	cmp	r3, #128	@ 0x80
 80040e8:	d1c3      	bne.n	8004072 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004100:	4b13      	ldr	r3, [pc, #76]	@ (8004150 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	08db      	lsrs	r3, r3, #3
 8004106:	4a13      	ldr	r2, [pc, #76]	@ (8004154 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	0a1a      	lsrs	r2, r3, #8
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3b01      	subs	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d107      	bne.n	8004132 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e008      	b.n	8004144 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800413c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004140:	d0e9      	beq.n	8004116 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	20000008 	.word	0x20000008
 8004154:	14f8b589 	.word	0x14f8b589

08004158 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004164:	e049      	b.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b10      	cmp	r3, #16
 8004172:	d119      	bne.n	80041a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e030      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fd fa76 	bl	8001698 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d11d      	bne.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b40      	cmp	r3, #64	@ 0x40
 80041ca:	d016      	beq.n	80041fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e007      	b.n	800420a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004204:	2b40      	cmp	r3, #64	@ 0x40
 8004206:	d1ae      	bne.n	8004166 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004228:	d11b      	bne.n	8004262 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004232:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f043 0204 	orr.w	r2, r3, #4
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004280:	d103      	bne.n	800428a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004288:	e007      	b.n	800429a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800428e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004292:	d102      	bne.n	800429a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2208      	movs	r2, #8
 8004298:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800429a:	bf00      	nop
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e267      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c6:	4b88      	ldr	r3, [pc, #544]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b85      	ldr	r3, [pc, #532]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b82      	ldr	r3, [pc, #520]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b7e      	ldr	r3, [pc, #504]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e242      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b76      	ldr	r3, [pc, #472]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b70      	ldr	r3, [pc, #448]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6f      	ldr	r2, [pc, #444]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b6d      	ldr	r3, [pc, #436]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6c      	ldr	r2, [pc, #432]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b69      	ldr	r3, [pc, #420]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b66      	ldr	r3, [pc, #408]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a65      	ldr	r2, [pc, #404]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd f99a 	bl	8001698 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fd f996 	bl	8001698 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e207      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b5b      	ldr	r3, [pc, #364]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fd f986 	bl	8001698 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd f982 	bl	8001698 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1f3      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b51      	ldr	r3, [pc, #324]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043be:	4b4a      	ldr	r3, [pc, #296]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b47      	ldr	r3, [pc, #284]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b44      	ldr	r3, [pc, #272]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b41      	ldr	r3, [pc, #260]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c7      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b3b      	ldr	r3, [pc, #236]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4937      	ldr	r1, [pc, #220]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b34      	ldr	r3, [pc, #208]	@ (80044ec <HAL_RCC_OscConfig+0x244>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fd f93b 	bl	8001698 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004426:	f7fd f937 	bl	8001698 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a8      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b2b      	ldr	r3, [pc, #172]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b28      	ldr	r3, [pc, #160]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4925      	ldr	r1, [pc, #148]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b24      	ldr	r3, [pc, #144]	@ (80044ec <HAL_RCC_OscConfig+0x244>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd f91a 	bl	8001698 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd f916 	bl	8001698 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e187      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d036      	beq.n	8004500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b15      	ldr	r3, [pc, #84]	@ (80044f0 <HAL_RCC_OscConfig+0x248>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd f8fa 	bl	8001698 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fd f8f6 	bl	8001698 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e167      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
 80044c6:	e01b      	b.n	8004500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_OscConfig+0x248>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fd f8e3 	bl	8001698 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e00e      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fd f8df 	bl	8001698 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d907      	bls.n	80044f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e150      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470000 	.word	0x42470000
 80044f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	4b88      	ldr	r3, [pc, #544]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ea      	bne.n	80044d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8097 	beq.w	800463c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b81      	ldr	r3, [pc, #516]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	4b7d      	ldr	r3, [pc, #500]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	4a7c      	ldr	r2, [pc, #496]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	@ 0x40
 800452e:	4b7a      	ldr	r3, [pc, #488]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b77      	ldr	r3, [pc, #476]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b74      	ldr	r3, [pc, #464]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a73      	ldr	r2, [pc, #460]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fd f89f 	bl	8001698 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fd f89b 	bl	8001698 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e10c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCC_OscConfig+0x474>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x2ea>
 8004584:	4b64      	ldr	r3, [pc, #400]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004588:	4a63      	ldr	r2, [pc, #396]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004590:	e01c      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x30c>
 800459a:	4b5f      	ldr	r3, [pc, #380]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459e:	4a5e      	ldr	r2, [pc, #376]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a5b      	ldr	r2, [pc, #364]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b2:	e00b      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 80045b4:	4b58      	ldr	r3, [pc, #352]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b8:	4a57      	ldr	r2, [pc, #348]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c0:	4b55      	ldr	r3, [pc, #340]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c4:	4a54      	ldr	r2, [pc, #336]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 0304 	bic.w	r3, r3, #4
 80045ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd f860 	bl	8001698 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd f85c 	bl	8001698 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0cb      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	4b49      	ldr	r3, [pc, #292]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ee      	beq.n	80045dc <HAL_RCC_OscConfig+0x334>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fd f84a 	bl	8001698 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	e00a      	b.n	800461e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7fd f846 	bl	8001698 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0b5      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	4b3e      	ldr	r3, [pc, #248]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ee      	bne.n	8004608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004630:	4b39      	ldr	r3, [pc, #228]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	4a38      	ldr	r2, [pc, #224]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80a1 	beq.w	8004788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004646:	4b34      	ldr	r3, [pc, #208]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b08      	cmp	r3, #8
 8004650:	d05c      	beq.n	800470c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d141      	bne.n	80046de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b31      	ldr	r3, [pc, #196]	@ (8004720 <HAL_RCC_OscConfig+0x478>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fd f81a 	bl	8001698 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fd f816 	bl	8001698 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e087      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b27      	ldr	r3, [pc, #156]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	491b      	ldr	r1, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004720 <HAL_RCC_OscConfig+0x478>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fc ffef 	bl	8001698 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046be:	f7fc ffeb 	bl	8001698 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e05c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	4b11      	ldr	r3, [pc, #68]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x416>
 80046dc:	e054      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b10      	ldr	r3, [pc, #64]	@ (8004720 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fc ffd8 	bl	8001698 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fc ffd4 	bl	8001698 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e045      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x444>
 800470a:	e03d      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e038      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <HAL_RCC_OscConfig+0x4ec>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d028      	beq.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d121      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d11a      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800475a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d111      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fc ff06 	bl	8001698 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fc ff02 	bl	8001698 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	@ (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fe66 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	08007aa8 	.word	0x08007aa8
 800495c:	20000008 	.word	0x20000008
 8004960:	2000000c 	.word	0x2000000c

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b090      	sub	sp, #64	@ 0x40
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004974:	2300      	movs	r3, #0
 8004976:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b59      	ldr	r3, [pc, #356]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80a1 	bhi.w	8004ad0 <HAL_RCC_GetSysClockFreq+0x16c>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e09b      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 800499a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800499c:	e09b      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b53      	ldr	r3, [pc, #332]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x188>)
 80049a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049a2:	e098      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b4f      	ldr	r3, [pc, #316]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b4d      	ldr	r3, [pc, #308]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d028      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b4a      	ldr	r3, [pc, #296]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049cc:	2100      	movs	r1, #0
 80049ce:	4b47      	ldr	r3, [pc, #284]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x188>)
 80049d0:	fb03 f201 	mul.w	r2, r3, r1
 80049d4:	2300      	movs	r3, #0
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	4413      	add	r3, r2
 80049dc:	4a43      	ldr	r2, [pc, #268]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x188>)
 80049de:	fba0 1202 	umull	r1, r2, r0, r2
 80049e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e4:	460a      	mov	r2, r1
 80049e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ea:	4413      	add	r3, r2
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f0:	2200      	movs	r2, #0
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	61fa      	str	r2, [r7, #28]
 80049f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049fe:	f7fc f8db 	bl	8000bb8 <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4613      	mov	r3, r2
 8004a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a0a:	e053      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a0c:	4b35      	ldr	r3, [pc, #212]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	2200      	movs	r2, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	617a      	str	r2, [r7, #20]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a1e:	f04f 0b00 	mov.w	fp, #0
 8004a22:	4652      	mov	r2, sl
 8004a24:	465b      	mov	r3, fp
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	0159      	lsls	r1, r3, #5
 8004a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a34:	0150      	lsls	r0, r2, #5
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a3e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a56:	ebb2 0408 	subs.w	r4, r2, r8
 8004a5a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	00eb      	lsls	r3, r5, #3
 8004a68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a6c:	00e2      	lsls	r2, r4, #3
 8004a6e:	4614      	mov	r4, r2
 8004a70:	461d      	mov	r5, r3
 8004a72:	eb14 030a 	adds.w	r3, r4, sl
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	eb45 030b 	adc.w	r3, r5, fp
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	028b      	lsls	r3, r1, #10
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a94:	4621      	mov	r1, r4
 8004a96:	028a      	lsls	r2, r1, #10
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa8:	f7fc f886 	bl	8000bb8 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004ac4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ace:	e002      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3740      	adds	r7, #64	@ 0x40
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	017d7840 	.word	0x017d7840

08004af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af4:	4b03      	ldr	r3, [pc, #12]	@ (8004b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000008 	.word	0x20000008

08004b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b0c:	f7ff fff0 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0a9b      	lsrs	r3, r3, #10
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4903      	ldr	r1, [pc, #12]	@ (8004b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	08007ab8 	.word	0x08007ab8

08004b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b34:	f7ff ffdc 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0b5b      	lsrs	r3, r3, #13
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	08007ab8 	.word	0x08007ab8

08004b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e042      	b.n	8004bf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fc fb96 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2224      	movs	r2, #36	@ 0x24
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f82b 	bl	8004bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bfc:	b0c0      	sub	sp, #256	@ 0x100
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	68d9      	ldr	r1, [r3, #12]
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	ea40 0301 	orr.w	r3, r0, r1
 8004c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c50:	f021 010c 	bic.w	r1, r1, #12
 8004c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c72:	6999      	ldr	r1, [r3, #24]
 8004c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	ea40 0301 	orr.w	r3, r0, r1
 8004c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b8f      	ldr	r3, [pc, #572]	@ (8004ec4 <UART_SetConfig+0x2cc>)
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d005      	beq.n	8004c98 <UART_SetConfig+0xa0>
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b8d      	ldr	r3, [pc, #564]	@ (8004ec8 <UART_SetConfig+0x2d0>)
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d104      	bne.n	8004ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c98:	f7ff ff4a 	bl	8004b30 <HAL_RCC_GetPCLK2Freq>
 8004c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004ca0:	e003      	b.n	8004caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ca2:	f7ff ff31 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8004ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cb4:	f040 810c 	bne.w	8004ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cca:	4622      	mov	r2, r4
 8004ccc:	462b      	mov	r3, r5
 8004cce:	1891      	adds	r1, r2, r2
 8004cd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cd2:	415b      	adcs	r3, r3
 8004cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cda:	4621      	mov	r1, r4
 8004cdc:	eb12 0801 	adds.w	r8, r2, r1
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	eb43 0901 	adc.w	r9, r3, r1
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cfa:	4690      	mov	r8, r2
 8004cfc:	4699      	mov	r9, r3
 8004cfe:	4623      	mov	r3, r4
 8004d00:	eb18 0303 	adds.w	r3, r8, r3
 8004d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d08:	462b      	mov	r3, r5
 8004d0a:	eb49 0303 	adc.w	r3, r9, r3
 8004d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d26:	460b      	mov	r3, r1
 8004d28:	18db      	adds	r3, r3, r3
 8004d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	eb42 0303 	adc.w	r3, r2, r3
 8004d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d3c:	f7fb ff3c 	bl	8000bb8 <__aeabi_uldivmod>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <UART_SetConfig+0x2d4>)
 8004d46:	fba3 2302 	umull	r2, r3, r3, r2
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	011c      	lsls	r4, r3, #4
 8004d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d60:	4642      	mov	r2, r8
 8004d62:	464b      	mov	r3, r9
 8004d64:	1891      	adds	r1, r2, r2
 8004d66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d68:	415b      	adcs	r3, r3
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d70:	4641      	mov	r1, r8
 8004d72:	eb12 0a01 	adds.w	sl, r2, r1
 8004d76:	4649      	mov	r1, r9
 8004d78:	eb43 0b01 	adc.w	fp, r3, r1
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d90:	4692      	mov	sl, r2
 8004d92:	469b      	mov	fp, r3
 8004d94:	4643      	mov	r3, r8
 8004d96:	eb1a 0303 	adds.w	r3, sl, r3
 8004d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	eb4b 0303 	adc.w	r3, fp, r3
 8004da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004db4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	18db      	adds	r3, r3, r3
 8004dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	eb42 0303 	adc.w	r3, r2, r3
 8004dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dd2:	f7fb fef1 	bl	8000bb8 <__aeabi_uldivmod>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <UART_SetConfig+0x2d4>)
 8004dde:	fba3 2301 	umull	r2, r3, r3, r1
 8004de2:	095b      	lsrs	r3, r3, #5
 8004de4:	2264      	movs	r2, #100	@ 0x64
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	1acb      	subs	r3, r1, r3
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004df2:	4b36      	ldr	r3, [pc, #216]	@ (8004ecc <UART_SetConfig+0x2d4>)
 8004df4:	fba3 2302 	umull	r2, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e00:	441c      	add	r4, r3
 8004e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	1891      	adds	r1, r2, r2
 8004e1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e1c:	415b      	adcs	r3, r3
 8004e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e24:	4641      	mov	r1, r8
 8004e26:	1851      	adds	r1, r2, r1
 8004e28:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e2a:	4649      	mov	r1, r9
 8004e2c:	414b      	adcs	r3, r1
 8004e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 0300 	mov.w	r3, #0
 8004e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	00cb      	lsls	r3, r1, #3
 8004e40:	4651      	mov	r1, sl
 8004e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e46:	4651      	mov	r1, sl
 8004e48:	00ca      	lsls	r2, r1, #3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4642      	mov	r2, r8
 8004e52:	189b      	adds	r3, r3, r2
 8004e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e58:	464b      	mov	r3, r9
 8004e5a:	460a      	mov	r2, r1
 8004e5c:	eb42 0303 	adc.w	r3, r2, r3
 8004e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e78:	460b      	mov	r3, r1
 8004e7a:	18db      	adds	r3, r3, r3
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e7e:	4613      	mov	r3, r2
 8004e80:	eb42 0303 	adc.w	r3, r2, r3
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e8e:	f7fb fe93 	bl	8000bb8 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ecc <UART_SetConfig+0x2d4>)
 8004e98:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	2164      	movs	r1, #100	@ 0x64
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3332      	adds	r3, #50	@ 0x32
 8004eaa:	4a08      	ldr	r2, [pc, #32]	@ (8004ecc <UART_SetConfig+0x2d4>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	f003 0207 	and.w	r2, r3, #7
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4422      	add	r2, r4
 8004ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ec0:	e106      	b.n	80050d0 <UART_SetConfig+0x4d8>
 8004ec2:	bf00      	nop
 8004ec4:	40011000 	.word	0x40011000
 8004ec8:	40011400 	.word	0x40011400
 8004ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	1891      	adds	r1, r2, r2
 8004ee8:	6239      	str	r1, [r7, #32]
 8004eea:	415b      	adcs	r3, r3
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	1854      	adds	r4, r2, r1
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	eb43 0501 	adc.w	r5, r3, r1
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	00eb      	lsls	r3, r5, #3
 8004f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f0a:	00e2      	lsls	r2, r4, #3
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	461d      	mov	r5, r3
 8004f10:	4643      	mov	r3, r8
 8004f12:	18e3      	adds	r3, r4, r3
 8004f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f18:	464b      	mov	r3, r9
 8004f1a:	eb45 0303 	adc.w	r3, r5, r3
 8004f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f32:	f04f 0200 	mov.w	r2, #0
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f3e:	4629      	mov	r1, r5
 8004f40:	008b      	lsls	r3, r1, #2
 8004f42:	4621      	mov	r1, r4
 8004f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f48:	4621      	mov	r1, r4
 8004f4a:	008a      	lsls	r2, r1, #2
 8004f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f50:	f7fb fe32 	bl	8000bb8 <__aeabi_uldivmod>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4b60      	ldr	r3, [pc, #384]	@ (80050dc <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	011c      	lsls	r4, r3, #4
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f74:	4642      	mov	r2, r8
 8004f76:	464b      	mov	r3, r9
 8004f78:	1891      	adds	r1, r2, r2
 8004f7a:	61b9      	str	r1, [r7, #24]
 8004f7c:	415b      	adcs	r3, r3
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f84:	4641      	mov	r1, r8
 8004f86:	1851      	adds	r1, r2, r1
 8004f88:	6139      	str	r1, [r7, #16]
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	414b      	adcs	r3, r1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	00cb      	lsls	r3, r1, #3
 8004fa0:	4651      	mov	r1, sl
 8004fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	00ca      	lsls	r2, r1, #3
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4642      	mov	r2, r8
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fb8:	464b      	mov	r3, r9
 8004fba:	460a      	mov	r2, r1
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fdc:	4649      	mov	r1, r9
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	008a      	lsls	r2, r1, #2
 8004fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fee:	f7fb fde3 	bl	8000bb8 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4b38      	ldr	r3, [pc, #224]	@ (80050dc <UART_SetConfig+0x4e4>)
 8004ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2264      	movs	r2, #100	@ 0x64
 8005002:	fb02 f303 	mul.w	r3, r2, r3
 8005006:	1acb      	subs	r3, r1, r3
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	3332      	adds	r3, #50	@ 0x32
 800500c:	4a33      	ldr	r2, [pc, #204]	@ (80050dc <UART_SetConfig+0x4e4>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005018:	441c      	add	r4, r3
 800501a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800501e:	2200      	movs	r2, #0
 8005020:	673b      	str	r3, [r7, #112]	@ 0x70
 8005022:	677a      	str	r2, [r7, #116]	@ 0x74
 8005024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	1891      	adds	r1, r2, r2
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	415b      	adcs	r3, r3
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005038:	4641      	mov	r1, r8
 800503a:	1851      	adds	r1, r2, r1
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	4649      	mov	r1, r9
 8005040:	414b      	adcs	r3, r1
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005050:	4659      	mov	r1, fp
 8005052:	00cb      	lsls	r3, r1, #3
 8005054:	4651      	mov	r1, sl
 8005056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800505a:	4651      	mov	r1, sl
 800505c:	00ca      	lsls	r2, r1, #3
 800505e:	4610      	mov	r0, r2
 8005060:	4619      	mov	r1, r3
 8005062:	4603      	mov	r3, r0
 8005064:	4642      	mov	r2, r8
 8005066:	189b      	adds	r3, r3, r2
 8005068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800506a:	464b      	mov	r3, r9
 800506c:	460a      	mov	r2, r1
 800506e:	eb42 0303 	adc.w	r3, r2, r3
 8005072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	663b      	str	r3, [r7, #96]	@ 0x60
 800507e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800508c:	4649      	mov	r1, r9
 800508e:	008b      	lsls	r3, r1, #2
 8005090:	4641      	mov	r1, r8
 8005092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005096:	4641      	mov	r1, r8
 8005098:	008a      	lsls	r2, r1, #2
 800509a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800509e:	f7fb fd8b 	bl	8000bb8 <__aeabi_uldivmod>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <UART_SetConfig+0x4e4>)
 80050a8:	fba3 1302 	umull	r1, r3, r3, r2
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	2164      	movs	r1, #100	@ 0x64
 80050b0:	fb01 f303 	mul.w	r3, r1, r3
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	3332      	adds	r3, #50	@ 0x32
 80050ba:	4a08      	ldr	r2, [pc, #32]	@ (80050dc <UART_SetConfig+0x4e4>)
 80050bc:	fba2 2303 	umull	r2, r3, r2, r3
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	f003 020f 	and.w	r2, r3, #15
 80050c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4422      	add	r2, r4
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050d6:	46bd      	mov	sp, r7
 80050d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050dc:	51eb851f 	.word	0x51eb851f

080050e0 <__assert_func>:
 80050e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050e2:	4614      	mov	r4, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b09      	ldr	r3, [pc, #36]	@ (800510c <__assert_func+0x2c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4605      	mov	r5, r0
 80050ec:	68d8      	ldr	r0, [r3, #12]
 80050ee:	b954      	cbnz	r4, 8005106 <__assert_func+0x26>
 80050f0:	4b07      	ldr	r3, [pc, #28]	@ (8005110 <__assert_func+0x30>)
 80050f2:	461c      	mov	r4, r3
 80050f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050f8:	9100      	str	r1, [sp, #0]
 80050fa:	462b      	mov	r3, r5
 80050fc:	4905      	ldr	r1, [pc, #20]	@ (8005114 <__assert_func+0x34>)
 80050fe:	f000 fd09 	bl	8005b14 <fiprintf>
 8005102:	f000 fe0c 	bl	8005d1e <abort>
 8005106:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <__assert_func+0x38>)
 8005108:	e7f4      	b.n	80050f4 <__assert_func+0x14>
 800510a:	bf00      	nop
 800510c:	20000020 	.word	0x20000020
 8005110:	08007afb 	.word	0x08007afb
 8005114:	08007acd 	.word	0x08007acd
 8005118:	08007ac0 	.word	0x08007ac0

0800511c <__cvt>:
 800511c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	ec57 6b10 	vmov	r6, r7, d0
 8005124:	2f00      	cmp	r7, #0
 8005126:	460c      	mov	r4, r1
 8005128:	4619      	mov	r1, r3
 800512a:	463b      	mov	r3, r7
 800512c:	bfbb      	ittet	lt
 800512e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005132:	461f      	movlt	r7, r3
 8005134:	2300      	movge	r3, #0
 8005136:	232d      	movlt	r3, #45	@ 0x2d
 8005138:	700b      	strb	r3, [r1, #0]
 800513a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800513c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005140:	4691      	mov	r9, r2
 8005142:	f023 0820 	bic.w	r8, r3, #32
 8005146:	bfbc      	itt	lt
 8005148:	4632      	movlt	r2, r6
 800514a:	4616      	movlt	r6, r2
 800514c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005150:	d005      	beq.n	800515e <__cvt+0x42>
 8005152:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005156:	d100      	bne.n	800515a <__cvt+0x3e>
 8005158:	3401      	adds	r4, #1
 800515a:	2102      	movs	r1, #2
 800515c:	e000      	b.n	8005160 <__cvt+0x44>
 800515e:	2103      	movs	r1, #3
 8005160:	ab03      	add	r3, sp, #12
 8005162:	9301      	str	r3, [sp, #4]
 8005164:	ab02      	add	r3, sp, #8
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	ec47 6b10 	vmov	d0, r6, r7
 800516c:	4653      	mov	r3, sl
 800516e:	4622      	mov	r2, r4
 8005170:	f000 fe66 	bl	8005e40 <_dtoa_r>
 8005174:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005178:	4605      	mov	r5, r0
 800517a:	d119      	bne.n	80051b0 <__cvt+0x94>
 800517c:	f019 0f01 	tst.w	r9, #1
 8005180:	d00e      	beq.n	80051a0 <__cvt+0x84>
 8005182:	eb00 0904 	add.w	r9, r0, r4
 8005186:	2200      	movs	r2, #0
 8005188:	2300      	movs	r3, #0
 800518a:	4630      	mov	r0, r6
 800518c:	4639      	mov	r1, r7
 800518e:	f7fb fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005192:	b108      	cbz	r0, 8005198 <__cvt+0x7c>
 8005194:	f8cd 900c 	str.w	r9, [sp, #12]
 8005198:	2230      	movs	r2, #48	@ 0x30
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	454b      	cmp	r3, r9
 800519e:	d31e      	bcc.n	80051de <__cvt+0xc2>
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80051a4:	1b5b      	subs	r3, r3, r5
 80051a6:	4628      	mov	r0, r5
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	b004      	add	sp, #16
 80051ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051b4:	eb00 0904 	add.w	r9, r0, r4
 80051b8:	d1e5      	bne.n	8005186 <__cvt+0x6a>
 80051ba:	7803      	ldrb	r3, [r0, #0]
 80051bc:	2b30      	cmp	r3, #48	@ 0x30
 80051be:	d10a      	bne.n	80051d6 <__cvt+0xba>
 80051c0:	2200      	movs	r2, #0
 80051c2:	2300      	movs	r3, #0
 80051c4:	4630      	mov	r0, r6
 80051c6:	4639      	mov	r1, r7
 80051c8:	f7fb fc86 	bl	8000ad8 <__aeabi_dcmpeq>
 80051cc:	b918      	cbnz	r0, 80051d6 <__cvt+0xba>
 80051ce:	f1c4 0401 	rsb	r4, r4, #1
 80051d2:	f8ca 4000 	str.w	r4, [sl]
 80051d6:	f8da 3000 	ldr.w	r3, [sl]
 80051da:	4499      	add	r9, r3
 80051dc:	e7d3      	b.n	8005186 <__cvt+0x6a>
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	9103      	str	r1, [sp, #12]
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e7d9      	b.n	800519a <__cvt+0x7e>

080051e6 <__exponent>:
 80051e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051e8:	2900      	cmp	r1, #0
 80051ea:	bfba      	itte	lt
 80051ec:	4249      	neglt	r1, r1
 80051ee:	232d      	movlt	r3, #45	@ 0x2d
 80051f0:	232b      	movge	r3, #43	@ 0x2b
 80051f2:	2909      	cmp	r1, #9
 80051f4:	7002      	strb	r2, [r0, #0]
 80051f6:	7043      	strb	r3, [r0, #1]
 80051f8:	dd29      	ble.n	800524e <__exponent+0x68>
 80051fa:	f10d 0307 	add.w	r3, sp, #7
 80051fe:	461d      	mov	r5, r3
 8005200:	270a      	movs	r7, #10
 8005202:	461a      	mov	r2, r3
 8005204:	fbb1 f6f7 	udiv	r6, r1, r7
 8005208:	fb07 1416 	mls	r4, r7, r6, r1
 800520c:	3430      	adds	r4, #48	@ 0x30
 800520e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005212:	460c      	mov	r4, r1
 8005214:	2c63      	cmp	r4, #99	@ 0x63
 8005216:	f103 33ff 	add.w	r3, r3, #4294967295
 800521a:	4631      	mov	r1, r6
 800521c:	dcf1      	bgt.n	8005202 <__exponent+0x1c>
 800521e:	3130      	adds	r1, #48	@ 0x30
 8005220:	1e94      	subs	r4, r2, #2
 8005222:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005226:	1c41      	adds	r1, r0, #1
 8005228:	4623      	mov	r3, r4
 800522a:	42ab      	cmp	r3, r5
 800522c:	d30a      	bcc.n	8005244 <__exponent+0x5e>
 800522e:	f10d 0309 	add.w	r3, sp, #9
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	42ac      	cmp	r4, r5
 8005236:	bf88      	it	hi
 8005238:	2300      	movhi	r3, #0
 800523a:	3302      	adds	r3, #2
 800523c:	4403      	add	r3, r0
 800523e:	1a18      	subs	r0, r3, r0
 8005240:	b003      	add	sp, #12
 8005242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005244:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005248:	f801 6f01 	strb.w	r6, [r1, #1]!
 800524c:	e7ed      	b.n	800522a <__exponent+0x44>
 800524e:	2330      	movs	r3, #48	@ 0x30
 8005250:	3130      	adds	r1, #48	@ 0x30
 8005252:	7083      	strb	r3, [r0, #2]
 8005254:	70c1      	strb	r1, [r0, #3]
 8005256:	1d03      	adds	r3, r0, #4
 8005258:	e7f1      	b.n	800523e <__exponent+0x58>
	...

0800525c <_printf_float>:
 800525c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005260:	b08d      	sub	sp, #52	@ 0x34
 8005262:	460c      	mov	r4, r1
 8005264:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005268:	4616      	mov	r6, r2
 800526a:	461f      	mov	r7, r3
 800526c:	4605      	mov	r5, r0
 800526e:	f000 fcdf 	bl	8005c30 <_localeconv_r>
 8005272:	6803      	ldr	r3, [r0, #0]
 8005274:	9304      	str	r3, [sp, #16]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb f802 	bl	8000280 <strlen>
 800527c:	2300      	movs	r3, #0
 800527e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005280:	f8d8 3000 	ldr.w	r3, [r8]
 8005284:	9005      	str	r0, [sp, #20]
 8005286:	3307      	adds	r3, #7
 8005288:	f023 0307 	bic.w	r3, r3, #7
 800528c:	f103 0208 	add.w	r2, r3, #8
 8005290:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005294:	f8d4 b000 	ldr.w	fp, [r4]
 8005298:	f8c8 2000 	str.w	r2, [r8]
 800529c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80052a4:	9307      	str	r3, [sp, #28]
 80052a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80052aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80052ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052b2:	4b9c      	ldr	r3, [pc, #624]	@ (8005524 <_printf_float+0x2c8>)
 80052b4:	f04f 32ff 	mov.w	r2, #4294967295
 80052b8:	f7fb fc40 	bl	8000b3c <__aeabi_dcmpun>
 80052bc:	bb70      	cbnz	r0, 800531c <_printf_float+0xc0>
 80052be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052c2:	4b98      	ldr	r3, [pc, #608]	@ (8005524 <_printf_float+0x2c8>)
 80052c4:	f04f 32ff 	mov.w	r2, #4294967295
 80052c8:	f7fb fc1a 	bl	8000b00 <__aeabi_dcmple>
 80052cc:	bb30      	cbnz	r0, 800531c <_printf_float+0xc0>
 80052ce:	2200      	movs	r2, #0
 80052d0:	2300      	movs	r3, #0
 80052d2:	4640      	mov	r0, r8
 80052d4:	4649      	mov	r1, r9
 80052d6:	f7fb fc09 	bl	8000aec <__aeabi_dcmplt>
 80052da:	b110      	cbz	r0, 80052e2 <_printf_float+0x86>
 80052dc:	232d      	movs	r3, #45	@ 0x2d
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052e2:	4a91      	ldr	r2, [pc, #580]	@ (8005528 <_printf_float+0x2cc>)
 80052e4:	4b91      	ldr	r3, [pc, #580]	@ (800552c <_printf_float+0x2d0>)
 80052e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80052ea:	bf94      	ite	ls
 80052ec:	4690      	movls	r8, r2
 80052ee:	4698      	movhi	r8, r3
 80052f0:	2303      	movs	r3, #3
 80052f2:	6123      	str	r3, [r4, #16]
 80052f4:	f02b 0304 	bic.w	r3, fp, #4
 80052f8:	6023      	str	r3, [r4, #0]
 80052fa:	f04f 0900 	mov.w	r9, #0
 80052fe:	9700      	str	r7, [sp, #0]
 8005300:	4633      	mov	r3, r6
 8005302:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f9d2 	bl	80056b0 <_printf_common>
 800530c:	3001      	adds	r0, #1
 800530e:	f040 808d 	bne.w	800542c <_printf_float+0x1d0>
 8005312:	f04f 30ff 	mov.w	r0, #4294967295
 8005316:	b00d      	add	sp, #52	@ 0x34
 8005318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	4640      	mov	r0, r8
 8005322:	4649      	mov	r1, r9
 8005324:	f7fb fc0a 	bl	8000b3c <__aeabi_dcmpun>
 8005328:	b140      	cbz	r0, 800533c <_printf_float+0xe0>
 800532a:	464b      	mov	r3, r9
 800532c:	2b00      	cmp	r3, #0
 800532e:	bfbc      	itt	lt
 8005330:	232d      	movlt	r3, #45	@ 0x2d
 8005332:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005336:	4a7e      	ldr	r2, [pc, #504]	@ (8005530 <_printf_float+0x2d4>)
 8005338:	4b7e      	ldr	r3, [pc, #504]	@ (8005534 <_printf_float+0x2d8>)
 800533a:	e7d4      	b.n	80052e6 <_printf_float+0x8a>
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005342:	9206      	str	r2, [sp, #24]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	d13b      	bne.n	80053c0 <_printf_float+0x164>
 8005348:	2306      	movs	r3, #6
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005350:	2300      	movs	r3, #0
 8005352:	6022      	str	r2, [r4, #0]
 8005354:	9303      	str	r3, [sp, #12]
 8005356:	ab0a      	add	r3, sp, #40	@ 0x28
 8005358:	e9cd a301 	strd	sl, r3, [sp, #4]
 800535c:	ab09      	add	r3, sp, #36	@ 0x24
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	6861      	ldr	r1, [r4, #4]
 8005362:	ec49 8b10 	vmov	d0, r8, r9
 8005366:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800536a:	4628      	mov	r0, r5
 800536c:	f7ff fed6 	bl	800511c <__cvt>
 8005370:	9b06      	ldr	r3, [sp, #24]
 8005372:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005374:	2b47      	cmp	r3, #71	@ 0x47
 8005376:	4680      	mov	r8, r0
 8005378:	d129      	bne.n	80053ce <_printf_float+0x172>
 800537a:	1cc8      	adds	r0, r1, #3
 800537c:	db02      	blt.n	8005384 <_printf_float+0x128>
 800537e:	6863      	ldr	r3, [r4, #4]
 8005380:	4299      	cmp	r1, r3
 8005382:	dd41      	ble.n	8005408 <_printf_float+0x1ac>
 8005384:	f1aa 0a02 	sub.w	sl, sl, #2
 8005388:	fa5f fa8a 	uxtb.w	sl, sl
 800538c:	3901      	subs	r1, #1
 800538e:	4652      	mov	r2, sl
 8005390:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005394:	9109      	str	r1, [sp, #36]	@ 0x24
 8005396:	f7ff ff26 	bl	80051e6 <__exponent>
 800539a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800539c:	1813      	adds	r3, r2, r0
 800539e:	2a01      	cmp	r2, #1
 80053a0:	4681      	mov	r9, r0
 80053a2:	6123      	str	r3, [r4, #16]
 80053a4:	dc02      	bgt.n	80053ac <_printf_float+0x150>
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	07d2      	lsls	r2, r2, #31
 80053aa:	d501      	bpl.n	80053b0 <_printf_float+0x154>
 80053ac:	3301      	adds	r3, #1
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0a2      	beq.n	80052fe <_printf_float+0xa2>
 80053b8:	232d      	movs	r3, #45	@ 0x2d
 80053ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053be:	e79e      	b.n	80052fe <_printf_float+0xa2>
 80053c0:	9a06      	ldr	r2, [sp, #24]
 80053c2:	2a47      	cmp	r2, #71	@ 0x47
 80053c4:	d1c2      	bne.n	800534c <_printf_float+0xf0>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1c0      	bne.n	800534c <_printf_float+0xf0>
 80053ca:	2301      	movs	r3, #1
 80053cc:	e7bd      	b.n	800534a <_printf_float+0xee>
 80053ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053d2:	d9db      	bls.n	800538c <_printf_float+0x130>
 80053d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80053d8:	d118      	bne.n	800540c <_printf_float+0x1b0>
 80053da:	2900      	cmp	r1, #0
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	dd0b      	ble.n	80053f8 <_printf_float+0x19c>
 80053e0:	6121      	str	r1, [r4, #16]
 80053e2:	b913      	cbnz	r3, 80053ea <_printf_float+0x18e>
 80053e4:	6822      	ldr	r2, [r4, #0]
 80053e6:	07d0      	lsls	r0, r2, #31
 80053e8:	d502      	bpl.n	80053f0 <_printf_float+0x194>
 80053ea:	3301      	adds	r3, #1
 80053ec:	440b      	add	r3, r1
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80053f2:	f04f 0900 	mov.w	r9, #0
 80053f6:	e7db      	b.n	80053b0 <_printf_float+0x154>
 80053f8:	b913      	cbnz	r3, 8005400 <_printf_float+0x1a4>
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	07d2      	lsls	r2, r2, #31
 80053fe:	d501      	bpl.n	8005404 <_printf_float+0x1a8>
 8005400:	3302      	adds	r3, #2
 8005402:	e7f4      	b.n	80053ee <_printf_float+0x192>
 8005404:	2301      	movs	r3, #1
 8005406:	e7f2      	b.n	80053ee <_printf_float+0x192>
 8005408:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800540c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800540e:	4299      	cmp	r1, r3
 8005410:	db05      	blt.n	800541e <_printf_float+0x1c2>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	6121      	str	r1, [r4, #16]
 8005416:	07d8      	lsls	r0, r3, #31
 8005418:	d5ea      	bpl.n	80053f0 <_printf_float+0x194>
 800541a:	1c4b      	adds	r3, r1, #1
 800541c:	e7e7      	b.n	80053ee <_printf_float+0x192>
 800541e:	2900      	cmp	r1, #0
 8005420:	bfd4      	ite	le
 8005422:	f1c1 0202 	rsble	r2, r1, #2
 8005426:	2201      	movgt	r2, #1
 8005428:	4413      	add	r3, r2
 800542a:	e7e0      	b.n	80053ee <_printf_float+0x192>
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	055a      	lsls	r2, r3, #21
 8005430:	d407      	bmi.n	8005442 <_printf_float+0x1e6>
 8005432:	6923      	ldr	r3, [r4, #16]
 8005434:	4642      	mov	r2, r8
 8005436:	4631      	mov	r1, r6
 8005438:	4628      	mov	r0, r5
 800543a:	47b8      	blx	r7
 800543c:	3001      	adds	r0, #1
 800543e:	d12b      	bne.n	8005498 <_printf_float+0x23c>
 8005440:	e767      	b.n	8005312 <_printf_float+0xb6>
 8005442:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005446:	f240 80dd 	bls.w	8005604 <_printf_float+0x3a8>
 800544a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800544e:	2200      	movs	r2, #0
 8005450:	2300      	movs	r3, #0
 8005452:	f7fb fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 8005456:	2800      	cmp	r0, #0
 8005458:	d033      	beq.n	80054c2 <_printf_float+0x266>
 800545a:	4a37      	ldr	r2, [pc, #220]	@ (8005538 <_printf_float+0x2dc>)
 800545c:	2301      	movs	r3, #1
 800545e:	4631      	mov	r1, r6
 8005460:	4628      	mov	r0, r5
 8005462:	47b8      	blx	r7
 8005464:	3001      	adds	r0, #1
 8005466:	f43f af54 	beq.w	8005312 <_printf_float+0xb6>
 800546a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800546e:	4543      	cmp	r3, r8
 8005470:	db02      	blt.n	8005478 <_printf_float+0x21c>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	07d8      	lsls	r0, r3, #31
 8005476:	d50f      	bpl.n	8005498 <_printf_float+0x23c>
 8005478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f af45 	beq.w	8005312 <_printf_float+0xb6>
 8005488:	f04f 0900 	mov.w	r9, #0
 800548c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005490:	f104 0a1a 	add.w	sl, r4, #26
 8005494:	45c8      	cmp	r8, r9
 8005496:	dc09      	bgt.n	80054ac <_printf_float+0x250>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	079b      	lsls	r3, r3, #30
 800549c:	f100 8103 	bmi.w	80056a6 <_printf_float+0x44a>
 80054a0:	68e0      	ldr	r0, [r4, #12]
 80054a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054a4:	4298      	cmp	r0, r3
 80054a6:	bfb8      	it	lt
 80054a8:	4618      	movlt	r0, r3
 80054aa:	e734      	b.n	8005316 <_printf_float+0xba>
 80054ac:	2301      	movs	r3, #1
 80054ae:	4652      	mov	r2, sl
 80054b0:	4631      	mov	r1, r6
 80054b2:	4628      	mov	r0, r5
 80054b4:	47b8      	blx	r7
 80054b6:	3001      	adds	r0, #1
 80054b8:	f43f af2b 	beq.w	8005312 <_printf_float+0xb6>
 80054bc:	f109 0901 	add.w	r9, r9, #1
 80054c0:	e7e8      	b.n	8005494 <_printf_float+0x238>
 80054c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	dc39      	bgt.n	800553c <_printf_float+0x2e0>
 80054c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005538 <_printf_float+0x2dc>)
 80054ca:	2301      	movs	r3, #1
 80054cc:	4631      	mov	r1, r6
 80054ce:	4628      	mov	r0, r5
 80054d0:	47b8      	blx	r7
 80054d2:	3001      	adds	r0, #1
 80054d4:	f43f af1d 	beq.w	8005312 <_printf_float+0xb6>
 80054d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80054dc:	ea59 0303 	orrs.w	r3, r9, r3
 80054e0:	d102      	bne.n	80054e8 <_printf_float+0x28c>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	07d9      	lsls	r1, r3, #31
 80054e6:	d5d7      	bpl.n	8005498 <_printf_float+0x23c>
 80054e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	f43f af0d 	beq.w	8005312 <_printf_float+0xb6>
 80054f8:	f04f 0a00 	mov.w	sl, #0
 80054fc:	f104 0b1a 	add.w	fp, r4, #26
 8005500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005502:	425b      	negs	r3, r3
 8005504:	4553      	cmp	r3, sl
 8005506:	dc01      	bgt.n	800550c <_printf_float+0x2b0>
 8005508:	464b      	mov	r3, r9
 800550a:	e793      	b.n	8005434 <_printf_float+0x1d8>
 800550c:	2301      	movs	r3, #1
 800550e:	465a      	mov	r2, fp
 8005510:	4631      	mov	r1, r6
 8005512:	4628      	mov	r0, r5
 8005514:	47b8      	blx	r7
 8005516:	3001      	adds	r0, #1
 8005518:	f43f aefb 	beq.w	8005312 <_printf_float+0xb6>
 800551c:	f10a 0a01 	add.w	sl, sl, #1
 8005520:	e7ee      	b.n	8005500 <_printf_float+0x2a4>
 8005522:	bf00      	nop
 8005524:	7fefffff 	.word	0x7fefffff
 8005528:	08007afc 	.word	0x08007afc
 800552c:	08007b00 	.word	0x08007b00
 8005530:	08007b04 	.word	0x08007b04
 8005534:	08007b08 	.word	0x08007b08
 8005538:	08007b0c 	.word	0x08007b0c
 800553c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800553e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005542:	4553      	cmp	r3, sl
 8005544:	bfa8      	it	ge
 8005546:	4653      	movge	r3, sl
 8005548:	2b00      	cmp	r3, #0
 800554a:	4699      	mov	r9, r3
 800554c:	dc36      	bgt.n	80055bc <_printf_float+0x360>
 800554e:	f04f 0b00 	mov.w	fp, #0
 8005552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005556:	f104 021a 	add.w	r2, r4, #26
 800555a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800555c:	9306      	str	r3, [sp, #24]
 800555e:	eba3 0309 	sub.w	r3, r3, r9
 8005562:	455b      	cmp	r3, fp
 8005564:	dc31      	bgt.n	80055ca <_printf_float+0x36e>
 8005566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005568:	459a      	cmp	sl, r3
 800556a:	dc3a      	bgt.n	80055e2 <_printf_float+0x386>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	07da      	lsls	r2, r3, #31
 8005570:	d437      	bmi.n	80055e2 <_printf_float+0x386>
 8005572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005574:	ebaa 0903 	sub.w	r9, sl, r3
 8005578:	9b06      	ldr	r3, [sp, #24]
 800557a:	ebaa 0303 	sub.w	r3, sl, r3
 800557e:	4599      	cmp	r9, r3
 8005580:	bfa8      	it	ge
 8005582:	4699      	movge	r9, r3
 8005584:	f1b9 0f00 	cmp.w	r9, #0
 8005588:	dc33      	bgt.n	80055f2 <_printf_float+0x396>
 800558a:	f04f 0800 	mov.w	r8, #0
 800558e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005592:	f104 0b1a 	add.w	fp, r4, #26
 8005596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005598:	ebaa 0303 	sub.w	r3, sl, r3
 800559c:	eba3 0309 	sub.w	r3, r3, r9
 80055a0:	4543      	cmp	r3, r8
 80055a2:	f77f af79 	ble.w	8005498 <_printf_float+0x23c>
 80055a6:	2301      	movs	r3, #1
 80055a8:	465a      	mov	r2, fp
 80055aa:	4631      	mov	r1, r6
 80055ac:	4628      	mov	r0, r5
 80055ae:	47b8      	blx	r7
 80055b0:	3001      	adds	r0, #1
 80055b2:	f43f aeae 	beq.w	8005312 <_printf_float+0xb6>
 80055b6:	f108 0801 	add.w	r8, r8, #1
 80055ba:	e7ec      	b.n	8005596 <_printf_float+0x33a>
 80055bc:	4642      	mov	r2, r8
 80055be:	4631      	mov	r1, r6
 80055c0:	4628      	mov	r0, r5
 80055c2:	47b8      	blx	r7
 80055c4:	3001      	adds	r0, #1
 80055c6:	d1c2      	bne.n	800554e <_printf_float+0x2f2>
 80055c8:	e6a3      	b.n	8005312 <_printf_float+0xb6>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4631      	mov	r1, r6
 80055ce:	4628      	mov	r0, r5
 80055d0:	9206      	str	r2, [sp, #24]
 80055d2:	47b8      	blx	r7
 80055d4:	3001      	adds	r0, #1
 80055d6:	f43f ae9c 	beq.w	8005312 <_printf_float+0xb6>
 80055da:	9a06      	ldr	r2, [sp, #24]
 80055dc:	f10b 0b01 	add.w	fp, fp, #1
 80055e0:	e7bb      	b.n	800555a <_printf_float+0x2fe>
 80055e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	d1c0      	bne.n	8005572 <_printf_float+0x316>
 80055f0:	e68f      	b.n	8005312 <_printf_float+0xb6>
 80055f2:	9a06      	ldr	r2, [sp, #24]
 80055f4:	464b      	mov	r3, r9
 80055f6:	4442      	add	r2, r8
 80055f8:	4631      	mov	r1, r6
 80055fa:	4628      	mov	r0, r5
 80055fc:	47b8      	blx	r7
 80055fe:	3001      	adds	r0, #1
 8005600:	d1c3      	bne.n	800558a <_printf_float+0x32e>
 8005602:	e686      	b.n	8005312 <_printf_float+0xb6>
 8005604:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005608:	f1ba 0f01 	cmp.w	sl, #1
 800560c:	dc01      	bgt.n	8005612 <_printf_float+0x3b6>
 800560e:	07db      	lsls	r3, r3, #31
 8005610:	d536      	bpl.n	8005680 <_printf_float+0x424>
 8005612:	2301      	movs	r3, #1
 8005614:	4642      	mov	r2, r8
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	47b8      	blx	r7
 800561c:	3001      	adds	r0, #1
 800561e:	f43f ae78 	beq.w	8005312 <_printf_float+0xb6>
 8005622:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f ae70 	beq.w	8005312 <_printf_float+0xb6>
 8005632:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005636:	2200      	movs	r2, #0
 8005638:	2300      	movs	r3, #0
 800563a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800563e:	f7fb fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005642:	b9c0      	cbnz	r0, 8005676 <_printf_float+0x41a>
 8005644:	4653      	mov	r3, sl
 8005646:	f108 0201 	add.w	r2, r8, #1
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	d10c      	bne.n	800566e <_printf_float+0x412>
 8005654:	e65d      	b.n	8005312 <_printf_float+0xb6>
 8005656:	2301      	movs	r3, #1
 8005658:	465a      	mov	r2, fp
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	f43f ae56 	beq.w	8005312 <_printf_float+0xb6>
 8005666:	f108 0801 	add.w	r8, r8, #1
 800566a:	45d0      	cmp	r8, sl
 800566c:	dbf3      	blt.n	8005656 <_printf_float+0x3fa>
 800566e:	464b      	mov	r3, r9
 8005670:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005674:	e6df      	b.n	8005436 <_printf_float+0x1da>
 8005676:	f04f 0800 	mov.w	r8, #0
 800567a:	f104 0b1a 	add.w	fp, r4, #26
 800567e:	e7f4      	b.n	800566a <_printf_float+0x40e>
 8005680:	2301      	movs	r3, #1
 8005682:	4642      	mov	r2, r8
 8005684:	e7e1      	b.n	800564a <_printf_float+0x3ee>
 8005686:	2301      	movs	r3, #1
 8005688:	464a      	mov	r2, r9
 800568a:	4631      	mov	r1, r6
 800568c:	4628      	mov	r0, r5
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	f43f ae3e 	beq.w	8005312 <_printf_float+0xb6>
 8005696:	f108 0801 	add.w	r8, r8, #1
 800569a:	68e3      	ldr	r3, [r4, #12]
 800569c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800569e:	1a5b      	subs	r3, r3, r1
 80056a0:	4543      	cmp	r3, r8
 80056a2:	dcf0      	bgt.n	8005686 <_printf_float+0x42a>
 80056a4:	e6fc      	b.n	80054a0 <_printf_float+0x244>
 80056a6:	f04f 0800 	mov.w	r8, #0
 80056aa:	f104 0919 	add.w	r9, r4, #25
 80056ae:	e7f4      	b.n	800569a <_printf_float+0x43e>

080056b0 <_printf_common>:
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056b4:	4616      	mov	r6, r2
 80056b6:	4698      	mov	r8, r3
 80056b8:	688a      	ldr	r2, [r1, #8]
 80056ba:	690b      	ldr	r3, [r1, #16]
 80056bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	bfb8      	it	lt
 80056c4:	4613      	movlt	r3, r2
 80056c6:	6033      	str	r3, [r6, #0]
 80056c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056cc:	4607      	mov	r7, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	b10a      	cbz	r2, 80056d6 <_printf_common+0x26>
 80056d2:	3301      	adds	r3, #1
 80056d4:	6033      	str	r3, [r6, #0]
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	0699      	lsls	r1, r3, #26
 80056da:	bf42      	ittt	mi
 80056dc:	6833      	ldrmi	r3, [r6, #0]
 80056de:	3302      	addmi	r3, #2
 80056e0:	6033      	strmi	r3, [r6, #0]
 80056e2:	6825      	ldr	r5, [r4, #0]
 80056e4:	f015 0506 	ands.w	r5, r5, #6
 80056e8:	d106      	bne.n	80056f8 <_printf_common+0x48>
 80056ea:	f104 0a19 	add.w	sl, r4, #25
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	6832      	ldr	r2, [r6, #0]
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc26      	bgt.n	8005746 <_printf_common+0x96>
 80056f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056fc:	6822      	ldr	r2, [r4, #0]
 80056fe:	3b00      	subs	r3, #0
 8005700:	bf18      	it	ne
 8005702:	2301      	movne	r3, #1
 8005704:	0692      	lsls	r2, r2, #26
 8005706:	d42b      	bmi.n	8005760 <_printf_common+0xb0>
 8005708:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800570c:	4641      	mov	r1, r8
 800570e:	4638      	mov	r0, r7
 8005710:	47c8      	blx	r9
 8005712:	3001      	adds	r0, #1
 8005714:	d01e      	beq.n	8005754 <_printf_common+0xa4>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	6922      	ldr	r2, [r4, #16]
 800571a:	f003 0306 	and.w	r3, r3, #6
 800571e:	2b04      	cmp	r3, #4
 8005720:	bf02      	ittt	eq
 8005722:	68e5      	ldreq	r5, [r4, #12]
 8005724:	6833      	ldreq	r3, [r6, #0]
 8005726:	1aed      	subeq	r5, r5, r3
 8005728:	68a3      	ldr	r3, [r4, #8]
 800572a:	bf0c      	ite	eq
 800572c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005730:	2500      	movne	r5, #0
 8005732:	4293      	cmp	r3, r2
 8005734:	bfc4      	itt	gt
 8005736:	1a9b      	subgt	r3, r3, r2
 8005738:	18ed      	addgt	r5, r5, r3
 800573a:	2600      	movs	r6, #0
 800573c:	341a      	adds	r4, #26
 800573e:	42b5      	cmp	r5, r6
 8005740:	d11a      	bne.n	8005778 <_printf_common+0xc8>
 8005742:	2000      	movs	r0, #0
 8005744:	e008      	b.n	8005758 <_printf_common+0xa8>
 8005746:	2301      	movs	r3, #1
 8005748:	4652      	mov	r2, sl
 800574a:	4641      	mov	r1, r8
 800574c:	4638      	mov	r0, r7
 800574e:	47c8      	blx	r9
 8005750:	3001      	adds	r0, #1
 8005752:	d103      	bne.n	800575c <_printf_common+0xac>
 8005754:	f04f 30ff 	mov.w	r0, #4294967295
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800575c:	3501      	adds	r5, #1
 800575e:	e7c6      	b.n	80056ee <_printf_common+0x3e>
 8005760:	18e1      	adds	r1, r4, r3
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	2030      	movs	r0, #48	@ 0x30
 8005766:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800576a:	4422      	add	r2, r4
 800576c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005770:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005774:	3302      	adds	r3, #2
 8005776:	e7c7      	b.n	8005708 <_printf_common+0x58>
 8005778:	2301      	movs	r3, #1
 800577a:	4622      	mov	r2, r4
 800577c:	4641      	mov	r1, r8
 800577e:	4638      	mov	r0, r7
 8005780:	47c8      	blx	r9
 8005782:	3001      	adds	r0, #1
 8005784:	d0e6      	beq.n	8005754 <_printf_common+0xa4>
 8005786:	3601      	adds	r6, #1
 8005788:	e7d9      	b.n	800573e <_printf_common+0x8e>
	...

0800578c <_printf_i>:
 800578c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	7e0f      	ldrb	r7, [r1, #24]
 8005792:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005794:	2f78      	cmp	r7, #120	@ 0x78
 8005796:	4691      	mov	r9, r2
 8005798:	4680      	mov	r8, r0
 800579a:	460c      	mov	r4, r1
 800579c:	469a      	mov	sl, r3
 800579e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057a2:	d807      	bhi.n	80057b4 <_printf_i+0x28>
 80057a4:	2f62      	cmp	r7, #98	@ 0x62
 80057a6:	d80a      	bhi.n	80057be <_printf_i+0x32>
 80057a8:	2f00      	cmp	r7, #0
 80057aa:	f000 80d2 	beq.w	8005952 <_printf_i+0x1c6>
 80057ae:	2f58      	cmp	r7, #88	@ 0x58
 80057b0:	f000 80b9 	beq.w	8005926 <_printf_i+0x19a>
 80057b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057bc:	e03a      	b.n	8005834 <_printf_i+0xa8>
 80057be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057c2:	2b15      	cmp	r3, #21
 80057c4:	d8f6      	bhi.n	80057b4 <_printf_i+0x28>
 80057c6:	a101      	add	r1, pc, #4	@ (adr r1, 80057cc <_printf_i+0x40>)
 80057c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057cc:	08005825 	.word	0x08005825
 80057d0:	08005839 	.word	0x08005839
 80057d4:	080057b5 	.word	0x080057b5
 80057d8:	080057b5 	.word	0x080057b5
 80057dc:	080057b5 	.word	0x080057b5
 80057e0:	080057b5 	.word	0x080057b5
 80057e4:	08005839 	.word	0x08005839
 80057e8:	080057b5 	.word	0x080057b5
 80057ec:	080057b5 	.word	0x080057b5
 80057f0:	080057b5 	.word	0x080057b5
 80057f4:	080057b5 	.word	0x080057b5
 80057f8:	08005939 	.word	0x08005939
 80057fc:	08005863 	.word	0x08005863
 8005800:	080058f3 	.word	0x080058f3
 8005804:	080057b5 	.word	0x080057b5
 8005808:	080057b5 	.word	0x080057b5
 800580c:	0800595b 	.word	0x0800595b
 8005810:	080057b5 	.word	0x080057b5
 8005814:	08005863 	.word	0x08005863
 8005818:	080057b5 	.word	0x080057b5
 800581c:	080057b5 	.word	0x080057b5
 8005820:	080058fb 	.word	0x080058fb
 8005824:	6833      	ldr	r3, [r6, #0]
 8005826:	1d1a      	adds	r2, r3, #4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6032      	str	r2, [r6, #0]
 800582c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005834:	2301      	movs	r3, #1
 8005836:	e09d      	b.n	8005974 <_printf_i+0x1e8>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	1d19      	adds	r1, r3, #4
 800583e:	6031      	str	r1, [r6, #0]
 8005840:	0606      	lsls	r6, r0, #24
 8005842:	d501      	bpl.n	8005848 <_printf_i+0xbc>
 8005844:	681d      	ldr	r5, [r3, #0]
 8005846:	e003      	b.n	8005850 <_printf_i+0xc4>
 8005848:	0645      	lsls	r5, r0, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0xb8>
 800584c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005850:	2d00      	cmp	r5, #0
 8005852:	da03      	bge.n	800585c <_printf_i+0xd0>
 8005854:	232d      	movs	r3, #45	@ 0x2d
 8005856:	426d      	negs	r5, r5
 8005858:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800585c:	4859      	ldr	r0, [pc, #356]	@ (80059c4 <_printf_i+0x238>)
 800585e:	230a      	movs	r3, #10
 8005860:	e011      	b.n	8005886 <_printf_i+0xfa>
 8005862:	6821      	ldr	r1, [r4, #0]
 8005864:	6833      	ldr	r3, [r6, #0]
 8005866:	0608      	lsls	r0, r1, #24
 8005868:	f853 5b04 	ldr.w	r5, [r3], #4
 800586c:	d402      	bmi.n	8005874 <_printf_i+0xe8>
 800586e:	0649      	lsls	r1, r1, #25
 8005870:	bf48      	it	mi
 8005872:	b2ad      	uxthmi	r5, r5
 8005874:	2f6f      	cmp	r7, #111	@ 0x6f
 8005876:	4853      	ldr	r0, [pc, #332]	@ (80059c4 <_printf_i+0x238>)
 8005878:	6033      	str	r3, [r6, #0]
 800587a:	bf14      	ite	ne
 800587c:	230a      	movne	r3, #10
 800587e:	2308      	moveq	r3, #8
 8005880:	2100      	movs	r1, #0
 8005882:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005886:	6866      	ldr	r6, [r4, #4]
 8005888:	60a6      	str	r6, [r4, #8]
 800588a:	2e00      	cmp	r6, #0
 800588c:	bfa2      	ittt	ge
 800588e:	6821      	ldrge	r1, [r4, #0]
 8005890:	f021 0104 	bicge.w	r1, r1, #4
 8005894:	6021      	strge	r1, [r4, #0]
 8005896:	b90d      	cbnz	r5, 800589c <_printf_i+0x110>
 8005898:	2e00      	cmp	r6, #0
 800589a:	d04b      	beq.n	8005934 <_printf_i+0x1a8>
 800589c:	4616      	mov	r6, r2
 800589e:	fbb5 f1f3 	udiv	r1, r5, r3
 80058a2:	fb03 5711 	mls	r7, r3, r1, r5
 80058a6:	5dc7      	ldrb	r7, [r0, r7]
 80058a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ac:	462f      	mov	r7, r5
 80058ae:	42bb      	cmp	r3, r7
 80058b0:	460d      	mov	r5, r1
 80058b2:	d9f4      	bls.n	800589e <_printf_i+0x112>
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d10b      	bne.n	80058d0 <_printf_i+0x144>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07df      	lsls	r7, r3, #31
 80058bc:	d508      	bpl.n	80058d0 <_printf_i+0x144>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	6861      	ldr	r1, [r4, #4]
 80058c2:	4299      	cmp	r1, r3
 80058c4:	bfde      	ittt	le
 80058c6:	2330      	movle	r3, #48	@ 0x30
 80058c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058d0:	1b92      	subs	r2, r2, r6
 80058d2:	6122      	str	r2, [r4, #16]
 80058d4:	f8cd a000 	str.w	sl, [sp]
 80058d8:	464b      	mov	r3, r9
 80058da:	aa03      	add	r2, sp, #12
 80058dc:	4621      	mov	r1, r4
 80058de:	4640      	mov	r0, r8
 80058e0:	f7ff fee6 	bl	80056b0 <_printf_common>
 80058e4:	3001      	adds	r0, #1
 80058e6:	d14a      	bne.n	800597e <_printf_i+0x1f2>
 80058e8:	f04f 30ff 	mov.w	r0, #4294967295
 80058ec:	b004      	add	sp, #16
 80058ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	4833      	ldr	r0, [pc, #204]	@ (80059c8 <_printf_i+0x23c>)
 80058fc:	2778      	movs	r7, #120	@ 0x78
 80058fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005902:	6823      	ldr	r3, [r4, #0]
 8005904:	6831      	ldr	r1, [r6, #0]
 8005906:	061f      	lsls	r7, r3, #24
 8005908:	f851 5b04 	ldr.w	r5, [r1], #4
 800590c:	d402      	bmi.n	8005914 <_printf_i+0x188>
 800590e:	065f      	lsls	r7, r3, #25
 8005910:	bf48      	it	mi
 8005912:	b2ad      	uxthmi	r5, r5
 8005914:	6031      	str	r1, [r6, #0]
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	bf44      	itt	mi
 800591a:	f043 0320 	orrmi.w	r3, r3, #32
 800591e:	6023      	strmi	r3, [r4, #0]
 8005920:	b11d      	cbz	r5, 800592a <_printf_i+0x19e>
 8005922:	2310      	movs	r3, #16
 8005924:	e7ac      	b.n	8005880 <_printf_i+0xf4>
 8005926:	4827      	ldr	r0, [pc, #156]	@ (80059c4 <_printf_i+0x238>)
 8005928:	e7e9      	b.n	80058fe <_printf_i+0x172>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	f023 0320 	bic.w	r3, r3, #32
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	e7f6      	b.n	8005922 <_printf_i+0x196>
 8005934:	4616      	mov	r6, r2
 8005936:	e7bd      	b.n	80058b4 <_printf_i+0x128>
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	6825      	ldr	r5, [r4, #0]
 800593c:	6961      	ldr	r1, [r4, #20]
 800593e:	1d18      	adds	r0, r3, #4
 8005940:	6030      	str	r0, [r6, #0]
 8005942:	062e      	lsls	r6, r5, #24
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	d501      	bpl.n	800594c <_printf_i+0x1c0>
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	e002      	b.n	8005952 <_printf_i+0x1c6>
 800594c:	0668      	lsls	r0, r5, #25
 800594e:	d5fb      	bpl.n	8005948 <_printf_i+0x1bc>
 8005950:	8019      	strh	r1, [r3, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	4616      	mov	r6, r2
 8005958:	e7bc      	b.n	80058d4 <_printf_i+0x148>
 800595a:	6833      	ldr	r3, [r6, #0]
 800595c:	1d1a      	adds	r2, r3, #4
 800595e:	6032      	str	r2, [r6, #0]
 8005960:	681e      	ldr	r6, [r3, #0]
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	2100      	movs	r1, #0
 8005966:	4630      	mov	r0, r6
 8005968:	f7fa fc3a 	bl	80001e0 <memchr>
 800596c:	b108      	cbz	r0, 8005972 <_printf_i+0x1e6>
 800596e:	1b80      	subs	r0, r0, r6
 8005970:	6060      	str	r0, [r4, #4]
 8005972:	6863      	ldr	r3, [r4, #4]
 8005974:	6123      	str	r3, [r4, #16]
 8005976:	2300      	movs	r3, #0
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800597c:	e7aa      	b.n	80058d4 <_printf_i+0x148>
 800597e:	6923      	ldr	r3, [r4, #16]
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4640      	mov	r0, r8
 8005986:	47d0      	blx	sl
 8005988:	3001      	adds	r0, #1
 800598a:	d0ad      	beq.n	80058e8 <_printf_i+0x15c>
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	079b      	lsls	r3, r3, #30
 8005990:	d413      	bmi.n	80059ba <_printf_i+0x22e>
 8005992:	68e0      	ldr	r0, [r4, #12]
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	4298      	cmp	r0, r3
 8005998:	bfb8      	it	lt
 800599a:	4618      	movlt	r0, r3
 800599c:	e7a6      	b.n	80058ec <_printf_i+0x160>
 800599e:	2301      	movs	r3, #1
 80059a0:	4632      	mov	r2, r6
 80059a2:	4649      	mov	r1, r9
 80059a4:	4640      	mov	r0, r8
 80059a6:	47d0      	blx	sl
 80059a8:	3001      	adds	r0, #1
 80059aa:	d09d      	beq.n	80058e8 <_printf_i+0x15c>
 80059ac:	3501      	adds	r5, #1
 80059ae:	68e3      	ldr	r3, [r4, #12]
 80059b0:	9903      	ldr	r1, [sp, #12]
 80059b2:	1a5b      	subs	r3, r3, r1
 80059b4:	42ab      	cmp	r3, r5
 80059b6:	dcf2      	bgt.n	800599e <_printf_i+0x212>
 80059b8:	e7eb      	b.n	8005992 <_printf_i+0x206>
 80059ba:	2500      	movs	r5, #0
 80059bc:	f104 0619 	add.w	r6, r4, #25
 80059c0:	e7f5      	b.n	80059ae <_printf_i+0x222>
 80059c2:	bf00      	nop
 80059c4:	08007b0e 	.word	0x08007b0e
 80059c8:	08007b1f 	.word	0x08007b1f

080059cc <std>:
 80059cc:	2300      	movs	r3, #0
 80059ce:	b510      	push	{r4, lr}
 80059d0:	4604      	mov	r4, r0
 80059d2:	e9c0 3300 	strd	r3, r3, [r0]
 80059d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059da:	6083      	str	r3, [r0, #8]
 80059dc:	8181      	strh	r1, [r0, #12]
 80059de:	6643      	str	r3, [r0, #100]	@ 0x64
 80059e0:	81c2      	strh	r2, [r0, #14]
 80059e2:	6183      	str	r3, [r0, #24]
 80059e4:	4619      	mov	r1, r3
 80059e6:	2208      	movs	r2, #8
 80059e8:	305c      	adds	r0, #92	@ 0x5c
 80059ea:	f000 f918 	bl	8005c1e <memset>
 80059ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005a24 <std+0x58>)
 80059f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80059f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a28 <std+0x5c>)
 80059f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059f6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a2c <std+0x60>)
 80059f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005a30 <std+0x64>)
 80059fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80059fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <std+0x68>)
 8005a00:	6224      	str	r4, [r4, #32]
 8005a02:	429c      	cmp	r4, r3
 8005a04:	d006      	beq.n	8005a14 <std+0x48>
 8005a06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a0a:	4294      	cmp	r4, r2
 8005a0c:	d002      	beq.n	8005a14 <std+0x48>
 8005a0e:	33d0      	adds	r3, #208	@ 0xd0
 8005a10:	429c      	cmp	r4, r3
 8005a12:	d105      	bne.n	8005a20 <std+0x54>
 8005a14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a1c:	f000 b97c 	b.w	8005d18 <__retarget_lock_init_recursive>
 8005a20:	bd10      	pop	{r4, pc}
 8005a22:	bf00      	nop
 8005a24:	08005b99 	.word	0x08005b99
 8005a28:	08005bbb 	.word	0x08005bbb
 8005a2c:	08005bf3 	.word	0x08005bf3
 8005a30:	08005c17 	.word	0x08005c17
 8005a34:	2000029c 	.word	0x2000029c

08005a38 <stdio_exit_handler>:
 8005a38:	4a02      	ldr	r2, [pc, #8]	@ (8005a44 <stdio_exit_handler+0xc>)
 8005a3a:	4903      	ldr	r1, [pc, #12]	@ (8005a48 <stdio_exit_handler+0x10>)
 8005a3c:	4803      	ldr	r0, [pc, #12]	@ (8005a4c <stdio_exit_handler+0x14>)
 8005a3e:	f000 b87b 	b.w	8005b38 <_fwalk_sglue>
 8005a42:	bf00      	nop
 8005a44:	20000014 	.word	0x20000014
 8005a48:	08007659 	.word	0x08007659
 8005a4c:	20000024 	.word	0x20000024

08005a50 <cleanup_stdio>:
 8005a50:	6841      	ldr	r1, [r0, #4]
 8005a52:	4b0c      	ldr	r3, [pc, #48]	@ (8005a84 <cleanup_stdio+0x34>)
 8005a54:	4299      	cmp	r1, r3
 8005a56:	b510      	push	{r4, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	d001      	beq.n	8005a60 <cleanup_stdio+0x10>
 8005a5c:	f001 fdfc 	bl	8007658 <_fflush_r>
 8005a60:	68a1      	ldr	r1, [r4, #8]
 8005a62:	4b09      	ldr	r3, [pc, #36]	@ (8005a88 <cleanup_stdio+0x38>)
 8005a64:	4299      	cmp	r1, r3
 8005a66:	d002      	beq.n	8005a6e <cleanup_stdio+0x1e>
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f001 fdf5 	bl	8007658 <_fflush_r>
 8005a6e:	68e1      	ldr	r1, [r4, #12]
 8005a70:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <cleanup_stdio+0x3c>)
 8005a72:	4299      	cmp	r1, r3
 8005a74:	d004      	beq.n	8005a80 <cleanup_stdio+0x30>
 8005a76:	4620      	mov	r0, r4
 8005a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a7c:	f001 bdec 	b.w	8007658 <_fflush_r>
 8005a80:	bd10      	pop	{r4, pc}
 8005a82:	bf00      	nop
 8005a84:	2000029c 	.word	0x2000029c
 8005a88:	20000304 	.word	0x20000304
 8005a8c:	2000036c 	.word	0x2000036c

08005a90 <global_stdio_init.part.0>:
 8005a90:	b510      	push	{r4, lr}
 8005a92:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac0 <global_stdio_init.part.0+0x30>)
 8005a94:	4c0b      	ldr	r4, [pc, #44]	@ (8005ac4 <global_stdio_init.part.0+0x34>)
 8005a96:	4a0c      	ldr	r2, [pc, #48]	@ (8005ac8 <global_stdio_init.part.0+0x38>)
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	f7ff ff94 	bl	80059cc <std>
 8005aa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	2109      	movs	r1, #9
 8005aac:	f7ff ff8e 	bl	80059cc <std>
 8005ab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aba:	2112      	movs	r1, #18
 8005abc:	f7ff bf86 	b.w	80059cc <std>
 8005ac0:	200003d4 	.word	0x200003d4
 8005ac4:	2000029c 	.word	0x2000029c
 8005ac8:	08005a39 	.word	0x08005a39

08005acc <__sfp_lock_acquire>:
 8005acc:	4801      	ldr	r0, [pc, #4]	@ (8005ad4 <__sfp_lock_acquire+0x8>)
 8005ace:	f000 b924 	b.w	8005d1a <__retarget_lock_acquire_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	200003dd 	.word	0x200003dd

08005ad8 <__sfp_lock_release>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	@ (8005ae0 <__sfp_lock_release+0x8>)
 8005ada:	f000 b91f 	b.w	8005d1c <__retarget_lock_release_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200003dd 	.word	0x200003dd

08005ae4 <__sinit>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	f7ff fff0 	bl	8005acc <__sfp_lock_acquire>
 8005aec:	6a23      	ldr	r3, [r4, #32]
 8005aee:	b11b      	cbz	r3, 8005af8 <__sinit+0x14>
 8005af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af4:	f7ff bff0 	b.w	8005ad8 <__sfp_lock_release>
 8005af8:	4b04      	ldr	r3, [pc, #16]	@ (8005b0c <__sinit+0x28>)
 8005afa:	6223      	str	r3, [r4, #32]
 8005afc:	4b04      	ldr	r3, [pc, #16]	@ (8005b10 <__sinit+0x2c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f5      	bne.n	8005af0 <__sinit+0xc>
 8005b04:	f7ff ffc4 	bl	8005a90 <global_stdio_init.part.0>
 8005b08:	e7f2      	b.n	8005af0 <__sinit+0xc>
 8005b0a:	bf00      	nop
 8005b0c:	08005a51 	.word	0x08005a51
 8005b10:	200003d4 	.word	0x200003d4

08005b14 <fiprintf>:
 8005b14:	b40e      	push	{r1, r2, r3}
 8005b16:	b503      	push	{r0, r1, lr}
 8005b18:	4601      	mov	r1, r0
 8005b1a:	ab03      	add	r3, sp, #12
 8005b1c:	4805      	ldr	r0, [pc, #20]	@ (8005b34 <fiprintf+0x20>)
 8005b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b22:	6800      	ldr	r0, [r0, #0]
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	f001 fbfb 	bl	8007320 <_vfiprintf_r>
 8005b2a:	b002      	add	sp, #8
 8005b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b30:	b003      	add	sp, #12
 8005b32:	4770      	bx	lr
 8005b34:	20000020 	.word	0x20000020

08005b38 <_fwalk_sglue>:
 8005b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	4688      	mov	r8, r1
 8005b40:	4614      	mov	r4, r2
 8005b42:	2600      	movs	r6, #0
 8005b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b48:	f1b9 0901 	subs.w	r9, r9, #1
 8005b4c:	d505      	bpl.n	8005b5a <_fwalk_sglue+0x22>
 8005b4e:	6824      	ldr	r4, [r4, #0]
 8005b50:	2c00      	cmp	r4, #0
 8005b52:	d1f7      	bne.n	8005b44 <_fwalk_sglue+0xc>
 8005b54:	4630      	mov	r0, r6
 8005b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	89ab      	ldrh	r3, [r5, #12]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d907      	bls.n	8005b70 <_fwalk_sglue+0x38>
 8005b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b64:	3301      	adds	r3, #1
 8005b66:	d003      	beq.n	8005b70 <_fwalk_sglue+0x38>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	4306      	orrs	r6, r0
 8005b70:	3568      	adds	r5, #104	@ 0x68
 8005b72:	e7e9      	b.n	8005b48 <_fwalk_sglue+0x10>

08005b74 <iprintf>:
 8005b74:	b40f      	push	{r0, r1, r2, r3}
 8005b76:	b507      	push	{r0, r1, r2, lr}
 8005b78:	4906      	ldr	r1, [pc, #24]	@ (8005b94 <iprintf+0x20>)
 8005b7a:	ab04      	add	r3, sp, #16
 8005b7c:	6808      	ldr	r0, [r1, #0]
 8005b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b82:	6881      	ldr	r1, [r0, #8]
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	f001 fbcb 	bl	8007320 <_vfiprintf_r>
 8005b8a:	b003      	add	sp, #12
 8005b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b90:	b004      	add	sp, #16
 8005b92:	4770      	bx	lr
 8005b94:	20000020 	.word	0x20000020

08005b98 <__sread>:
 8005b98:	b510      	push	{r4, lr}
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba0:	f000 f86c 	bl	8005c7c <_read_r>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	bfab      	itete	ge
 8005ba8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005baa:	89a3      	ldrhlt	r3, [r4, #12]
 8005bac:	181b      	addge	r3, r3, r0
 8005bae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bb2:	bfac      	ite	ge
 8005bb4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bb6:	81a3      	strhlt	r3, [r4, #12]
 8005bb8:	bd10      	pop	{r4, pc}

08005bba <__swrite>:
 8005bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bbe:	461f      	mov	r7, r3
 8005bc0:	898b      	ldrh	r3, [r1, #12]
 8005bc2:	05db      	lsls	r3, r3, #23
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	4616      	mov	r6, r2
 8005bca:	d505      	bpl.n	8005bd8 <__swrite+0x1e>
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f000 f840 	bl	8005c58 <_lseek_r>
 8005bd8:	89a3      	ldrh	r3, [r4, #12]
 8005bda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005be2:	81a3      	strh	r3, [r4, #12]
 8005be4:	4632      	mov	r2, r6
 8005be6:	463b      	mov	r3, r7
 8005be8:	4628      	mov	r0, r5
 8005bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bee:	f000 b857 	b.w	8005ca0 <_write_r>

08005bf2 <__sseek>:
 8005bf2:	b510      	push	{r4, lr}
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfa:	f000 f82d 	bl	8005c58 <_lseek_r>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	bf15      	itete	ne
 8005c04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c0e:	81a3      	strheq	r3, [r4, #12]
 8005c10:	bf18      	it	ne
 8005c12:	81a3      	strhne	r3, [r4, #12]
 8005c14:	bd10      	pop	{r4, pc}

08005c16 <__sclose>:
 8005c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c1a:	f000 b80d 	b.w	8005c38 <_close_r>

08005c1e <memset>:
 8005c1e:	4402      	add	r2, r0
 8005c20:	4603      	mov	r3, r0
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d100      	bne.n	8005c28 <memset+0xa>
 8005c26:	4770      	bx	lr
 8005c28:	f803 1b01 	strb.w	r1, [r3], #1
 8005c2c:	e7f9      	b.n	8005c22 <memset+0x4>
	...

08005c30 <_localeconv_r>:
 8005c30:	4800      	ldr	r0, [pc, #0]	@ (8005c34 <_localeconv_r+0x4>)
 8005c32:	4770      	bx	lr
 8005c34:	20000160 	.word	0x20000160

08005c38 <_close_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4d06      	ldr	r5, [pc, #24]	@ (8005c54 <_close_r+0x1c>)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	4604      	mov	r4, r0
 8005c40:	4608      	mov	r0, r1
 8005c42:	602b      	str	r3, [r5, #0]
 8005c44:	f7fb fc1c 	bl	8001480 <_close>
 8005c48:	1c43      	adds	r3, r0, #1
 8005c4a:	d102      	bne.n	8005c52 <_close_r+0x1a>
 8005c4c:	682b      	ldr	r3, [r5, #0]
 8005c4e:	b103      	cbz	r3, 8005c52 <_close_r+0x1a>
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	bd38      	pop	{r3, r4, r5, pc}
 8005c54:	200003d8 	.word	0x200003d8

08005c58 <_lseek_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	4d07      	ldr	r5, [pc, #28]	@ (8005c78 <_lseek_r+0x20>)
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	4608      	mov	r0, r1
 8005c60:	4611      	mov	r1, r2
 8005c62:	2200      	movs	r2, #0
 8005c64:	602a      	str	r2, [r5, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f7fb fc31 	bl	80014ce <_lseek>
 8005c6c:	1c43      	adds	r3, r0, #1
 8005c6e:	d102      	bne.n	8005c76 <_lseek_r+0x1e>
 8005c70:	682b      	ldr	r3, [r5, #0]
 8005c72:	b103      	cbz	r3, 8005c76 <_lseek_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd38      	pop	{r3, r4, r5, pc}
 8005c78:	200003d8 	.word	0x200003d8

08005c7c <_read_r>:
 8005c7c:	b538      	push	{r3, r4, r5, lr}
 8005c7e:	4d07      	ldr	r5, [pc, #28]	@ (8005c9c <_read_r+0x20>)
 8005c80:	4604      	mov	r4, r0
 8005c82:	4608      	mov	r0, r1
 8005c84:	4611      	mov	r1, r2
 8005c86:	2200      	movs	r2, #0
 8005c88:	602a      	str	r2, [r5, #0]
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	f7fb fbbf 	bl	800140e <_read>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_read_r+0x1e>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_read_r+0x1e>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	200003d8 	.word	0x200003d8

08005ca0 <_write_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4d07      	ldr	r5, [pc, #28]	@ (8005cc0 <_write_r+0x20>)
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	4608      	mov	r0, r1
 8005ca8:	4611      	mov	r1, r2
 8005caa:	2200      	movs	r2, #0
 8005cac:	602a      	str	r2, [r5, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	f7fb fbca 	bl	8001448 <_write>
 8005cb4:	1c43      	adds	r3, r0, #1
 8005cb6:	d102      	bne.n	8005cbe <_write_r+0x1e>
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	b103      	cbz	r3, 8005cbe <_write_r+0x1e>
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	bd38      	pop	{r3, r4, r5, pc}
 8005cc0:	200003d8 	.word	0x200003d8

08005cc4 <__errno>:
 8005cc4:	4b01      	ldr	r3, [pc, #4]	@ (8005ccc <__errno+0x8>)
 8005cc6:	6818      	ldr	r0, [r3, #0]
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000020 	.word	0x20000020

08005cd0 <__libc_init_array>:
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005d08 <__libc_init_array+0x38>)
 8005cd4:	4c0d      	ldr	r4, [pc, #52]	@ (8005d0c <__libc_init_array+0x3c>)
 8005cd6:	1b64      	subs	r4, r4, r5
 8005cd8:	10a4      	asrs	r4, r4, #2
 8005cda:	2600      	movs	r6, #0
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	d109      	bne.n	8005cf4 <__libc_init_array+0x24>
 8005ce0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d10 <__libc_init_array+0x40>)
 8005ce2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d14 <__libc_init_array+0x44>)
 8005ce4:	f001 fe8e 	bl	8007a04 <_init>
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	2600      	movs	r6, #0
 8005cee:	42a6      	cmp	r6, r4
 8005cf0:	d105      	bne.n	8005cfe <__libc_init_array+0x2e>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf8:	4798      	blx	r3
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7ee      	b.n	8005cdc <__libc_init_array+0xc>
 8005cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d02:	4798      	blx	r3
 8005d04:	3601      	adds	r6, #1
 8005d06:	e7f2      	b.n	8005cee <__libc_init_array+0x1e>
 8005d08:	08007e3c 	.word	0x08007e3c
 8005d0c:	08007e3c 	.word	0x08007e3c
 8005d10:	08007e3c 	.word	0x08007e3c
 8005d14:	08007e40 	.word	0x08007e40

08005d18 <__retarget_lock_init_recursive>:
 8005d18:	4770      	bx	lr

08005d1a <__retarget_lock_acquire_recursive>:
 8005d1a:	4770      	bx	lr

08005d1c <__retarget_lock_release_recursive>:
 8005d1c:	4770      	bx	lr

08005d1e <abort>:
 8005d1e:	b508      	push	{r3, lr}
 8005d20:	2006      	movs	r0, #6
 8005d22:	f001 fd7d 	bl	8007820 <raise>
 8005d26:	2001      	movs	r0, #1
 8005d28:	f7fb fb66 	bl	80013f8 <_exit>

08005d2c <quorem>:
 8005d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	6903      	ldr	r3, [r0, #16]
 8005d32:	690c      	ldr	r4, [r1, #16]
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	4607      	mov	r7, r0
 8005d38:	db7e      	blt.n	8005e38 <quorem+0x10c>
 8005d3a:	3c01      	subs	r4, #1
 8005d3c:	f101 0814 	add.w	r8, r1, #20
 8005d40:	00a3      	lsls	r3, r4, #2
 8005d42:	f100 0514 	add.w	r5, r0, #20
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d56:	3301      	adds	r3, #1
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d62:	d32e      	bcc.n	8005dc2 <quorem+0x96>
 8005d64:	f04f 0a00 	mov.w	sl, #0
 8005d68:	46c4      	mov	ip, r8
 8005d6a:	46ae      	mov	lr, r5
 8005d6c:	46d3      	mov	fp, sl
 8005d6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d72:	b298      	uxth	r0, r3
 8005d74:	fb06 a000 	mla	r0, r6, r0, sl
 8005d78:	0c02      	lsrs	r2, r0, #16
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	fb06 2303 	mla	r3, r6, r3, r2
 8005d80:	f8de 2000 	ldr.w	r2, [lr]
 8005d84:	b280      	uxth	r0, r0
 8005d86:	b292      	uxth	r2, r2
 8005d88:	1a12      	subs	r2, r2, r0
 8005d8a:	445a      	add	r2, fp
 8005d8c:	f8de 0000 	ldr.w	r0, [lr]
 8005d90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005da4:	45e1      	cmp	r9, ip
 8005da6:	f84e 2b04 	str.w	r2, [lr], #4
 8005daa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dae:	d2de      	bcs.n	8005d6e <quorem+0x42>
 8005db0:	9b00      	ldr	r3, [sp, #0]
 8005db2:	58eb      	ldr	r3, [r5, r3]
 8005db4:	b92b      	cbnz	r3, 8005dc2 <quorem+0x96>
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	3b04      	subs	r3, #4
 8005dba:	429d      	cmp	r5, r3
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	d32f      	bcc.n	8005e20 <quorem+0xf4>
 8005dc0:	613c      	str	r4, [r7, #16]
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	f001 f97a 	bl	80070bc <__mcmp>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	db25      	blt.n	8005e18 <quorem+0xec>
 8005dcc:	4629      	mov	r1, r5
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dd4:	f8d1 c000 	ldr.w	ip, [r1]
 8005dd8:	fa1f fe82 	uxth.w	lr, r2
 8005ddc:	fa1f f38c 	uxth.w	r3, ip
 8005de0:	eba3 030e 	sub.w	r3, r3, lr
 8005de4:	4403      	add	r3, r0
 8005de6:	0c12      	lsrs	r2, r2, #16
 8005de8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005dec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005df6:	45c1      	cmp	r9, r8
 8005df8:	f841 3b04 	str.w	r3, [r1], #4
 8005dfc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e00:	d2e6      	bcs.n	8005dd0 <quorem+0xa4>
 8005e02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e0a:	b922      	cbnz	r2, 8005e16 <quorem+0xea>
 8005e0c:	3b04      	subs	r3, #4
 8005e0e:	429d      	cmp	r5, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	d30b      	bcc.n	8005e2c <quorem+0x100>
 8005e14:	613c      	str	r4, [r7, #16]
 8005e16:	3601      	adds	r6, #1
 8005e18:	4630      	mov	r0, r6
 8005e1a:	b003      	add	sp, #12
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	3b04      	subs	r3, #4
 8005e24:	2a00      	cmp	r2, #0
 8005e26:	d1cb      	bne.n	8005dc0 <quorem+0x94>
 8005e28:	3c01      	subs	r4, #1
 8005e2a:	e7c6      	b.n	8005dba <quorem+0x8e>
 8005e2c:	6812      	ldr	r2, [r2, #0]
 8005e2e:	3b04      	subs	r3, #4
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	d1ef      	bne.n	8005e14 <quorem+0xe8>
 8005e34:	3c01      	subs	r4, #1
 8005e36:	e7ea      	b.n	8005e0e <quorem+0xe2>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	e7ee      	b.n	8005e1a <quorem+0xee>
 8005e3c:	0000      	movs	r0, r0
	...

08005e40 <_dtoa_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	69c7      	ldr	r7, [r0, #28]
 8005e46:	b099      	sub	sp, #100	@ 0x64
 8005e48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e4c:	ec55 4b10 	vmov	r4, r5, d0
 8005e50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e52:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e54:	4683      	mov	fp, r0
 8005e56:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e5a:	b97f      	cbnz	r7, 8005e7c <_dtoa_r+0x3c>
 8005e5c:	2010      	movs	r0, #16
 8005e5e:	f000 fdfd 	bl	8006a5c <malloc>
 8005e62:	4602      	mov	r2, r0
 8005e64:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e68:	b920      	cbnz	r0, 8005e74 <_dtoa_r+0x34>
 8005e6a:	4ba7      	ldr	r3, [pc, #668]	@ (8006108 <_dtoa_r+0x2c8>)
 8005e6c:	21ef      	movs	r1, #239	@ 0xef
 8005e6e:	48a7      	ldr	r0, [pc, #668]	@ (800610c <_dtoa_r+0x2cc>)
 8005e70:	f7ff f936 	bl	80050e0 <__assert_func>
 8005e74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e78:	6007      	str	r7, [r0, #0]
 8005e7a:	60c7      	str	r7, [r0, #12]
 8005e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e80:	6819      	ldr	r1, [r3, #0]
 8005e82:	b159      	cbz	r1, 8005e9c <_dtoa_r+0x5c>
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	604a      	str	r2, [r1, #4]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4093      	lsls	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f000 feda 	bl	8006c48 <_Bfree>
 8005e94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	1e2b      	subs	r3, r5, #0
 8005e9e:	bfb9      	ittee	lt
 8005ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ea4:	9303      	strlt	r3, [sp, #12]
 8005ea6:	2300      	movge	r3, #0
 8005ea8:	6033      	strge	r3, [r6, #0]
 8005eaa:	9f03      	ldr	r7, [sp, #12]
 8005eac:	4b98      	ldr	r3, [pc, #608]	@ (8006110 <_dtoa_r+0x2d0>)
 8005eae:	bfbc      	itt	lt
 8005eb0:	2201      	movlt	r2, #1
 8005eb2:	6032      	strlt	r2, [r6, #0]
 8005eb4:	43bb      	bics	r3, r7
 8005eb6:	d112      	bne.n	8005ede <_dtoa_r+0x9e>
 8005eb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005eba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005ebe:	6013      	str	r3, [r2, #0]
 8005ec0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ec4:	4323      	orrs	r3, r4
 8005ec6:	f000 854d 	beq.w	8006964 <_dtoa_r+0xb24>
 8005eca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ecc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006124 <_dtoa_r+0x2e4>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 854f 	beq.w	8006974 <_dtoa_r+0xb34>
 8005ed6:	f10a 0303 	add.w	r3, sl, #3
 8005eda:	f000 bd49 	b.w	8006970 <_dtoa_r+0xb30>
 8005ede:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	ec51 0b17 	vmov	r0, r1, d7
 8005ee8:	2300      	movs	r3, #0
 8005eea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005eee:	f7fa fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	b158      	cbz	r0, 8005f0e <_dtoa_r+0xce>
 8005ef6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005efe:	b113      	cbz	r3, 8005f06 <_dtoa_r+0xc6>
 8005f00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f02:	4b84      	ldr	r3, [pc, #528]	@ (8006114 <_dtoa_r+0x2d4>)
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006128 <_dtoa_r+0x2e8>
 8005f0a:	f000 bd33 	b.w	8006974 <_dtoa_r+0xb34>
 8005f0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f12:	aa16      	add	r2, sp, #88	@ 0x58
 8005f14:	a917      	add	r1, sp, #92	@ 0x5c
 8005f16:	4658      	mov	r0, fp
 8005f18:	f001 f980 	bl	800721c <__d2b>
 8005f1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f20:	4681      	mov	r9, r0
 8005f22:	2e00      	cmp	r6, #0
 8005f24:	d077      	beq.n	8006016 <_dtoa_r+0x1d6>
 8005f26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f40:	4619      	mov	r1, r3
 8005f42:	2200      	movs	r2, #0
 8005f44:	4b74      	ldr	r3, [pc, #464]	@ (8006118 <_dtoa_r+0x2d8>)
 8005f46:	f7fa f9a7 	bl	8000298 <__aeabi_dsub>
 8005f4a:	a369      	add	r3, pc, #420	@ (adr r3, 80060f0 <_dtoa_r+0x2b0>)
 8005f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f50:	f7fa fb5a 	bl	8000608 <__aeabi_dmul>
 8005f54:	a368      	add	r3, pc, #416	@ (adr r3, 80060f8 <_dtoa_r+0x2b8>)
 8005f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5a:	f7fa f99f 	bl	800029c <__adddf3>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4630      	mov	r0, r6
 8005f62:	460d      	mov	r5, r1
 8005f64:	f7fa fae6 	bl	8000534 <__aeabi_i2d>
 8005f68:	a365      	add	r3, pc, #404	@ (adr r3, 8006100 <_dtoa_r+0x2c0>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa fb4b 	bl	8000608 <__aeabi_dmul>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4620      	mov	r0, r4
 8005f78:	4629      	mov	r1, r5
 8005f7a:	f7fa f98f 	bl	800029c <__adddf3>
 8005f7e:	4604      	mov	r4, r0
 8005f80:	460d      	mov	r5, r1
 8005f82:	f7fa fdf1 	bl	8000b68 <__aeabi_d2iz>
 8005f86:	2200      	movs	r2, #0
 8005f88:	4607      	mov	r7, r0
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	4629      	mov	r1, r5
 8005f90:	f7fa fdac 	bl	8000aec <__aeabi_dcmplt>
 8005f94:	b140      	cbz	r0, 8005fa8 <_dtoa_r+0x168>
 8005f96:	4638      	mov	r0, r7
 8005f98:	f7fa facc 	bl	8000534 <__aeabi_i2d>
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f7fa fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fa4:	b900      	cbnz	r0, 8005fa8 <_dtoa_r+0x168>
 8005fa6:	3f01      	subs	r7, #1
 8005fa8:	2f16      	cmp	r7, #22
 8005faa:	d851      	bhi.n	8006050 <_dtoa_r+0x210>
 8005fac:	4b5b      	ldr	r3, [pc, #364]	@ (800611c <_dtoa_r+0x2dc>)
 8005fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fba:	f7fa fd97 	bl	8000aec <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	d048      	beq.n	8006054 <_dtoa_r+0x214>
 8005fc2:	3f01      	subs	r7, #1
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005fc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fca:	1b9b      	subs	r3, r3, r6
 8005fcc:	1e5a      	subs	r2, r3, #1
 8005fce:	bf44      	itt	mi
 8005fd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005fd4:	2300      	movmi	r3, #0
 8005fd6:	9208      	str	r2, [sp, #32]
 8005fd8:	bf54      	ite	pl
 8005fda:	f04f 0800 	movpl.w	r8, #0
 8005fde:	9308      	strmi	r3, [sp, #32]
 8005fe0:	2f00      	cmp	r7, #0
 8005fe2:	db39      	blt.n	8006058 <_dtoa_r+0x218>
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005fe8:	443b      	add	r3, r7
 8005fea:	9308      	str	r3, [sp, #32]
 8005fec:	2300      	movs	r3, #0
 8005fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff2:	2b09      	cmp	r3, #9
 8005ff4:	d864      	bhi.n	80060c0 <_dtoa_r+0x280>
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	bfc4      	itt	gt
 8005ffa:	3b04      	subgt	r3, #4
 8005ffc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006000:	f1a3 0302 	sub.w	r3, r3, #2
 8006004:	bfcc      	ite	gt
 8006006:	2400      	movgt	r4, #0
 8006008:	2401      	movle	r4, #1
 800600a:	2b03      	cmp	r3, #3
 800600c:	d863      	bhi.n	80060d6 <_dtoa_r+0x296>
 800600e:	e8df f003 	tbb	[pc, r3]
 8006012:	372a      	.short	0x372a
 8006014:	5535      	.short	0x5535
 8006016:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800601a:	441e      	add	r6, r3
 800601c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006020:	2b20      	cmp	r3, #32
 8006022:	bfc1      	itttt	gt
 8006024:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006028:	409f      	lslgt	r7, r3
 800602a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800602e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006032:	bfd6      	itet	le
 8006034:	f1c3 0320 	rsble	r3, r3, #32
 8006038:	ea47 0003 	orrgt.w	r0, r7, r3
 800603c:	fa04 f003 	lslle.w	r0, r4, r3
 8006040:	f7fa fa68 	bl	8000514 <__aeabi_ui2d>
 8006044:	2201      	movs	r2, #1
 8006046:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800604a:	3e01      	subs	r6, #1
 800604c:	9214      	str	r2, [sp, #80]	@ 0x50
 800604e:	e777      	b.n	8005f40 <_dtoa_r+0x100>
 8006050:	2301      	movs	r3, #1
 8006052:	e7b8      	b.n	8005fc6 <_dtoa_r+0x186>
 8006054:	9012      	str	r0, [sp, #72]	@ 0x48
 8006056:	e7b7      	b.n	8005fc8 <_dtoa_r+0x188>
 8006058:	427b      	negs	r3, r7
 800605a:	930a      	str	r3, [sp, #40]	@ 0x28
 800605c:	2300      	movs	r3, #0
 800605e:	eba8 0807 	sub.w	r8, r8, r7
 8006062:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006064:	e7c4      	b.n	8005ff0 <_dtoa_r+0x1b0>
 8006066:	2300      	movs	r3, #0
 8006068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800606a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	dc35      	bgt.n	80060dc <_dtoa_r+0x29c>
 8006070:	2301      	movs	r3, #1
 8006072:	9300      	str	r3, [sp, #0]
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	461a      	mov	r2, r3
 8006078:	920e      	str	r2, [sp, #56]	@ 0x38
 800607a:	e00b      	b.n	8006094 <_dtoa_r+0x254>
 800607c:	2301      	movs	r3, #1
 800607e:	e7f3      	b.n	8006068 <_dtoa_r+0x228>
 8006080:	2300      	movs	r3, #0
 8006082:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006084:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	9307      	str	r3, [sp, #28]
 8006090:	bfb8      	it	lt
 8006092:	2301      	movlt	r3, #1
 8006094:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006098:	2100      	movs	r1, #0
 800609a:	2204      	movs	r2, #4
 800609c:	f102 0514 	add.w	r5, r2, #20
 80060a0:	429d      	cmp	r5, r3
 80060a2:	d91f      	bls.n	80060e4 <_dtoa_r+0x2a4>
 80060a4:	6041      	str	r1, [r0, #4]
 80060a6:	4658      	mov	r0, fp
 80060a8:	f000 fd8e 	bl	8006bc8 <_Balloc>
 80060ac:	4682      	mov	sl, r0
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d13c      	bne.n	800612c <_dtoa_r+0x2ec>
 80060b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006120 <_dtoa_r+0x2e0>)
 80060b4:	4602      	mov	r2, r0
 80060b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80060ba:	e6d8      	b.n	8005e6e <_dtoa_r+0x2e>
 80060bc:	2301      	movs	r3, #1
 80060be:	e7e0      	b.n	8006082 <_dtoa_r+0x242>
 80060c0:	2401      	movs	r4, #1
 80060c2:	2300      	movs	r3, #0
 80060c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	9307      	str	r3, [sp, #28]
 80060d0:	2200      	movs	r2, #0
 80060d2:	2312      	movs	r3, #18
 80060d4:	e7d0      	b.n	8006078 <_dtoa_r+0x238>
 80060d6:	2301      	movs	r3, #1
 80060d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060da:	e7f5      	b.n	80060c8 <_dtoa_r+0x288>
 80060dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	9307      	str	r3, [sp, #28]
 80060e2:	e7d7      	b.n	8006094 <_dtoa_r+0x254>
 80060e4:	3101      	adds	r1, #1
 80060e6:	0052      	lsls	r2, r2, #1
 80060e8:	e7d8      	b.n	800609c <_dtoa_r+0x25c>
 80060ea:	bf00      	nop
 80060ec:	f3af 8000 	nop.w
 80060f0:	636f4361 	.word	0x636f4361
 80060f4:	3fd287a7 	.word	0x3fd287a7
 80060f8:	8b60c8b3 	.word	0x8b60c8b3
 80060fc:	3fc68a28 	.word	0x3fc68a28
 8006100:	509f79fb 	.word	0x509f79fb
 8006104:	3fd34413 	.word	0x3fd34413
 8006108:	08007b3d 	.word	0x08007b3d
 800610c:	08007b54 	.word	0x08007b54
 8006110:	7ff00000 	.word	0x7ff00000
 8006114:	08007b0d 	.word	0x08007b0d
 8006118:	3ff80000 	.word	0x3ff80000
 800611c:	08007c50 	.word	0x08007c50
 8006120:	08007bac 	.word	0x08007bac
 8006124:	08007b39 	.word	0x08007b39
 8006128:	08007b0c 	.word	0x08007b0c
 800612c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006130:	6018      	str	r0, [r3, #0]
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	2b0e      	cmp	r3, #14
 8006136:	f200 80a4 	bhi.w	8006282 <_dtoa_r+0x442>
 800613a:	2c00      	cmp	r4, #0
 800613c:	f000 80a1 	beq.w	8006282 <_dtoa_r+0x442>
 8006140:	2f00      	cmp	r7, #0
 8006142:	dd33      	ble.n	80061ac <_dtoa_r+0x36c>
 8006144:	4bad      	ldr	r3, [pc, #692]	@ (80063fc <_dtoa_r+0x5bc>)
 8006146:	f007 020f 	and.w	r2, r7, #15
 800614a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800614e:	ed93 7b00 	vldr	d7, [r3]
 8006152:	05f8      	lsls	r0, r7, #23
 8006154:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006158:	ea4f 1427 	mov.w	r4, r7, asr #4
 800615c:	d516      	bpl.n	800618c <_dtoa_r+0x34c>
 800615e:	4ba8      	ldr	r3, [pc, #672]	@ (8006400 <_dtoa_r+0x5c0>)
 8006160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006164:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006168:	f7fa fb78 	bl	800085c <__aeabi_ddiv>
 800616c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006170:	f004 040f 	and.w	r4, r4, #15
 8006174:	2603      	movs	r6, #3
 8006176:	4da2      	ldr	r5, [pc, #648]	@ (8006400 <_dtoa_r+0x5c0>)
 8006178:	b954      	cbnz	r4, 8006190 <_dtoa_r+0x350>
 800617a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800617e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006182:	f7fa fb6b 	bl	800085c <__aeabi_ddiv>
 8006186:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800618a:	e028      	b.n	80061de <_dtoa_r+0x39e>
 800618c:	2602      	movs	r6, #2
 800618e:	e7f2      	b.n	8006176 <_dtoa_r+0x336>
 8006190:	07e1      	lsls	r1, r4, #31
 8006192:	d508      	bpl.n	80061a6 <_dtoa_r+0x366>
 8006194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006198:	e9d5 2300 	ldrd	r2, r3, [r5]
 800619c:	f7fa fa34 	bl	8000608 <__aeabi_dmul>
 80061a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061a4:	3601      	adds	r6, #1
 80061a6:	1064      	asrs	r4, r4, #1
 80061a8:	3508      	adds	r5, #8
 80061aa:	e7e5      	b.n	8006178 <_dtoa_r+0x338>
 80061ac:	f000 80d2 	beq.w	8006354 <_dtoa_r+0x514>
 80061b0:	427c      	negs	r4, r7
 80061b2:	4b92      	ldr	r3, [pc, #584]	@ (80063fc <_dtoa_r+0x5bc>)
 80061b4:	4d92      	ldr	r5, [pc, #584]	@ (8006400 <_dtoa_r+0x5c0>)
 80061b6:	f004 020f 	and.w	r2, r4, #15
 80061ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061c6:	f7fa fa1f 	bl	8000608 <__aeabi_dmul>
 80061ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ce:	1124      	asrs	r4, r4, #4
 80061d0:	2300      	movs	r3, #0
 80061d2:	2602      	movs	r6, #2
 80061d4:	2c00      	cmp	r4, #0
 80061d6:	f040 80b2 	bne.w	800633e <_dtoa_r+0x4fe>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1d3      	bne.n	8006186 <_dtoa_r+0x346>
 80061de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80b7 	beq.w	8006358 <_dtoa_r+0x518>
 80061ea:	4b86      	ldr	r3, [pc, #536]	@ (8006404 <_dtoa_r+0x5c4>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	4620      	mov	r0, r4
 80061f0:	4629      	mov	r1, r5
 80061f2:	f7fa fc7b 	bl	8000aec <__aeabi_dcmplt>
 80061f6:	2800      	cmp	r0, #0
 80061f8:	f000 80ae 	beq.w	8006358 <_dtoa_r+0x518>
 80061fc:	9b07      	ldr	r3, [sp, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80aa 	beq.w	8006358 <_dtoa_r+0x518>
 8006204:	9b00      	ldr	r3, [sp, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dd37      	ble.n	800627a <_dtoa_r+0x43a>
 800620a:	1e7b      	subs	r3, r7, #1
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	4620      	mov	r0, r4
 8006210:	4b7d      	ldr	r3, [pc, #500]	@ (8006408 <_dtoa_r+0x5c8>)
 8006212:	2200      	movs	r2, #0
 8006214:	4629      	mov	r1, r5
 8006216:	f7fa f9f7 	bl	8000608 <__aeabi_dmul>
 800621a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800621e:	9c00      	ldr	r4, [sp, #0]
 8006220:	3601      	adds	r6, #1
 8006222:	4630      	mov	r0, r6
 8006224:	f7fa f986 	bl	8000534 <__aeabi_i2d>
 8006228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800622c:	f7fa f9ec 	bl	8000608 <__aeabi_dmul>
 8006230:	4b76      	ldr	r3, [pc, #472]	@ (800640c <_dtoa_r+0x5cc>)
 8006232:	2200      	movs	r2, #0
 8006234:	f7fa f832 	bl	800029c <__adddf3>
 8006238:	4605      	mov	r5, r0
 800623a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800623e:	2c00      	cmp	r4, #0
 8006240:	f040 808d 	bne.w	800635e <_dtoa_r+0x51e>
 8006244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006248:	4b71      	ldr	r3, [pc, #452]	@ (8006410 <_dtoa_r+0x5d0>)
 800624a:	2200      	movs	r2, #0
 800624c:	f7fa f824 	bl	8000298 <__aeabi_dsub>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006258:	462a      	mov	r2, r5
 800625a:	4633      	mov	r3, r6
 800625c:	f7fa fc64 	bl	8000b28 <__aeabi_dcmpgt>
 8006260:	2800      	cmp	r0, #0
 8006262:	f040 828b 	bne.w	800677c <_dtoa_r+0x93c>
 8006266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800626a:	462a      	mov	r2, r5
 800626c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006270:	f7fa fc3c 	bl	8000aec <__aeabi_dcmplt>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 8128 	bne.w	80064ca <_dtoa_r+0x68a>
 800627a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800627e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006282:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006284:	2b00      	cmp	r3, #0
 8006286:	f2c0 815a 	blt.w	800653e <_dtoa_r+0x6fe>
 800628a:	2f0e      	cmp	r7, #14
 800628c:	f300 8157 	bgt.w	800653e <_dtoa_r+0x6fe>
 8006290:	4b5a      	ldr	r3, [pc, #360]	@ (80063fc <_dtoa_r+0x5bc>)
 8006292:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006296:	ed93 7b00 	vldr	d7, [r3]
 800629a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800629c:	2b00      	cmp	r3, #0
 800629e:	ed8d 7b00 	vstr	d7, [sp]
 80062a2:	da03      	bge.n	80062ac <_dtoa_r+0x46c>
 80062a4:	9b07      	ldr	r3, [sp, #28]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f340 8101 	ble.w	80064ae <_dtoa_r+0x66e>
 80062ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062b0:	4656      	mov	r6, sl
 80062b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa facf 	bl	800085c <__aeabi_ddiv>
 80062be:	f7fa fc53 	bl	8000b68 <__aeabi_d2iz>
 80062c2:	4680      	mov	r8, r0
 80062c4:	f7fa f936 	bl	8000534 <__aeabi_i2d>
 80062c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062cc:	f7fa f99c 	bl	8000608 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4620      	mov	r0, r4
 80062d6:	4629      	mov	r1, r5
 80062d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062dc:	f7f9 ffdc 	bl	8000298 <__aeabi_dsub>
 80062e0:	f806 4b01 	strb.w	r4, [r6], #1
 80062e4:	9d07      	ldr	r5, [sp, #28]
 80062e6:	eba6 040a 	sub.w	r4, r6, sl
 80062ea:	42a5      	cmp	r5, r4
 80062ec:	4602      	mov	r2, r0
 80062ee:	460b      	mov	r3, r1
 80062f0:	f040 8117 	bne.w	8006522 <_dtoa_r+0x6e2>
 80062f4:	f7f9 ffd2 	bl	800029c <__adddf3>
 80062f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062fc:	4604      	mov	r4, r0
 80062fe:	460d      	mov	r5, r1
 8006300:	f7fa fc12 	bl	8000b28 <__aeabi_dcmpgt>
 8006304:	2800      	cmp	r0, #0
 8006306:	f040 80f9 	bne.w	80064fc <_dtoa_r+0x6bc>
 800630a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7fa fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006316:	b118      	cbz	r0, 8006320 <_dtoa_r+0x4e0>
 8006318:	f018 0f01 	tst.w	r8, #1
 800631c:	f040 80ee 	bne.w	80064fc <_dtoa_r+0x6bc>
 8006320:	4649      	mov	r1, r9
 8006322:	4658      	mov	r0, fp
 8006324:	f000 fc90 	bl	8006c48 <_Bfree>
 8006328:	2300      	movs	r3, #0
 800632a:	7033      	strb	r3, [r6, #0]
 800632c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800632e:	3701      	adds	r7, #1
 8006330:	601f      	str	r7, [r3, #0]
 8006332:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 831d 	beq.w	8006974 <_dtoa_r+0xb34>
 800633a:	601e      	str	r6, [r3, #0]
 800633c:	e31a      	b.n	8006974 <_dtoa_r+0xb34>
 800633e:	07e2      	lsls	r2, r4, #31
 8006340:	d505      	bpl.n	800634e <_dtoa_r+0x50e>
 8006342:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006346:	f7fa f95f 	bl	8000608 <__aeabi_dmul>
 800634a:	3601      	adds	r6, #1
 800634c:	2301      	movs	r3, #1
 800634e:	1064      	asrs	r4, r4, #1
 8006350:	3508      	adds	r5, #8
 8006352:	e73f      	b.n	80061d4 <_dtoa_r+0x394>
 8006354:	2602      	movs	r6, #2
 8006356:	e742      	b.n	80061de <_dtoa_r+0x39e>
 8006358:	9c07      	ldr	r4, [sp, #28]
 800635a:	9704      	str	r7, [sp, #16]
 800635c:	e761      	b.n	8006222 <_dtoa_r+0x3e2>
 800635e:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <_dtoa_r+0x5bc>)
 8006360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006362:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006366:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800636a:	4454      	add	r4, sl
 800636c:	2900      	cmp	r1, #0
 800636e:	d053      	beq.n	8006418 <_dtoa_r+0x5d8>
 8006370:	4928      	ldr	r1, [pc, #160]	@ (8006414 <_dtoa_r+0x5d4>)
 8006372:	2000      	movs	r0, #0
 8006374:	f7fa fa72 	bl	800085c <__aeabi_ddiv>
 8006378:	4633      	mov	r3, r6
 800637a:	462a      	mov	r2, r5
 800637c:	f7f9 ff8c 	bl	8000298 <__aeabi_dsub>
 8006380:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006384:	4656      	mov	r6, sl
 8006386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638a:	f7fa fbed 	bl	8000b68 <__aeabi_d2iz>
 800638e:	4605      	mov	r5, r0
 8006390:	f7fa f8d0 	bl	8000534 <__aeabi_i2d>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800639c:	f7f9 ff7c 	bl	8000298 <__aeabi_dsub>
 80063a0:	3530      	adds	r5, #48	@ 0x30
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063aa:	f806 5b01 	strb.w	r5, [r6], #1
 80063ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063b2:	f7fa fb9b 	bl	8000aec <__aeabi_dcmplt>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	d171      	bne.n	800649e <_dtoa_r+0x65e>
 80063ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063be:	4911      	ldr	r1, [pc, #68]	@ (8006404 <_dtoa_r+0x5c4>)
 80063c0:	2000      	movs	r0, #0
 80063c2:	f7f9 ff69 	bl	8000298 <__aeabi_dsub>
 80063c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ca:	f7fa fb8f 	bl	8000aec <__aeabi_dcmplt>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	f040 8095 	bne.w	80064fe <_dtoa_r+0x6be>
 80063d4:	42a6      	cmp	r6, r4
 80063d6:	f43f af50 	beq.w	800627a <_dtoa_r+0x43a>
 80063da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063de:	4b0a      	ldr	r3, [pc, #40]	@ (8006408 <_dtoa_r+0x5c8>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	f7fa f911 	bl	8000608 <__aeabi_dmul>
 80063e6:	4b08      	ldr	r3, [pc, #32]	@ (8006408 <_dtoa_r+0x5c8>)
 80063e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063ec:	2200      	movs	r2, #0
 80063ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f2:	f7fa f909 	bl	8000608 <__aeabi_dmul>
 80063f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063fa:	e7c4      	b.n	8006386 <_dtoa_r+0x546>
 80063fc:	08007c50 	.word	0x08007c50
 8006400:	08007c28 	.word	0x08007c28
 8006404:	3ff00000 	.word	0x3ff00000
 8006408:	40240000 	.word	0x40240000
 800640c:	401c0000 	.word	0x401c0000
 8006410:	40140000 	.word	0x40140000
 8006414:	3fe00000 	.word	0x3fe00000
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	f7fa f8f4 	bl	8000608 <__aeabi_dmul>
 8006420:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006424:	9415      	str	r4, [sp, #84]	@ 0x54
 8006426:	4656      	mov	r6, sl
 8006428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642c:	f7fa fb9c 	bl	8000b68 <__aeabi_d2iz>
 8006430:	4605      	mov	r5, r0
 8006432:	f7fa f87f 	bl	8000534 <__aeabi_i2d>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800643e:	f7f9 ff2b 	bl	8000298 <__aeabi_dsub>
 8006442:	3530      	adds	r5, #48	@ 0x30
 8006444:	f806 5b01 	strb.w	r5, [r6], #1
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	42a6      	cmp	r6, r4
 800644e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	d124      	bne.n	80064a2 <_dtoa_r+0x662>
 8006458:	4bac      	ldr	r3, [pc, #688]	@ (800670c <_dtoa_r+0x8cc>)
 800645a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800645e:	f7f9 ff1d 	bl	800029c <__adddf3>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646a:	f7fa fb5d 	bl	8000b28 <__aeabi_dcmpgt>
 800646e:	2800      	cmp	r0, #0
 8006470:	d145      	bne.n	80064fe <_dtoa_r+0x6be>
 8006472:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006476:	49a5      	ldr	r1, [pc, #660]	@ (800670c <_dtoa_r+0x8cc>)
 8006478:	2000      	movs	r0, #0
 800647a:	f7f9 ff0d 	bl	8000298 <__aeabi_dsub>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006486:	f7fa fb31 	bl	8000aec <__aeabi_dcmplt>
 800648a:	2800      	cmp	r0, #0
 800648c:	f43f aef5 	beq.w	800627a <_dtoa_r+0x43a>
 8006490:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006492:	1e73      	subs	r3, r6, #1
 8006494:	9315      	str	r3, [sp, #84]	@ 0x54
 8006496:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800649a:	2b30      	cmp	r3, #48	@ 0x30
 800649c:	d0f8      	beq.n	8006490 <_dtoa_r+0x650>
 800649e:	9f04      	ldr	r7, [sp, #16]
 80064a0:	e73e      	b.n	8006320 <_dtoa_r+0x4e0>
 80064a2:	4b9b      	ldr	r3, [pc, #620]	@ (8006710 <_dtoa_r+0x8d0>)
 80064a4:	f7fa f8b0 	bl	8000608 <__aeabi_dmul>
 80064a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ac:	e7bc      	b.n	8006428 <_dtoa_r+0x5e8>
 80064ae:	d10c      	bne.n	80064ca <_dtoa_r+0x68a>
 80064b0:	4b98      	ldr	r3, [pc, #608]	@ (8006714 <_dtoa_r+0x8d4>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064b8:	f7fa f8a6 	bl	8000608 <__aeabi_dmul>
 80064bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064c0:	f7fa fb28 	bl	8000b14 <__aeabi_dcmpge>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	f000 8157 	beq.w	8006778 <_dtoa_r+0x938>
 80064ca:	2400      	movs	r4, #0
 80064cc:	4625      	mov	r5, r4
 80064ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064d0:	43db      	mvns	r3, r3
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	4656      	mov	r6, sl
 80064d6:	2700      	movs	r7, #0
 80064d8:	4621      	mov	r1, r4
 80064da:	4658      	mov	r0, fp
 80064dc:	f000 fbb4 	bl	8006c48 <_Bfree>
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	d0dc      	beq.n	800649e <_dtoa_r+0x65e>
 80064e4:	b12f      	cbz	r7, 80064f2 <_dtoa_r+0x6b2>
 80064e6:	42af      	cmp	r7, r5
 80064e8:	d003      	beq.n	80064f2 <_dtoa_r+0x6b2>
 80064ea:	4639      	mov	r1, r7
 80064ec:	4658      	mov	r0, fp
 80064ee:	f000 fbab 	bl	8006c48 <_Bfree>
 80064f2:	4629      	mov	r1, r5
 80064f4:	4658      	mov	r0, fp
 80064f6:	f000 fba7 	bl	8006c48 <_Bfree>
 80064fa:	e7d0      	b.n	800649e <_dtoa_r+0x65e>
 80064fc:	9704      	str	r7, [sp, #16]
 80064fe:	4633      	mov	r3, r6
 8006500:	461e      	mov	r6, r3
 8006502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006506:	2a39      	cmp	r2, #57	@ 0x39
 8006508:	d107      	bne.n	800651a <_dtoa_r+0x6da>
 800650a:	459a      	cmp	sl, r3
 800650c:	d1f8      	bne.n	8006500 <_dtoa_r+0x6c0>
 800650e:	9a04      	ldr	r2, [sp, #16]
 8006510:	3201      	adds	r2, #1
 8006512:	9204      	str	r2, [sp, #16]
 8006514:	2230      	movs	r2, #48	@ 0x30
 8006516:	f88a 2000 	strb.w	r2, [sl]
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	3201      	adds	r2, #1
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	e7bd      	b.n	800649e <_dtoa_r+0x65e>
 8006522:	4b7b      	ldr	r3, [pc, #492]	@ (8006710 <_dtoa_r+0x8d0>)
 8006524:	2200      	movs	r2, #0
 8006526:	f7fa f86f 	bl	8000608 <__aeabi_dmul>
 800652a:	2200      	movs	r2, #0
 800652c:	2300      	movs	r3, #0
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	f7fa fad1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006536:	2800      	cmp	r0, #0
 8006538:	f43f aebb 	beq.w	80062b2 <_dtoa_r+0x472>
 800653c:	e6f0      	b.n	8006320 <_dtoa_r+0x4e0>
 800653e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006540:	2a00      	cmp	r2, #0
 8006542:	f000 80db 	beq.w	80066fc <_dtoa_r+0x8bc>
 8006546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006548:	2a01      	cmp	r2, #1
 800654a:	f300 80bf 	bgt.w	80066cc <_dtoa_r+0x88c>
 800654e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006550:	2a00      	cmp	r2, #0
 8006552:	f000 80b7 	beq.w	80066c4 <_dtoa_r+0x884>
 8006556:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800655a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800655c:	4646      	mov	r6, r8
 800655e:	9a08      	ldr	r2, [sp, #32]
 8006560:	2101      	movs	r1, #1
 8006562:	441a      	add	r2, r3
 8006564:	4658      	mov	r0, fp
 8006566:	4498      	add	r8, r3
 8006568:	9208      	str	r2, [sp, #32]
 800656a:	f000 fc21 	bl	8006db0 <__i2b>
 800656e:	4605      	mov	r5, r0
 8006570:	b15e      	cbz	r6, 800658a <_dtoa_r+0x74a>
 8006572:	9b08      	ldr	r3, [sp, #32]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dd08      	ble.n	800658a <_dtoa_r+0x74a>
 8006578:	42b3      	cmp	r3, r6
 800657a:	9a08      	ldr	r2, [sp, #32]
 800657c:	bfa8      	it	ge
 800657e:	4633      	movge	r3, r6
 8006580:	eba8 0803 	sub.w	r8, r8, r3
 8006584:	1af6      	subs	r6, r6, r3
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	9308      	str	r3, [sp, #32]
 800658a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658c:	b1f3      	cbz	r3, 80065cc <_dtoa_r+0x78c>
 800658e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80b7 	beq.w	8006704 <_dtoa_r+0x8c4>
 8006596:	b18c      	cbz	r4, 80065bc <_dtoa_r+0x77c>
 8006598:	4629      	mov	r1, r5
 800659a:	4622      	mov	r2, r4
 800659c:	4658      	mov	r0, fp
 800659e:	f000 fcc7 	bl	8006f30 <__pow5mult>
 80065a2:	464a      	mov	r2, r9
 80065a4:	4601      	mov	r1, r0
 80065a6:	4605      	mov	r5, r0
 80065a8:	4658      	mov	r0, fp
 80065aa:	f000 fc17 	bl	8006ddc <__multiply>
 80065ae:	4649      	mov	r1, r9
 80065b0:	9004      	str	r0, [sp, #16]
 80065b2:	4658      	mov	r0, fp
 80065b4:	f000 fb48 	bl	8006c48 <_Bfree>
 80065b8:	9b04      	ldr	r3, [sp, #16]
 80065ba:	4699      	mov	r9, r3
 80065bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065be:	1b1a      	subs	r2, r3, r4
 80065c0:	d004      	beq.n	80065cc <_dtoa_r+0x78c>
 80065c2:	4649      	mov	r1, r9
 80065c4:	4658      	mov	r0, fp
 80065c6:	f000 fcb3 	bl	8006f30 <__pow5mult>
 80065ca:	4681      	mov	r9, r0
 80065cc:	2101      	movs	r1, #1
 80065ce:	4658      	mov	r0, fp
 80065d0:	f000 fbee 	bl	8006db0 <__i2b>
 80065d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065d6:	4604      	mov	r4, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 81cf 	beq.w	800697c <_dtoa_r+0xb3c>
 80065de:	461a      	mov	r2, r3
 80065e0:	4601      	mov	r1, r0
 80065e2:	4658      	mov	r0, fp
 80065e4:	f000 fca4 	bl	8006f30 <__pow5mult>
 80065e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	4604      	mov	r4, r0
 80065ee:	f300 8095 	bgt.w	800671c <_dtoa_r+0x8dc>
 80065f2:	9b02      	ldr	r3, [sp, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f040 8087 	bne.w	8006708 <_dtoa_r+0x8c8>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006600:	2b00      	cmp	r3, #0
 8006602:	f040 8089 	bne.w	8006718 <_dtoa_r+0x8d8>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800660c:	0d1b      	lsrs	r3, r3, #20
 800660e:	051b      	lsls	r3, r3, #20
 8006610:	b12b      	cbz	r3, 800661e <_dtoa_r+0x7de>
 8006612:	9b08      	ldr	r3, [sp, #32]
 8006614:	3301      	adds	r3, #1
 8006616:	9308      	str	r3, [sp, #32]
 8006618:	f108 0801 	add.w	r8, r8, #1
 800661c:	2301      	movs	r3, #1
 800661e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 81b0 	beq.w	8006988 <_dtoa_r+0xb48>
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800662e:	6918      	ldr	r0, [r3, #16]
 8006630:	f000 fb72 	bl	8006d18 <__hi0bits>
 8006634:	f1c0 0020 	rsb	r0, r0, #32
 8006638:	9b08      	ldr	r3, [sp, #32]
 800663a:	4418      	add	r0, r3
 800663c:	f010 001f 	ands.w	r0, r0, #31
 8006640:	d077      	beq.n	8006732 <_dtoa_r+0x8f2>
 8006642:	f1c0 0320 	rsb	r3, r0, #32
 8006646:	2b04      	cmp	r3, #4
 8006648:	dd6b      	ble.n	8006722 <_dtoa_r+0x8e2>
 800664a:	9b08      	ldr	r3, [sp, #32]
 800664c:	f1c0 001c 	rsb	r0, r0, #28
 8006650:	4403      	add	r3, r0
 8006652:	4480      	add	r8, r0
 8006654:	4406      	add	r6, r0
 8006656:	9308      	str	r3, [sp, #32]
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	dd05      	ble.n	800666a <_dtoa_r+0x82a>
 800665e:	4649      	mov	r1, r9
 8006660:	4642      	mov	r2, r8
 8006662:	4658      	mov	r0, fp
 8006664:	f000 fcbe 	bl	8006fe4 <__lshift>
 8006668:	4681      	mov	r9, r0
 800666a:	9b08      	ldr	r3, [sp, #32]
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd05      	ble.n	800667c <_dtoa_r+0x83c>
 8006670:	4621      	mov	r1, r4
 8006672:	461a      	mov	r2, r3
 8006674:	4658      	mov	r0, fp
 8006676:	f000 fcb5 	bl	8006fe4 <__lshift>
 800667a:	4604      	mov	r4, r0
 800667c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800667e:	2b00      	cmp	r3, #0
 8006680:	d059      	beq.n	8006736 <_dtoa_r+0x8f6>
 8006682:	4621      	mov	r1, r4
 8006684:	4648      	mov	r0, r9
 8006686:	f000 fd19 	bl	80070bc <__mcmp>
 800668a:	2800      	cmp	r0, #0
 800668c:	da53      	bge.n	8006736 <_dtoa_r+0x8f6>
 800668e:	1e7b      	subs	r3, r7, #1
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	4649      	mov	r1, r9
 8006694:	2300      	movs	r3, #0
 8006696:	220a      	movs	r2, #10
 8006698:	4658      	mov	r0, fp
 800669a:	f000 faf7 	bl	8006c8c <__multadd>
 800669e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a0:	4681      	mov	r9, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 8172 	beq.w	800698c <_dtoa_r+0xb4c>
 80066a8:	2300      	movs	r3, #0
 80066aa:	4629      	mov	r1, r5
 80066ac:	220a      	movs	r2, #10
 80066ae:	4658      	mov	r0, fp
 80066b0:	f000 faec 	bl	8006c8c <__multadd>
 80066b4:	9b00      	ldr	r3, [sp, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	4605      	mov	r5, r0
 80066ba:	dc67      	bgt.n	800678c <_dtoa_r+0x94c>
 80066bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066be:	2b02      	cmp	r3, #2
 80066c0:	dc41      	bgt.n	8006746 <_dtoa_r+0x906>
 80066c2:	e063      	b.n	800678c <_dtoa_r+0x94c>
 80066c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066ca:	e746      	b.n	800655a <_dtoa_r+0x71a>
 80066cc:	9b07      	ldr	r3, [sp, #28]
 80066ce:	1e5c      	subs	r4, r3, #1
 80066d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066d2:	42a3      	cmp	r3, r4
 80066d4:	bfbf      	itttt	lt
 80066d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80066da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066dc:	1ae3      	sublt	r3, r4, r3
 80066de:	bfb4      	ite	lt
 80066e0:	18d2      	addlt	r2, r2, r3
 80066e2:	1b1c      	subge	r4, r3, r4
 80066e4:	9b07      	ldr	r3, [sp, #28]
 80066e6:	bfbc      	itt	lt
 80066e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80066ea:	2400      	movlt	r4, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	bfb5      	itete	lt
 80066f0:	eba8 0603 	sublt.w	r6, r8, r3
 80066f4:	9b07      	ldrge	r3, [sp, #28]
 80066f6:	2300      	movlt	r3, #0
 80066f8:	4646      	movge	r6, r8
 80066fa:	e730      	b.n	800655e <_dtoa_r+0x71e>
 80066fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006700:	4646      	mov	r6, r8
 8006702:	e735      	b.n	8006570 <_dtoa_r+0x730>
 8006704:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006706:	e75c      	b.n	80065c2 <_dtoa_r+0x782>
 8006708:	2300      	movs	r3, #0
 800670a:	e788      	b.n	800661e <_dtoa_r+0x7de>
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	40240000 	.word	0x40240000
 8006714:	40140000 	.word	0x40140000
 8006718:	9b02      	ldr	r3, [sp, #8]
 800671a:	e780      	b.n	800661e <_dtoa_r+0x7de>
 800671c:	2300      	movs	r3, #0
 800671e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006720:	e782      	b.n	8006628 <_dtoa_r+0x7e8>
 8006722:	d099      	beq.n	8006658 <_dtoa_r+0x818>
 8006724:	9a08      	ldr	r2, [sp, #32]
 8006726:	331c      	adds	r3, #28
 8006728:	441a      	add	r2, r3
 800672a:	4498      	add	r8, r3
 800672c:	441e      	add	r6, r3
 800672e:	9208      	str	r2, [sp, #32]
 8006730:	e792      	b.n	8006658 <_dtoa_r+0x818>
 8006732:	4603      	mov	r3, r0
 8006734:	e7f6      	b.n	8006724 <_dtoa_r+0x8e4>
 8006736:	9b07      	ldr	r3, [sp, #28]
 8006738:	9704      	str	r7, [sp, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dc20      	bgt.n	8006780 <_dtoa_r+0x940>
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006742:	2b02      	cmp	r3, #2
 8006744:	dd1e      	ble.n	8006784 <_dtoa_r+0x944>
 8006746:	9b00      	ldr	r3, [sp, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f47f aec0 	bne.w	80064ce <_dtoa_r+0x68e>
 800674e:	4621      	mov	r1, r4
 8006750:	2205      	movs	r2, #5
 8006752:	4658      	mov	r0, fp
 8006754:	f000 fa9a 	bl	8006c8c <__multadd>
 8006758:	4601      	mov	r1, r0
 800675a:	4604      	mov	r4, r0
 800675c:	4648      	mov	r0, r9
 800675e:	f000 fcad 	bl	80070bc <__mcmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	f77f aeb3 	ble.w	80064ce <_dtoa_r+0x68e>
 8006768:	4656      	mov	r6, sl
 800676a:	2331      	movs	r3, #49	@ 0x31
 800676c:	f806 3b01 	strb.w	r3, [r6], #1
 8006770:	9b04      	ldr	r3, [sp, #16]
 8006772:	3301      	adds	r3, #1
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	e6ae      	b.n	80064d6 <_dtoa_r+0x696>
 8006778:	9c07      	ldr	r4, [sp, #28]
 800677a:	9704      	str	r7, [sp, #16]
 800677c:	4625      	mov	r5, r4
 800677e:	e7f3      	b.n	8006768 <_dtoa_r+0x928>
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8104 	beq.w	8006994 <_dtoa_r+0xb54>
 800678c:	2e00      	cmp	r6, #0
 800678e:	dd05      	ble.n	800679c <_dtoa_r+0x95c>
 8006790:	4629      	mov	r1, r5
 8006792:	4632      	mov	r2, r6
 8006794:	4658      	mov	r0, fp
 8006796:	f000 fc25 	bl	8006fe4 <__lshift>
 800679a:	4605      	mov	r5, r0
 800679c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d05a      	beq.n	8006858 <_dtoa_r+0xa18>
 80067a2:	6869      	ldr	r1, [r5, #4]
 80067a4:	4658      	mov	r0, fp
 80067a6:	f000 fa0f 	bl	8006bc8 <_Balloc>
 80067aa:	4606      	mov	r6, r0
 80067ac:	b928      	cbnz	r0, 80067ba <_dtoa_r+0x97a>
 80067ae:	4b84      	ldr	r3, [pc, #528]	@ (80069c0 <_dtoa_r+0xb80>)
 80067b0:	4602      	mov	r2, r0
 80067b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067b6:	f7ff bb5a 	b.w	8005e6e <_dtoa_r+0x2e>
 80067ba:	692a      	ldr	r2, [r5, #16]
 80067bc:	3202      	adds	r2, #2
 80067be:	0092      	lsls	r2, r2, #2
 80067c0:	f105 010c 	add.w	r1, r5, #12
 80067c4:	300c      	adds	r0, #12
 80067c6:	f001 f857 	bl	8007878 <memcpy>
 80067ca:	2201      	movs	r2, #1
 80067cc:	4631      	mov	r1, r6
 80067ce:	4658      	mov	r0, fp
 80067d0:	f000 fc08 	bl	8006fe4 <__lshift>
 80067d4:	f10a 0301 	add.w	r3, sl, #1
 80067d8:	9307      	str	r3, [sp, #28]
 80067da:	9b00      	ldr	r3, [sp, #0]
 80067dc:	4453      	add	r3, sl
 80067de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	462f      	mov	r7, r5
 80067e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ea:	4605      	mov	r5, r0
 80067ec:	9b07      	ldr	r3, [sp, #28]
 80067ee:	4621      	mov	r1, r4
 80067f0:	3b01      	subs	r3, #1
 80067f2:	4648      	mov	r0, r9
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	f7ff fa99 	bl	8005d2c <quorem>
 80067fa:	4639      	mov	r1, r7
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006802:	4648      	mov	r0, r9
 8006804:	f000 fc5a 	bl	80070bc <__mcmp>
 8006808:	462a      	mov	r2, r5
 800680a:	9008      	str	r0, [sp, #32]
 800680c:	4621      	mov	r1, r4
 800680e:	4658      	mov	r0, fp
 8006810:	f000 fc70 	bl	80070f4 <__mdiff>
 8006814:	68c2      	ldr	r2, [r0, #12]
 8006816:	4606      	mov	r6, r0
 8006818:	bb02      	cbnz	r2, 800685c <_dtoa_r+0xa1c>
 800681a:	4601      	mov	r1, r0
 800681c:	4648      	mov	r0, r9
 800681e:	f000 fc4d 	bl	80070bc <__mcmp>
 8006822:	4602      	mov	r2, r0
 8006824:	4631      	mov	r1, r6
 8006826:	4658      	mov	r0, fp
 8006828:	920e      	str	r2, [sp, #56]	@ 0x38
 800682a:	f000 fa0d 	bl	8006c48 <_Bfree>
 800682e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006832:	9e07      	ldr	r6, [sp, #28]
 8006834:	ea43 0102 	orr.w	r1, r3, r2
 8006838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800683a:	4319      	orrs	r1, r3
 800683c:	d110      	bne.n	8006860 <_dtoa_r+0xa20>
 800683e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006842:	d029      	beq.n	8006898 <_dtoa_r+0xa58>
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	2b00      	cmp	r3, #0
 8006848:	dd02      	ble.n	8006850 <_dtoa_r+0xa10>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006850:	9b00      	ldr	r3, [sp, #0]
 8006852:	f883 8000 	strb.w	r8, [r3]
 8006856:	e63f      	b.n	80064d8 <_dtoa_r+0x698>
 8006858:	4628      	mov	r0, r5
 800685a:	e7bb      	b.n	80067d4 <_dtoa_r+0x994>
 800685c:	2201      	movs	r2, #1
 800685e:	e7e1      	b.n	8006824 <_dtoa_r+0x9e4>
 8006860:	9b08      	ldr	r3, [sp, #32]
 8006862:	2b00      	cmp	r3, #0
 8006864:	db04      	blt.n	8006870 <_dtoa_r+0xa30>
 8006866:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006868:	430b      	orrs	r3, r1
 800686a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800686c:	430b      	orrs	r3, r1
 800686e:	d120      	bne.n	80068b2 <_dtoa_r+0xa72>
 8006870:	2a00      	cmp	r2, #0
 8006872:	dded      	ble.n	8006850 <_dtoa_r+0xa10>
 8006874:	4649      	mov	r1, r9
 8006876:	2201      	movs	r2, #1
 8006878:	4658      	mov	r0, fp
 800687a:	f000 fbb3 	bl	8006fe4 <__lshift>
 800687e:	4621      	mov	r1, r4
 8006880:	4681      	mov	r9, r0
 8006882:	f000 fc1b 	bl	80070bc <__mcmp>
 8006886:	2800      	cmp	r0, #0
 8006888:	dc03      	bgt.n	8006892 <_dtoa_r+0xa52>
 800688a:	d1e1      	bne.n	8006850 <_dtoa_r+0xa10>
 800688c:	f018 0f01 	tst.w	r8, #1
 8006890:	d0de      	beq.n	8006850 <_dtoa_r+0xa10>
 8006892:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006896:	d1d8      	bne.n	800684a <_dtoa_r+0xa0a>
 8006898:	9a00      	ldr	r2, [sp, #0]
 800689a:	2339      	movs	r3, #57	@ 0x39
 800689c:	7013      	strb	r3, [r2, #0]
 800689e:	4633      	mov	r3, r6
 80068a0:	461e      	mov	r6, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068a8:	2a39      	cmp	r2, #57	@ 0x39
 80068aa:	d052      	beq.n	8006952 <_dtoa_r+0xb12>
 80068ac:	3201      	adds	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e612      	b.n	80064d8 <_dtoa_r+0x698>
 80068b2:	2a00      	cmp	r2, #0
 80068b4:	dd07      	ble.n	80068c6 <_dtoa_r+0xa86>
 80068b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068ba:	d0ed      	beq.n	8006898 <_dtoa_r+0xa58>
 80068bc:	9a00      	ldr	r2, [sp, #0]
 80068be:	f108 0301 	add.w	r3, r8, #1
 80068c2:	7013      	strb	r3, [r2, #0]
 80068c4:	e608      	b.n	80064d8 <_dtoa_r+0x698>
 80068c6:	9b07      	ldr	r3, [sp, #28]
 80068c8:	9a07      	ldr	r2, [sp, #28]
 80068ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d028      	beq.n	8006926 <_dtoa_r+0xae6>
 80068d4:	4649      	mov	r1, r9
 80068d6:	2300      	movs	r3, #0
 80068d8:	220a      	movs	r2, #10
 80068da:	4658      	mov	r0, fp
 80068dc:	f000 f9d6 	bl	8006c8c <__multadd>
 80068e0:	42af      	cmp	r7, r5
 80068e2:	4681      	mov	r9, r0
 80068e4:	f04f 0300 	mov.w	r3, #0
 80068e8:	f04f 020a 	mov.w	r2, #10
 80068ec:	4639      	mov	r1, r7
 80068ee:	4658      	mov	r0, fp
 80068f0:	d107      	bne.n	8006902 <_dtoa_r+0xac2>
 80068f2:	f000 f9cb 	bl	8006c8c <__multadd>
 80068f6:	4607      	mov	r7, r0
 80068f8:	4605      	mov	r5, r0
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	3301      	adds	r3, #1
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	e774      	b.n	80067ec <_dtoa_r+0x9ac>
 8006902:	f000 f9c3 	bl	8006c8c <__multadd>
 8006906:	4629      	mov	r1, r5
 8006908:	4607      	mov	r7, r0
 800690a:	2300      	movs	r3, #0
 800690c:	220a      	movs	r2, #10
 800690e:	4658      	mov	r0, fp
 8006910:	f000 f9bc 	bl	8006c8c <__multadd>
 8006914:	4605      	mov	r5, r0
 8006916:	e7f0      	b.n	80068fa <_dtoa_r+0xaba>
 8006918:	9b00      	ldr	r3, [sp, #0]
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfcc      	ite	gt
 800691e:	461e      	movgt	r6, r3
 8006920:	2601      	movle	r6, #1
 8006922:	4456      	add	r6, sl
 8006924:	2700      	movs	r7, #0
 8006926:	4649      	mov	r1, r9
 8006928:	2201      	movs	r2, #1
 800692a:	4658      	mov	r0, fp
 800692c:	f000 fb5a 	bl	8006fe4 <__lshift>
 8006930:	4621      	mov	r1, r4
 8006932:	4681      	mov	r9, r0
 8006934:	f000 fbc2 	bl	80070bc <__mcmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	dcb0      	bgt.n	800689e <_dtoa_r+0xa5e>
 800693c:	d102      	bne.n	8006944 <_dtoa_r+0xb04>
 800693e:	f018 0f01 	tst.w	r8, #1
 8006942:	d1ac      	bne.n	800689e <_dtoa_r+0xa5e>
 8006944:	4633      	mov	r3, r6
 8006946:	461e      	mov	r6, r3
 8006948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800694c:	2a30      	cmp	r2, #48	@ 0x30
 800694e:	d0fa      	beq.n	8006946 <_dtoa_r+0xb06>
 8006950:	e5c2      	b.n	80064d8 <_dtoa_r+0x698>
 8006952:	459a      	cmp	sl, r3
 8006954:	d1a4      	bne.n	80068a0 <_dtoa_r+0xa60>
 8006956:	9b04      	ldr	r3, [sp, #16]
 8006958:	3301      	adds	r3, #1
 800695a:	9304      	str	r3, [sp, #16]
 800695c:	2331      	movs	r3, #49	@ 0x31
 800695e:	f88a 3000 	strb.w	r3, [sl]
 8006962:	e5b9      	b.n	80064d8 <_dtoa_r+0x698>
 8006964:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006966:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069c4 <_dtoa_r+0xb84>
 800696a:	b11b      	cbz	r3, 8006974 <_dtoa_r+0xb34>
 800696c:	f10a 0308 	add.w	r3, sl, #8
 8006970:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4650      	mov	r0, sl
 8006976:	b019      	add	sp, #100	@ 0x64
 8006978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800697e:	2b01      	cmp	r3, #1
 8006980:	f77f ae37 	ble.w	80065f2 <_dtoa_r+0x7b2>
 8006984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006986:	930a      	str	r3, [sp, #40]	@ 0x28
 8006988:	2001      	movs	r0, #1
 800698a:	e655      	b.n	8006638 <_dtoa_r+0x7f8>
 800698c:	9b00      	ldr	r3, [sp, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f77f aed6 	ble.w	8006740 <_dtoa_r+0x900>
 8006994:	4656      	mov	r6, sl
 8006996:	4621      	mov	r1, r4
 8006998:	4648      	mov	r0, r9
 800699a:	f7ff f9c7 	bl	8005d2c <quorem>
 800699e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069a2:	f806 8b01 	strb.w	r8, [r6], #1
 80069a6:	9b00      	ldr	r3, [sp, #0]
 80069a8:	eba6 020a 	sub.w	r2, r6, sl
 80069ac:	4293      	cmp	r3, r2
 80069ae:	ddb3      	ble.n	8006918 <_dtoa_r+0xad8>
 80069b0:	4649      	mov	r1, r9
 80069b2:	2300      	movs	r3, #0
 80069b4:	220a      	movs	r2, #10
 80069b6:	4658      	mov	r0, fp
 80069b8:	f000 f968 	bl	8006c8c <__multadd>
 80069bc:	4681      	mov	r9, r0
 80069be:	e7ea      	b.n	8006996 <_dtoa_r+0xb56>
 80069c0:	08007bac 	.word	0x08007bac
 80069c4:	08007b30 	.word	0x08007b30

080069c8 <_free_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4605      	mov	r5, r0
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d041      	beq.n	8006a54 <_free_r+0x8c>
 80069d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d4:	1f0c      	subs	r4, r1, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfb8      	it	lt
 80069da:	18e4      	addlt	r4, r4, r3
 80069dc:	f000 f8e8 	bl	8006bb0 <__malloc_lock>
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <_free_r+0x90>)
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	b933      	cbnz	r3, 80069f4 <_free_r+0x2c>
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	6014      	str	r4, [r2, #0]
 80069ea:	4628      	mov	r0, r5
 80069ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f0:	f000 b8e4 	b.w	8006bbc <__malloc_unlock>
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d908      	bls.n	8006a0a <_free_r+0x42>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	1821      	adds	r1, r4, r0
 80069fc:	428b      	cmp	r3, r1
 80069fe:	bf01      	itttt	eq
 8006a00:	6819      	ldreq	r1, [r3, #0]
 8006a02:	685b      	ldreq	r3, [r3, #4]
 8006a04:	1809      	addeq	r1, r1, r0
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	e7ed      	b.n	80069e6 <_free_r+0x1e>
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b10b      	cbz	r3, 8006a14 <_free_r+0x4c>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x42>
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	1850      	adds	r0, r2, r1
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x6c>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	4401      	add	r1, r0
 8006a20:	1850      	adds	r0, r2, r1
 8006a22:	4283      	cmp	r3, r0
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	d1e0      	bne.n	80069ea <_free_r+0x22>
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	6053      	str	r3, [r2, #4]
 8006a2e:	4408      	add	r0, r1
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	e7da      	b.n	80069ea <_free_r+0x22>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x74>
 8006a36:	230c      	movs	r3, #12
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	e7d6      	b.n	80069ea <_free_r+0x22>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6054      	str	r4, [r2, #4]
 8006a52:	e7ca      	b.n	80069ea <_free_r+0x22>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	200003e4 	.word	0x200003e4

08006a5c <malloc>:
 8006a5c:	4b02      	ldr	r3, [pc, #8]	@ (8006a68 <malloc+0xc>)
 8006a5e:	4601      	mov	r1, r0
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	f000 b825 	b.w	8006ab0 <_malloc_r>
 8006a66:	bf00      	nop
 8006a68:	20000020 	.word	0x20000020

08006a6c <sbrk_aligned>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006aac <sbrk_aligned+0x40>)
 8006a70:	460c      	mov	r4, r1
 8006a72:	6831      	ldr	r1, [r6, #0]
 8006a74:	4605      	mov	r5, r0
 8006a76:	b911      	cbnz	r1, 8006a7e <sbrk_aligned+0x12>
 8006a78:	f000 feee 	bl	8007858 <_sbrk_r>
 8006a7c:	6030      	str	r0, [r6, #0]
 8006a7e:	4621      	mov	r1, r4
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fee9 	bl	8007858 <_sbrk_r>
 8006a86:	1c43      	adds	r3, r0, #1
 8006a88:	d103      	bne.n	8006a92 <sbrk_aligned+0x26>
 8006a8a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a8e:	4620      	mov	r0, r4
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	1cc4      	adds	r4, r0, #3
 8006a94:	f024 0403 	bic.w	r4, r4, #3
 8006a98:	42a0      	cmp	r0, r4
 8006a9a:	d0f8      	beq.n	8006a8e <sbrk_aligned+0x22>
 8006a9c:	1a21      	subs	r1, r4, r0
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 feda 	bl	8007858 <_sbrk_r>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d1f2      	bne.n	8006a8e <sbrk_aligned+0x22>
 8006aa8:	e7ef      	b.n	8006a8a <sbrk_aligned+0x1e>
 8006aaa:	bf00      	nop
 8006aac:	200003e0 	.word	0x200003e0

08006ab0 <_malloc_r>:
 8006ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab4:	1ccd      	adds	r5, r1, #3
 8006ab6:	f025 0503 	bic.w	r5, r5, #3
 8006aba:	3508      	adds	r5, #8
 8006abc:	2d0c      	cmp	r5, #12
 8006abe:	bf38      	it	cc
 8006ac0:	250c      	movcc	r5, #12
 8006ac2:	2d00      	cmp	r5, #0
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	db01      	blt.n	8006acc <_malloc_r+0x1c>
 8006ac8:	42a9      	cmp	r1, r5
 8006aca:	d904      	bls.n	8006ad6 <_malloc_r+0x26>
 8006acc:	230c      	movs	r3, #12
 8006ace:	6033      	str	r3, [r6, #0]
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bac <_malloc_r+0xfc>
 8006ada:	f000 f869 	bl	8006bb0 <__malloc_lock>
 8006ade:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae2:	461c      	mov	r4, r3
 8006ae4:	bb44      	cbnz	r4, 8006b38 <_malloc_r+0x88>
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff ffbf 	bl	8006a6c <sbrk_aligned>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	4604      	mov	r4, r0
 8006af2:	d158      	bne.n	8006ba6 <_malloc_r+0xf6>
 8006af4:	f8d8 4000 	ldr.w	r4, [r8]
 8006af8:	4627      	mov	r7, r4
 8006afa:	2f00      	cmp	r7, #0
 8006afc:	d143      	bne.n	8006b86 <_malloc_r+0xd6>
 8006afe:	2c00      	cmp	r4, #0
 8006b00:	d04b      	beq.n	8006b9a <_malloc_r+0xea>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	4639      	mov	r1, r7
 8006b06:	4630      	mov	r0, r6
 8006b08:	eb04 0903 	add.w	r9, r4, r3
 8006b0c:	f000 fea4 	bl	8007858 <_sbrk_r>
 8006b10:	4581      	cmp	r9, r0
 8006b12:	d142      	bne.n	8006b9a <_malloc_r+0xea>
 8006b14:	6821      	ldr	r1, [r4, #0]
 8006b16:	1a6d      	subs	r5, r5, r1
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff ffa6 	bl	8006a6c <sbrk_aligned>
 8006b20:	3001      	adds	r0, #1
 8006b22:	d03a      	beq.n	8006b9a <_malloc_r+0xea>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	442b      	add	r3, r5
 8006b28:	6023      	str	r3, [r4, #0]
 8006b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	bb62      	cbnz	r2, 8006b8c <_malloc_r+0xdc>
 8006b32:	f8c8 7000 	str.w	r7, [r8]
 8006b36:	e00f      	b.n	8006b58 <_malloc_r+0xa8>
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	1b52      	subs	r2, r2, r5
 8006b3c:	d420      	bmi.n	8006b80 <_malloc_r+0xd0>
 8006b3e:	2a0b      	cmp	r2, #11
 8006b40:	d917      	bls.n	8006b72 <_malloc_r+0xc2>
 8006b42:	1961      	adds	r1, r4, r5
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	6025      	str	r5, [r4, #0]
 8006b48:	bf18      	it	ne
 8006b4a:	6059      	strne	r1, [r3, #4]
 8006b4c:	6863      	ldr	r3, [r4, #4]
 8006b4e:	bf08      	it	eq
 8006b50:	f8c8 1000 	streq.w	r1, [r8]
 8006b54:	5162      	str	r2, [r4, r5]
 8006b56:	604b      	str	r3, [r1, #4]
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 f82f 	bl	8006bbc <__malloc_unlock>
 8006b5e:	f104 000b 	add.w	r0, r4, #11
 8006b62:	1d23      	adds	r3, r4, #4
 8006b64:	f020 0007 	bic.w	r0, r0, #7
 8006b68:	1ac2      	subs	r2, r0, r3
 8006b6a:	bf1c      	itt	ne
 8006b6c:	1a1b      	subne	r3, r3, r0
 8006b6e:	50a3      	strne	r3, [r4, r2]
 8006b70:	e7af      	b.n	8006ad2 <_malloc_r+0x22>
 8006b72:	6862      	ldr	r2, [r4, #4]
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	bf0c      	ite	eq
 8006b78:	f8c8 2000 	streq.w	r2, [r8]
 8006b7c:	605a      	strne	r2, [r3, #4]
 8006b7e:	e7eb      	b.n	8006b58 <_malloc_r+0xa8>
 8006b80:	4623      	mov	r3, r4
 8006b82:	6864      	ldr	r4, [r4, #4]
 8006b84:	e7ae      	b.n	8006ae4 <_malloc_r+0x34>
 8006b86:	463c      	mov	r4, r7
 8006b88:	687f      	ldr	r7, [r7, #4]
 8006b8a:	e7b6      	b.n	8006afa <_malloc_r+0x4a>
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	d1fb      	bne.n	8006b8c <_malloc_r+0xdc>
 8006b94:	2300      	movs	r3, #0
 8006b96:	6053      	str	r3, [r2, #4]
 8006b98:	e7de      	b.n	8006b58 <_malloc_r+0xa8>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	6033      	str	r3, [r6, #0]
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f000 f80c 	bl	8006bbc <__malloc_unlock>
 8006ba4:	e794      	b.n	8006ad0 <_malloc_r+0x20>
 8006ba6:	6005      	str	r5, [r0, #0]
 8006ba8:	e7d6      	b.n	8006b58 <_malloc_r+0xa8>
 8006baa:	bf00      	nop
 8006bac:	200003e4 	.word	0x200003e4

08006bb0 <__malloc_lock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	@ (8006bb8 <__malloc_lock+0x8>)
 8006bb2:	f7ff b8b2 	b.w	8005d1a <__retarget_lock_acquire_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	200003dc 	.word	0x200003dc

08006bbc <__malloc_unlock>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	@ (8006bc4 <__malloc_unlock+0x8>)
 8006bbe:	f7ff b8ad 	b.w	8005d1c <__retarget_lock_release_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	200003dc 	.word	0x200003dc

08006bc8 <_Balloc>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	69c6      	ldr	r6, [r0, #28]
 8006bcc:	4604      	mov	r4, r0
 8006bce:	460d      	mov	r5, r1
 8006bd0:	b976      	cbnz	r6, 8006bf0 <_Balloc+0x28>
 8006bd2:	2010      	movs	r0, #16
 8006bd4:	f7ff ff42 	bl	8006a5c <malloc>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	61e0      	str	r0, [r4, #28]
 8006bdc:	b920      	cbnz	r0, 8006be8 <_Balloc+0x20>
 8006bde:	4b18      	ldr	r3, [pc, #96]	@ (8006c40 <_Balloc+0x78>)
 8006be0:	4818      	ldr	r0, [pc, #96]	@ (8006c44 <_Balloc+0x7c>)
 8006be2:	216b      	movs	r1, #107	@ 0x6b
 8006be4:	f7fe fa7c 	bl	80050e0 <__assert_func>
 8006be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bec:	6006      	str	r6, [r0, #0]
 8006bee:	60c6      	str	r6, [r0, #12]
 8006bf0:	69e6      	ldr	r6, [r4, #28]
 8006bf2:	68f3      	ldr	r3, [r6, #12]
 8006bf4:	b183      	cbz	r3, 8006c18 <_Balloc+0x50>
 8006bf6:	69e3      	ldr	r3, [r4, #28]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bfe:	b9b8      	cbnz	r0, 8006c30 <_Balloc+0x68>
 8006c00:	2101      	movs	r1, #1
 8006c02:	fa01 f605 	lsl.w	r6, r1, r5
 8006c06:	1d72      	adds	r2, r6, #5
 8006c08:	0092      	lsls	r2, r2, #2
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fe42 	bl	8007894 <_calloc_r>
 8006c10:	b160      	cbz	r0, 8006c2c <_Balloc+0x64>
 8006c12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c16:	e00e      	b.n	8006c36 <_Balloc+0x6e>
 8006c18:	2221      	movs	r2, #33	@ 0x21
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4620      	mov	r0, r4
 8006c1e:	f000 fe39 	bl	8007894 <_calloc_r>
 8006c22:	69e3      	ldr	r3, [r4, #28]
 8006c24:	60f0      	str	r0, [r6, #12]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e4      	bne.n	8006bf6 <_Balloc+0x2e>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	6802      	ldr	r2, [r0, #0]
 8006c32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c36:	2300      	movs	r3, #0
 8006c38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c3c:	e7f7      	b.n	8006c2e <_Balloc+0x66>
 8006c3e:	bf00      	nop
 8006c40:	08007b3d 	.word	0x08007b3d
 8006c44:	08007bbd 	.word	0x08007bbd

08006c48 <_Bfree>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	69c6      	ldr	r6, [r0, #28]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b976      	cbnz	r6, 8006c70 <_Bfree+0x28>
 8006c52:	2010      	movs	r0, #16
 8006c54:	f7ff ff02 	bl	8006a5c <malloc>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	61e8      	str	r0, [r5, #28]
 8006c5c:	b920      	cbnz	r0, 8006c68 <_Bfree+0x20>
 8006c5e:	4b09      	ldr	r3, [pc, #36]	@ (8006c84 <_Bfree+0x3c>)
 8006c60:	4809      	ldr	r0, [pc, #36]	@ (8006c88 <_Bfree+0x40>)
 8006c62:	218f      	movs	r1, #143	@ 0x8f
 8006c64:	f7fe fa3c 	bl	80050e0 <__assert_func>
 8006c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c6c:	6006      	str	r6, [r0, #0]
 8006c6e:	60c6      	str	r6, [r0, #12]
 8006c70:	b13c      	cbz	r4, 8006c82 <_Bfree+0x3a>
 8006c72:	69eb      	ldr	r3, [r5, #28]
 8006c74:	6862      	ldr	r2, [r4, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c7c:	6021      	str	r1, [r4, #0]
 8006c7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	08007b3d 	.word	0x08007b3d
 8006c88:	08007bbd 	.word	0x08007bbd

08006c8c <__multadd>:
 8006c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c90:	690d      	ldr	r5, [r1, #16]
 8006c92:	4607      	mov	r7, r0
 8006c94:	460c      	mov	r4, r1
 8006c96:	461e      	mov	r6, r3
 8006c98:	f101 0c14 	add.w	ip, r1, #20
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ca2:	b299      	uxth	r1, r3
 8006ca4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ca8:	0c1e      	lsrs	r6, r3, #16
 8006caa:	0c0b      	lsrs	r3, r1, #16
 8006cac:	fb02 3306 	mla	r3, r2, r6, r3
 8006cb0:	b289      	uxth	r1, r1
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006cb8:	4285      	cmp	r5, r0
 8006cba:	f84c 1b04 	str.w	r1, [ip], #4
 8006cbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cc2:	dcec      	bgt.n	8006c9e <__multadd+0x12>
 8006cc4:	b30e      	cbz	r6, 8006d0a <__multadd+0x7e>
 8006cc6:	68a3      	ldr	r3, [r4, #8]
 8006cc8:	42ab      	cmp	r3, r5
 8006cca:	dc19      	bgt.n	8006d00 <__multadd+0x74>
 8006ccc:	6861      	ldr	r1, [r4, #4]
 8006cce:	4638      	mov	r0, r7
 8006cd0:	3101      	adds	r1, #1
 8006cd2:	f7ff ff79 	bl	8006bc8 <_Balloc>
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	b928      	cbnz	r0, 8006ce6 <__multadd+0x5a>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <__multadd+0x84>)
 8006cde:	480d      	ldr	r0, [pc, #52]	@ (8006d14 <__multadd+0x88>)
 8006ce0:	21ba      	movs	r1, #186	@ 0xba
 8006ce2:	f7fe f9fd 	bl	80050e0 <__assert_func>
 8006ce6:	6922      	ldr	r2, [r4, #16]
 8006ce8:	3202      	adds	r2, #2
 8006cea:	f104 010c 	add.w	r1, r4, #12
 8006cee:	0092      	lsls	r2, r2, #2
 8006cf0:	300c      	adds	r0, #12
 8006cf2:	f000 fdc1 	bl	8007878 <memcpy>
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	f7ff ffa5 	bl	8006c48 <_Bfree>
 8006cfe:	4644      	mov	r4, r8
 8006d00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d04:	3501      	adds	r5, #1
 8006d06:	615e      	str	r6, [r3, #20]
 8006d08:	6125      	str	r5, [r4, #16]
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d10:	08007bac 	.word	0x08007bac
 8006d14:	08007bbd 	.word	0x08007bbd

08006d18 <__hi0bits>:
 8006d18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	bf36      	itet	cc
 8006d20:	0403      	lslcc	r3, r0, #16
 8006d22:	2000      	movcs	r0, #0
 8006d24:	2010      	movcc	r0, #16
 8006d26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d2a:	bf3c      	itt	cc
 8006d2c:	021b      	lslcc	r3, r3, #8
 8006d2e:	3008      	addcc	r0, #8
 8006d30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d34:	bf3c      	itt	cc
 8006d36:	011b      	lslcc	r3, r3, #4
 8006d38:	3004      	addcc	r0, #4
 8006d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3e:	bf3c      	itt	cc
 8006d40:	009b      	lslcc	r3, r3, #2
 8006d42:	3002      	addcc	r0, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	db05      	blt.n	8006d54 <__hi0bits+0x3c>
 8006d48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d4c:	f100 0001 	add.w	r0, r0, #1
 8006d50:	bf08      	it	eq
 8006d52:	2020      	moveq	r0, #32
 8006d54:	4770      	bx	lr

08006d56 <__lo0bits>:
 8006d56:	6803      	ldr	r3, [r0, #0]
 8006d58:	4602      	mov	r2, r0
 8006d5a:	f013 0007 	ands.w	r0, r3, #7
 8006d5e:	d00b      	beq.n	8006d78 <__lo0bits+0x22>
 8006d60:	07d9      	lsls	r1, r3, #31
 8006d62:	d421      	bmi.n	8006da8 <__lo0bits+0x52>
 8006d64:	0798      	lsls	r0, r3, #30
 8006d66:	bf49      	itett	mi
 8006d68:	085b      	lsrmi	r3, r3, #1
 8006d6a:	089b      	lsrpl	r3, r3, #2
 8006d6c:	2001      	movmi	r0, #1
 8006d6e:	6013      	strmi	r3, [r2, #0]
 8006d70:	bf5c      	itt	pl
 8006d72:	6013      	strpl	r3, [r2, #0]
 8006d74:	2002      	movpl	r0, #2
 8006d76:	4770      	bx	lr
 8006d78:	b299      	uxth	r1, r3
 8006d7a:	b909      	cbnz	r1, 8006d80 <__lo0bits+0x2a>
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	2010      	movs	r0, #16
 8006d80:	b2d9      	uxtb	r1, r3
 8006d82:	b909      	cbnz	r1, 8006d88 <__lo0bits+0x32>
 8006d84:	3008      	adds	r0, #8
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	0719      	lsls	r1, r3, #28
 8006d8a:	bf04      	itt	eq
 8006d8c:	091b      	lsreq	r3, r3, #4
 8006d8e:	3004      	addeq	r0, #4
 8006d90:	0799      	lsls	r1, r3, #30
 8006d92:	bf04      	itt	eq
 8006d94:	089b      	lsreq	r3, r3, #2
 8006d96:	3002      	addeq	r0, #2
 8006d98:	07d9      	lsls	r1, r3, #31
 8006d9a:	d403      	bmi.n	8006da4 <__lo0bits+0x4e>
 8006d9c:	085b      	lsrs	r3, r3, #1
 8006d9e:	f100 0001 	add.w	r0, r0, #1
 8006da2:	d003      	beq.n	8006dac <__lo0bits+0x56>
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4770      	bx	lr
 8006da8:	2000      	movs	r0, #0
 8006daa:	4770      	bx	lr
 8006dac:	2020      	movs	r0, #32
 8006dae:	4770      	bx	lr

08006db0 <__i2b>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	460c      	mov	r4, r1
 8006db4:	2101      	movs	r1, #1
 8006db6:	f7ff ff07 	bl	8006bc8 <_Balloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	b928      	cbnz	r0, 8006dca <__i2b+0x1a>
 8006dbe:	4b05      	ldr	r3, [pc, #20]	@ (8006dd4 <__i2b+0x24>)
 8006dc0:	4805      	ldr	r0, [pc, #20]	@ (8006dd8 <__i2b+0x28>)
 8006dc2:	f240 1145 	movw	r1, #325	@ 0x145
 8006dc6:	f7fe f98b 	bl	80050e0 <__assert_func>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6144      	str	r4, [r0, #20]
 8006dce:	6103      	str	r3, [r0, #16]
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08007bac 	.word	0x08007bac
 8006dd8:	08007bbd 	.word	0x08007bbd

08006ddc <__multiply>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	4614      	mov	r4, r2
 8006de2:	690a      	ldr	r2, [r1, #16]
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bfa8      	it	ge
 8006dea:	4623      	movge	r3, r4
 8006dec:	460f      	mov	r7, r1
 8006dee:	bfa4      	itt	ge
 8006df0:	460c      	movge	r4, r1
 8006df2:	461f      	movge	r7, r3
 8006df4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006df8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006dfc:	68a3      	ldr	r3, [r4, #8]
 8006dfe:	6861      	ldr	r1, [r4, #4]
 8006e00:	eb0a 0609 	add.w	r6, sl, r9
 8006e04:	42b3      	cmp	r3, r6
 8006e06:	b085      	sub	sp, #20
 8006e08:	bfb8      	it	lt
 8006e0a:	3101      	addlt	r1, #1
 8006e0c:	f7ff fedc 	bl	8006bc8 <_Balloc>
 8006e10:	b930      	cbnz	r0, 8006e20 <__multiply+0x44>
 8006e12:	4602      	mov	r2, r0
 8006e14:	4b44      	ldr	r3, [pc, #272]	@ (8006f28 <__multiply+0x14c>)
 8006e16:	4845      	ldr	r0, [pc, #276]	@ (8006f2c <__multiply+0x150>)
 8006e18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e1c:	f7fe f960 	bl	80050e0 <__assert_func>
 8006e20:	f100 0514 	add.w	r5, r0, #20
 8006e24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e28:	462b      	mov	r3, r5
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4543      	cmp	r3, r8
 8006e2e:	d321      	bcc.n	8006e74 <__multiply+0x98>
 8006e30:	f107 0114 	add.w	r1, r7, #20
 8006e34:	f104 0214 	add.w	r2, r4, #20
 8006e38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e40:	9302      	str	r3, [sp, #8]
 8006e42:	1b13      	subs	r3, r2, r4
 8006e44:	3b15      	subs	r3, #21
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	3304      	adds	r3, #4
 8006e4c:	f104 0715 	add.w	r7, r4, #21
 8006e50:	42ba      	cmp	r2, r7
 8006e52:	bf38      	it	cc
 8006e54:	2304      	movcc	r3, #4
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	9b02      	ldr	r3, [sp, #8]
 8006e5a:	9103      	str	r1, [sp, #12]
 8006e5c:	428b      	cmp	r3, r1
 8006e5e:	d80c      	bhi.n	8006e7a <__multiply+0x9e>
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	dd03      	ble.n	8006e6c <__multiply+0x90>
 8006e64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d05b      	beq.n	8006f24 <__multiply+0x148>
 8006e6c:	6106      	str	r6, [r0, #16]
 8006e6e:	b005      	add	sp, #20
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	f843 2b04 	str.w	r2, [r3], #4
 8006e78:	e7d8      	b.n	8006e2c <__multiply+0x50>
 8006e7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e7e:	f1ba 0f00 	cmp.w	sl, #0
 8006e82:	d024      	beq.n	8006ece <__multiply+0xf2>
 8006e84:	f104 0e14 	add.w	lr, r4, #20
 8006e88:	46a9      	mov	r9, r5
 8006e8a:	f04f 0c00 	mov.w	ip, #0
 8006e8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e92:	f8d9 3000 	ldr.w	r3, [r9]
 8006e96:	fa1f fb87 	uxth.w	fp, r7
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ea0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006ea4:	f8d9 7000 	ldr.w	r7, [r9]
 8006ea8:	4463      	add	r3, ip
 8006eaa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006eae:	fb0a c70b 	mla	r7, sl, fp, ip
 8006eb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ebc:	4572      	cmp	r2, lr
 8006ebe:	f849 3b04 	str.w	r3, [r9], #4
 8006ec2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ec6:	d8e2      	bhi.n	8006e8e <__multiply+0xb2>
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	f845 c003 	str.w	ip, [r5, r3]
 8006ece:	9b03      	ldr	r3, [sp, #12]
 8006ed0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ed4:	3104      	adds	r1, #4
 8006ed6:	f1b9 0f00 	cmp.w	r9, #0
 8006eda:	d021      	beq.n	8006f20 <__multiply+0x144>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	f104 0c14 	add.w	ip, r4, #20
 8006ee2:	46ae      	mov	lr, r5
 8006ee4:	f04f 0a00 	mov.w	sl, #0
 8006ee8:	f8bc b000 	ldrh.w	fp, [ip]
 8006eec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ef0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ef4:	4457      	add	r7, sl
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006efc:	f84e 3b04 	str.w	r3, [lr], #4
 8006f00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f08:	f8be 3000 	ldrh.w	r3, [lr]
 8006f0c:	fb09 330a 	mla	r3, r9, sl, r3
 8006f10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f14:	4562      	cmp	r2, ip
 8006f16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f1a:	d8e5      	bhi.n	8006ee8 <__multiply+0x10c>
 8006f1c:	9f01      	ldr	r7, [sp, #4]
 8006f1e:	51eb      	str	r3, [r5, r7]
 8006f20:	3504      	adds	r5, #4
 8006f22:	e799      	b.n	8006e58 <__multiply+0x7c>
 8006f24:	3e01      	subs	r6, #1
 8006f26:	e79b      	b.n	8006e60 <__multiply+0x84>
 8006f28:	08007bac 	.word	0x08007bac
 8006f2c:	08007bbd 	.word	0x08007bbd

08006f30 <__pow5mult>:
 8006f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f34:	4615      	mov	r5, r2
 8006f36:	f012 0203 	ands.w	r2, r2, #3
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	460e      	mov	r6, r1
 8006f3e:	d007      	beq.n	8006f50 <__pow5mult+0x20>
 8006f40:	4c25      	ldr	r4, [pc, #148]	@ (8006fd8 <__pow5mult+0xa8>)
 8006f42:	3a01      	subs	r2, #1
 8006f44:	2300      	movs	r3, #0
 8006f46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f4a:	f7ff fe9f 	bl	8006c8c <__multadd>
 8006f4e:	4606      	mov	r6, r0
 8006f50:	10ad      	asrs	r5, r5, #2
 8006f52:	d03d      	beq.n	8006fd0 <__pow5mult+0xa0>
 8006f54:	69fc      	ldr	r4, [r7, #28]
 8006f56:	b97c      	cbnz	r4, 8006f78 <__pow5mult+0x48>
 8006f58:	2010      	movs	r0, #16
 8006f5a:	f7ff fd7f 	bl	8006a5c <malloc>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	61f8      	str	r0, [r7, #28]
 8006f62:	b928      	cbnz	r0, 8006f70 <__pow5mult+0x40>
 8006f64:	4b1d      	ldr	r3, [pc, #116]	@ (8006fdc <__pow5mult+0xac>)
 8006f66:	481e      	ldr	r0, [pc, #120]	@ (8006fe0 <__pow5mult+0xb0>)
 8006f68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f6c:	f7fe f8b8 	bl	80050e0 <__assert_func>
 8006f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f74:	6004      	str	r4, [r0, #0]
 8006f76:	60c4      	str	r4, [r0, #12]
 8006f78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f80:	b94c      	cbnz	r4, 8006f96 <__pow5mult+0x66>
 8006f82:	f240 2171 	movw	r1, #625	@ 0x271
 8006f86:	4638      	mov	r0, r7
 8006f88:	f7ff ff12 	bl	8006db0 <__i2b>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f92:	4604      	mov	r4, r0
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	f04f 0900 	mov.w	r9, #0
 8006f9a:	07eb      	lsls	r3, r5, #31
 8006f9c:	d50a      	bpl.n	8006fb4 <__pow5mult+0x84>
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4622      	mov	r2, r4
 8006fa2:	4638      	mov	r0, r7
 8006fa4:	f7ff ff1a 	bl	8006ddc <__multiply>
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4680      	mov	r8, r0
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7ff fe4b 	bl	8006c48 <_Bfree>
 8006fb2:	4646      	mov	r6, r8
 8006fb4:	106d      	asrs	r5, r5, #1
 8006fb6:	d00b      	beq.n	8006fd0 <__pow5mult+0xa0>
 8006fb8:	6820      	ldr	r0, [r4, #0]
 8006fba:	b938      	cbnz	r0, 8006fcc <__pow5mult+0x9c>
 8006fbc:	4622      	mov	r2, r4
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f7ff ff0b 	bl	8006ddc <__multiply>
 8006fc6:	6020      	str	r0, [r4, #0]
 8006fc8:	f8c0 9000 	str.w	r9, [r0]
 8006fcc:	4604      	mov	r4, r0
 8006fce:	e7e4      	b.n	8006f9a <__pow5mult+0x6a>
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fd6:	bf00      	nop
 8006fd8:	08007c18 	.word	0x08007c18
 8006fdc:	08007b3d 	.word	0x08007b3d
 8006fe0:	08007bbd 	.word	0x08007bbd

08006fe4 <__lshift>:
 8006fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fe8:	460c      	mov	r4, r1
 8006fea:	6849      	ldr	r1, [r1, #4]
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ff2:	68a3      	ldr	r3, [r4, #8]
 8006ff4:	4607      	mov	r7, r0
 8006ff6:	4691      	mov	r9, r2
 8006ff8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ffc:	f108 0601 	add.w	r6, r8, #1
 8007000:	42b3      	cmp	r3, r6
 8007002:	db0b      	blt.n	800701c <__lshift+0x38>
 8007004:	4638      	mov	r0, r7
 8007006:	f7ff fddf 	bl	8006bc8 <_Balloc>
 800700a:	4605      	mov	r5, r0
 800700c:	b948      	cbnz	r0, 8007022 <__lshift+0x3e>
 800700e:	4602      	mov	r2, r0
 8007010:	4b28      	ldr	r3, [pc, #160]	@ (80070b4 <__lshift+0xd0>)
 8007012:	4829      	ldr	r0, [pc, #164]	@ (80070b8 <__lshift+0xd4>)
 8007014:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007018:	f7fe f862 	bl	80050e0 <__assert_func>
 800701c:	3101      	adds	r1, #1
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	e7ee      	b.n	8007000 <__lshift+0x1c>
 8007022:	2300      	movs	r3, #0
 8007024:	f100 0114 	add.w	r1, r0, #20
 8007028:	f100 0210 	add.w	r2, r0, #16
 800702c:	4618      	mov	r0, r3
 800702e:	4553      	cmp	r3, sl
 8007030:	db33      	blt.n	800709a <__lshift+0xb6>
 8007032:	6920      	ldr	r0, [r4, #16]
 8007034:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007038:	f104 0314 	add.w	r3, r4, #20
 800703c:	f019 091f 	ands.w	r9, r9, #31
 8007040:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007044:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007048:	d02b      	beq.n	80070a2 <__lshift+0xbe>
 800704a:	f1c9 0e20 	rsb	lr, r9, #32
 800704e:	468a      	mov	sl, r1
 8007050:	2200      	movs	r2, #0
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	fa00 f009 	lsl.w	r0, r0, r9
 8007058:	4310      	orrs	r0, r2
 800705a:	f84a 0b04 	str.w	r0, [sl], #4
 800705e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007062:	459c      	cmp	ip, r3
 8007064:	fa22 f20e 	lsr.w	r2, r2, lr
 8007068:	d8f3      	bhi.n	8007052 <__lshift+0x6e>
 800706a:	ebac 0304 	sub.w	r3, ip, r4
 800706e:	3b15      	subs	r3, #21
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	3304      	adds	r3, #4
 8007076:	f104 0015 	add.w	r0, r4, #21
 800707a:	4584      	cmp	ip, r0
 800707c:	bf38      	it	cc
 800707e:	2304      	movcc	r3, #4
 8007080:	50ca      	str	r2, [r1, r3]
 8007082:	b10a      	cbz	r2, 8007088 <__lshift+0xa4>
 8007084:	f108 0602 	add.w	r6, r8, #2
 8007088:	3e01      	subs	r6, #1
 800708a:	4638      	mov	r0, r7
 800708c:	612e      	str	r6, [r5, #16]
 800708e:	4621      	mov	r1, r4
 8007090:	f7ff fdda 	bl	8006c48 <_Bfree>
 8007094:	4628      	mov	r0, r5
 8007096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709a:	f842 0f04 	str.w	r0, [r2, #4]!
 800709e:	3301      	adds	r3, #1
 80070a0:	e7c5      	b.n	800702e <__lshift+0x4a>
 80070a2:	3904      	subs	r1, #4
 80070a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80070a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80070ac:	459c      	cmp	ip, r3
 80070ae:	d8f9      	bhi.n	80070a4 <__lshift+0xc0>
 80070b0:	e7ea      	b.n	8007088 <__lshift+0xa4>
 80070b2:	bf00      	nop
 80070b4:	08007bac 	.word	0x08007bac
 80070b8:	08007bbd 	.word	0x08007bbd

080070bc <__mcmp>:
 80070bc:	690a      	ldr	r2, [r1, #16]
 80070be:	4603      	mov	r3, r0
 80070c0:	6900      	ldr	r0, [r0, #16]
 80070c2:	1a80      	subs	r0, r0, r2
 80070c4:	b530      	push	{r4, r5, lr}
 80070c6:	d10e      	bne.n	80070e6 <__mcmp+0x2a>
 80070c8:	3314      	adds	r3, #20
 80070ca:	3114      	adds	r1, #20
 80070cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070dc:	4295      	cmp	r5, r2
 80070de:	d003      	beq.n	80070e8 <__mcmp+0x2c>
 80070e0:	d205      	bcs.n	80070ee <__mcmp+0x32>
 80070e2:	f04f 30ff 	mov.w	r0, #4294967295
 80070e6:	bd30      	pop	{r4, r5, pc}
 80070e8:	42a3      	cmp	r3, r4
 80070ea:	d3f3      	bcc.n	80070d4 <__mcmp+0x18>
 80070ec:	e7fb      	b.n	80070e6 <__mcmp+0x2a>
 80070ee:	2001      	movs	r0, #1
 80070f0:	e7f9      	b.n	80070e6 <__mcmp+0x2a>
	...

080070f4 <__mdiff>:
 80070f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f8:	4689      	mov	r9, r1
 80070fa:	4606      	mov	r6, r0
 80070fc:	4611      	mov	r1, r2
 80070fe:	4648      	mov	r0, r9
 8007100:	4614      	mov	r4, r2
 8007102:	f7ff ffdb 	bl	80070bc <__mcmp>
 8007106:	1e05      	subs	r5, r0, #0
 8007108:	d112      	bne.n	8007130 <__mdiff+0x3c>
 800710a:	4629      	mov	r1, r5
 800710c:	4630      	mov	r0, r6
 800710e:	f7ff fd5b 	bl	8006bc8 <_Balloc>
 8007112:	4602      	mov	r2, r0
 8007114:	b928      	cbnz	r0, 8007122 <__mdiff+0x2e>
 8007116:	4b3f      	ldr	r3, [pc, #252]	@ (8007214 <__mdiff+0x120>)
 8007118:	f240 2137 	movw	r1, #567	@ 0x237
 800711c:	483e      	ldr	r0, [pc, #248]	@ (8007218 <__mdiff+0x124>)
 800711e:	f7fd ffdf 	bl	80050e0 <__assert_func>
 8007122:	2301      	movs	r3, #1
 8007124:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007128:	4610      	mov	r0, r2
 800712a:	b003      	add	sp, #12
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	bfbc      	itt	lt
 8007132:	464b      	movlt	r3, r9
 8007134:	46a1      	movlt	r9, r4
 8007136:	4630      	mov	r0, r6
 8007138:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800713c:	bfba      	itte	lt
 800713e:	461c      	movlt	r4, r3
 8007140:	2501      	movlt	r5, #1
 8007142:	2500      	movge	r5, #0
 8007144:	f7ff fd40 	bl	8006bc8 <_Balloc>
 8007148:	4602      	mov	r2, r0
 800714a:	b918      	cbnz	r0, 8007154 <__mdiff+0x60>
 800714c:	4b31      	ldr	r3, [pc, #196]	@ (8007214 <__mdiff+0x120>)
 800714e:	f240 2145 	movw	r1, #581	@ 0x245
 8007152:	e7e3      	b.n	800711c <__mdiff+0x28>
 8007154:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007158:	6926      	ldr	r6, [r4, #16]
 800715a:	60c5      	str	r5, [r0, #12]
 800715c:	f109 0310 	add.w	r3, r9, #16
 8007160:	f109 0514 	add.w	r5, r9, #20
 8007164:	f104 0e14 	add.w	lr, r4, #20
 8007168:	f100 0b14 	add.w	fp, r0, #20
 800716c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007170:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	46d9      	mov	r9, fp
 8007178:	f04f 0c00 	mov.w	ip, #0
 800717c:	9b01      	ldr	r3, [sp, #4]
 800717e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007182:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	fa1f f38a 	uxth.w	r3, sl
 800718c:	4619      	mov	r1, r3
 800718e:	b283      	uxth	r3, r0
 8007190:	1acb      	subs	r3, r1, r3
 8007192:	0c00      	lsrs	r0, r0, #16
 8007194:	4463      	add	r3, ip
 8007196:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800719a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800719e:	b29b      	uxth	r3, r3
 80071a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80071a4:	4576      	cmp	r6, lr
 80071a6:	f849 3b04 	str.w	r3, [r9], #4
 80071aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071ae:	d8e5      	bhi.n	800717c <__mdiff+0x88>
 80071b0:	1b33      	subs	r3, r6, r4
 80071b2:	3b15      	subs	r3, #21
 80071b4:	f023 0303 	bic.w	r3, r3, #3
 80071b8:	3415      	adds	r4, #21
 80071ba:	3304      	adds	r3, #4
 80071bc:	42a6      	cmp	r6, r4
 80071be:	bf38      	it	cc
 80071c0:	2304      	movcc	r3, #4
 80071c2:	441d      	add	r5, r3
 80071c4:	445b      	add	r3, fp
 80071c6:	461e      	mov	r6, r3
 80071c8:	462c      	mov	r4, r5
 80071ca:	4544      	cmp	r4, r8
 80071cc:	d30e      	bcc.n	80071ec <__mdiff+0xf8>
 80071ce:	f108 0103 	add.w	r1, r8, #3
 80071d2:	1b49      	subs	r1, r1, r5
 80071d4:	f021 0103 	bic.w	r1, r1, #3
 80071d8:	3d03      	subs	r5, #3
 80071da:	45a8      	cmp	r8, r5
 80071dc:	bf38      	it	cc
 80071de:	2100      	movcc	r1, #0
 80071e0:	440b      	add	r3, r1
 80071e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071e6:	b191      	cbz	r1, 800720e <__mdiff+0x11a>
 80071e8:	6117      	str	r7, [r2, #16]
 80071ea:	e79d      	b.n	8007128 <__mdiff+0x34>
 80071ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80071f0:	46e6      	mov	lr, ip
 80071f2:	0c08      	lsrs	r0, r1, #16
 80071f4:	fa1c fc81 	uxtah	ip, ip, r1
 80071f8:	4471      	add	r1, lr
 80071fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071fe:	b289      	uxth	r1, r1
 8007200:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007204:	f846 1b04 	str.w	r1, [r6], #4
 8007208:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800720c:	e7dd      	b.n	80071ca <__mdiff+0xd6>
 800720e:	3f01      	subs	r7, #1
 8007210:	e7e7      	b.n	80071e2 <__mdiff+0xee>
 8007212:	bf00      	nop
 8007214:	08007bac 	.word	0x08007bac
 8007218:	08007bbd 	.word	0x08007bbd

0800721c <__d2b>:
 800721c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007220:	460f      	mov	r7, r1
 8007222:	2101      	movs	r1, #1
 8007224:	ec59 8b10 	vmov	r8, r9, d0
 8007228:	4616      	mov	r6, r2
 800722a:	f7ff fccd 	bl	8006bc8 <_Balloc>
 800722e:	4604      	mov	r4, r0
 8007230:	b930      	cbnz	r0, 8007240 <__d2b+0x24>
 8007232:	4602      	mov	r2, r0
 8007234:	4b23      	ldr	r3, [pc, #140]	@ (80072c4 <__d2b+0xa8>)
 8007236:	4824      	ldr	r0, [pc, #144]	@ (80072c8 <__d2b+0xac>)
 8007238:	f240 310f 	movw	r1, #783	@ 0x30f
 800723c:	f7fd ff50 	bl	80050e0 <__assert_func>
 8007240:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007244:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007248:	b10d      	cbz	r5, 800724e <__d2b+0x32>
 800724a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	f1b8 0300 	subs.w	r3, r8, #0
 8007254:	d023      	beq.n	800729e <__d2b+0x82>
 8007256:	4668      	mov	r0, sp
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	f7ff fd7c 	bl	8006d56 <__lo0bits>
 800725e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007262:	b1d0      	cbz	r0, 800729a <__d2b+0x7e>
 8007264:	f1c0 0320 	rsb	r3, r0, #32
 8007268:	fa02 f303 	lsl.w	r3, r2, r3
 800726c:	430b      	orrs	r3, r1
 800726e:	40c2      	lsrs	r2, r0
 8007270:	6163      	str	r3, [r4, #20]
 8007272:	9201      	str	r2, [sp, #4]
 8007274:	9b01      	ldr	r3, [sp, #4]
 8007276:	61a3      	str	r3, [r4, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bf0c      	ite	eq
 800727c:	2201      	moveq	r2, #1
 800727e:	2202      	movne	r2, #2
 8007280:	6122      	str	r2, [r4, #16]
 8007282:	b1a5      	cbz	r5, 80072ae <__d2b+0x92>
 8007284:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007288:	4405      	add	r5, r0
 800728a:	603d      	str	r5, [r7, #0]
 800728c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007290:	6030      	str	r0, [r6, #0]
 8007292:	4620      	mov	r0, r4
 8007294:	b003      	add	sp, #12
 8007296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800729a:	6161      	str	r1, [r4, #20]
 800729c:	e7ea      	b.n	8007274 <__d2b+0x58>
 800729e:	a801      	add	r0, sp, #4
 80072a0:	f7ff fd59 	bl	8006d56 <__lo0bits>
 80072a4:	9b01      	ldr	r3, [sp, #4]
 80072a6:	6163      	str	r3, [r4, #20]
 80072a8:	3020      	adds	r0, #32
 80072aa:	2201      	movs	r2, #1
 80072ac:	e7e8      	b.n	8007280 <__d2b+0x64>
 80072ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80072b6:	6038      	str	r0, [r7, #0]
 80072b8:	6918      	ldr	r0, [r3, #16]
 80072ba:	f7ff fd2d 	bl	8006d18 <__hi0bits>
 80072be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072c2:	e7e5      	b.n	8007290 <__d2b+0x74>
 80072c4:	08007bac 	.word	0x08007bac
 80072c8:	08007bbd 	.word	0x08007bbd

080072cc <__sfputc_r>:
 80072cc:	6893      	ldr	r3, [r2, #8]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	b410      	push	{r4}
 80072d4:	6093      	str	r3, [r2, #8]
 80072d6:	da08      	bge.n	80072ea <__sfputc_r+0x1e>
 80072d8:	6994      	ldr	r4, [r2, #24]
 80072da:	42a3      	cmp	r3, r4
 80072dc:	db01      	blt.n	80072e2 <__sfputc_r+0x16>
 80072de:	290a      	cmp	r1, #10
 80072e0:	d103      	bne.n	80072ea <__sfputc_r+0x1e>
 80072e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072e6:	f000 b9df 	b.w	80076a8 <__swbuf_r>
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	1c58      	adds	r0, r3, #1
 80072ee:	6010      	str	r0, [r2, #0]
 80072f0:	7019      	strb	r1, [r3, #0]
 80072f2:	4608      	mov	r0, r1
 80072f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <__sfputs_r>:
 80072fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fc:	4606      	mov	r6, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	4614      	mov	r4, r2
 8007302:	18d5      	adds	r5, r2, r3
 8007304:	42ac      	cmp	r4, r5
 8007306:	d101      	bne.n	800730c <__sfputs_r+0x12>
 8007308:	2000      	movs	r0, #0
 800730a:	e007      	b.n	800731c <__sfputs_r+0x22>
 800730c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007310:	463a      	mov	r2, r7
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ffda 	bl	80072cc <__sfputc_r>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d1f3      	bne.n	8007304 <__sfputs_r+0xa>
 800731c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007320 <_vfiprintf_r>:
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	460d      	mov	r5, r1
 8007326:	b09d      	sub	sp, #116	@ 0x74
 8007328:	4614      	mov	r4, r2
 800732a:	4698      	mov	r8, r3
 800732c:	4606      	mov	r6, r0
 800732e:	b118      	cbz	r0, 8007338 <_vfiprintf_r+0x18>
 8007330:	6a03      	ldr	r3, [r0, #32]
 8007332:	b90b      	cbnz	r3, 8007338 <_vfiprintf_r+0x18>
 8007334:	f7fe fbd6 	bl	8005ae4 <__sinit>
 8007338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800733a:	07d9      	lsls	r1, r3, #31
 800733c:	d405      	bmi.n	800734a <_vfiprintf_r+0x2a>
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	059a      	lsls	r2, r3, #22
 8007342:	d402      	bmi.n	800734a <_vfiprintf_r+0x2a>
 8007344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007346:	f7fe fce8 	bl	8005d1a <__retarget_lock_acquire_recursive>
 800734a:	89ab      	ldrh	r3, [r5, #12]
 800734c:	071b      	lsls	r3, r3, #28
 800734e:	d501      	bpl.n	8007354 <_vfiprintf_r+0x34>
 8007350:	692b      	ldr	r3, [r5, #16]
 8007352:	b99b      	cbnz	r3, 800737c <_vfiprintf_r+0x5c>
 8007354:	4629      	mov	r1, r5
 8007356:	4630      	mov	r0, r6
 8007358:	f000 f9e4 	bl	8007724 <__swsetup_r>
 800735c:	b170      	cbz	r0, 800737c <_vfiprintf_r+0x5c>
 800735e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007360:	07dc      	lsls	r4, r3, #31
 8007362:	d504      	bpl.n	800736e <_vfiprintf_r+0x4e>
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	b01d      	add	sp, #116	@ 0x74
 800736a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800736e:	89ab      	ldrh	r3, [r5, #12]
 8007370:	0598      	lsls	r0, r3, #22
 8007372:	d4f7      	bmi.n	8007364 <_vfiprintf_r+0x44>
 8007374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007376:	f7fe fcd1 	bl	8005d1c <__retarget_lock_release_recursive>
 800737a:	e7f3      	b.n	8007364 <_vfiprintf_r+0x44>
 800737c:	2300      	movs	r3, #0
 800737e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007380:	2320      	movs	r3, #32
 8007382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007386:	f8cd 800c 	str.w	r8, [sp, #12]
 800738a:	2330      	movs	r3, #48	@ 0x30
 800738c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800753c <_vfiprintf_r+0x21c>
 8007390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007394:	f04f 0901 	mov.w	r9, #1
 8007398:	4623      	mov	r3, r4
 800739a:	469a      	mov	sl, r3
 800739c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073a0:	b10a      	cbz	r2, 80073a6 <_vfiprintf_r+0x86>
 80073a2:	2a25      	cmp	r2, #37	@ 0x25
 80073a4:	d1f9      	bne.n	800739a <_vfiprintf_r+0x7a>
 80073a6:	ebba 0b04 	subs.w	fp, sl, r4
 80073aa:	d00b      	beq.n	80073c4 <_vfiprintf_r+0xa4>
 80073ac:	465b      	mov	r3, fp
 80073ae:	4622      	mov	r2, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	4630      	mov	r0, r6
 80073b4:	f7ff ffa1 	bl	80072fa <__sfputs_r>
 80073b8:	3001      	adds	r0, #1
 80073ba:	f000 80a7 	beq.w	800750c <_vfiprintf_r+0x1ec>
 80073be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073c0:	445a      	add	r2, fp
 80073c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80073c4:	f89a 3000 	ldrb.w	r3, [sl]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 809f 	beq.w	800750c <_vfiprintf_r+0x1ec>
 80073ce:	2300      	movs	r3, #0
 80073d0:	f04f 32ff 	mov.w	r2, #4294967295
 80073d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073d8:	f10a 0a01 	add.w	sl, sl, #1
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	9307      	str	r3, [sp, #28]
 80073e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80073e6:	4654      	mov	r4, sl
 80073e8:	2205      	movs	r2, #5
 80073ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ee:	4853      	ldr	r0, [pc, #332]	@ (800753c <_vfiprintf_r+0x21c>)
 80073f0:	f7f8 fef6 	bl	80001e0 <memchr>
 80073f4:	9a04      	ldr	r2, [sp, #16]
 80073f6:	b9d8      	cbnz	r0, 8007430 <_vfiprintf_r+0x110>
 80073f8:	06d1      	lsls	r1, r2, #27
 80073fa:	bf44      	itt	mi
 80073fc:	2320      	movmi	r3, #32
 80073fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007402:	0713      	lsls	r3, r2, #28
 8007404:	bf44      	itt	mi
 8007406:	232b      	movmi	r3, #43	@ 0x2b
 8007408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800740c:	f89a 3000 	ldrb.w	r3, [sl]
 8007410:	2b2a      	cmp	r3, #42	@ 0x2a
 8007412:	d015      	beq.n	8007440 <_vfiprintf_r+0x120>
 8007414:	9a07      	ldr	r2, [sp, #28]
 8007416:	4654      	mov	r4, sl
 8007418:	2000      	movs	r0, #0
 800741a:	f04f 0c0a 	mov.w	ip, #10
 800741e:	4621      	mov	r1, r4
 8007420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007424:	3b30      	subs	r3, #48	@ 0x30
 8007426:	2b09      	cmp	r3, #9
 8007428:	d94b      	bls.n	80074c2 <_vfiprintf_r+0x1a2>
 800742a:	b1b0      	cbz	r0, 800745a <_vfiprintf_r+0x13a>
 800742c:	9207      	str	r2, [sp, #28]
 800742e:	e014      	b.n	800745a <_vfiprintf_r+0x13a>
 8007430:	eba0 0308 	sub.w	r3, r0, r8
 8007434:	fa09 f303 	lsl.w	r3, r9, r3
 8007438:	4313      	orrs	r3, r2
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	46a2      	mov	sl, r4
 800743e:	e7d2      	b.n	80073e6 <_vfiprintf_r+0xc6>
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	1d19      	adds	r1, r3, #4
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	9103      	str	r1, [sp, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	bfbb      	ittet	lt
 800744c:	425b      	neglt	r3, r3
 800744e:	f042 0202 	orrlt.w	r2, r2, #2
 8007452:	9307      	strge	r3, [sp, #28]
 8007454:	9307      	strlt	r3, [sp, #28]
 8007456:	bfb8      	it	lt
 8007458:	9204      	strlt	r2, [sp, #16]
 800745a:	7823      	ldrb	r3, [r4, #0]
 800745c:	2b2e      	cmp	r3, #46	@ 0x2e
 800745e:	d10a      	bne.n	8007476 <_vfiprintf_r+0x156>
 8007460:	7863      	ldrb	r3, [r4, #1]
 8007462:	2b2a      	cmp	r3, #42	@ 0x2a
 8007464:	d132      	bne.n	80074cc <_vfiprintf_r+0x1ac>
 8007466:	9b03      	ldr	r3, [sp, #12]
 8007468:	1d1a      	adds	r2, r3, #4
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	9203      	str	r2, [sp, #12]
 800746e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007472:	3402      	adds	r4, #2
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800754c <_vfiprintf_r+0x22c>
 800747a:	7821      	ldrb	r1, [r4, #0]
 800747c:	2203      	movs	r2, #3
 800747e:	4650      	mov	r0, sl
 8007480:	f7f8 feae 	bl	80001e0 <memchr>
 8007484:	b138      	cbz	r0, 8007496 <_vfiprintf_r+0x176>
 8007486:	9b04      	ldr	r3, [sp, #16]
 8007488:	eba0 000a 	sub.w	r0, r0, sl
 800748c:	2240      	movs	r2, #64	@ 0x40
 800748e:	4082      	lsls	r2, r0
 8007490:	4313      	orrs	r3, r2
 8007492:	3401      	adds	r4, #1
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4829      	ldr	r0, [pc, #164]	@ (8007540 <_vfiprintf_r+0x220>)
 800749c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074a0:	2206      	movs	r2, #6
 80074a2:	f7f8 fe9d 	bl	80001e0 <memchr>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d03f      	beq.n	800752a <_vfiprintf_r+0x20a>
 80074aa:	4b26      	ldr	r3, [pc, #152]	@ (8007544 <_vfiprintf_r+0x224>)
 80074ac:	bb1b      	cbnz	r3, 80074f6 <_vfiprintf_r+0x1d6>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	3307      	adds	r3, #7
 80074b2:	f023 0307 	bic.w	r3, r3, #7
 80074b6:	3308      	adds	r3, #8
 80074b8:	9303      	str	r3, [sp, #12]
 80074ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074bc:	443b      	add	r3, r7
 80074be:	9309      	str	r3, [sp, #36]	@ 0x24
 80074c0:	e76a      	b.n	8007398 <_vfiprintf_r+0x78>
 80074c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074c6:	460c      	mov	r4, r1
 80074c8:	2001      	movs	r0, #1
 80074ca:	e7a8      	b.n	800741e <_vfiprintf_r+0xfe>
 80074cc:	2300      	movs	r3, #0
 80074ce:	3401      	adds	r4, #1
 80074d0:	9305      	str	r3, [sp, #20]
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 0c0a 	mov.w	ip, #10
 80074d8:	4620      	mov	r0, r4
 80074da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074de:	3a30      	subs	r2, #48	@ 0x30
 80074e0:	2a09      	cmp	r2, #9
 80074e2:	d903      	bls.n	80074ec <_vfiprintf_r+0x1cc>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d0c6      	beq.n	8007476 <_vfiprintf_r+0x156>
 80074e8:	9105      	str	r1, [sp, #20]
 80074ea:	e7c4      	b.n	8007476 <_vfiprintf_r+0x156>
 80074ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80074f0:	4604      	mov	r4, r0
 80074f2:	2301      	movs	r3, #1
 80074f4:	e7f0      	b.n	80074d8 <_vfiprintf_r+0x1b8>
 80074f6:	ab03      	add	r3, sp, #12
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	462a      	mov	r2, r5
 80074fc:	4b12      	ldr	r3, [pc, #72]	@ (8007548 <_vfiprintf_r+0x228>)
 80074fe:	a904      	add	r1, sp, #16
 8007500:	4630      	mov	r0, r6
 8007502:	f7fd feab 	bl	800525c <_printf_float>
 8007506:	4607      	mov	r7, r0
 8007508:	1c78      	adds	r0, r7, #1
 800750a:	d1d6      	bne.n	80074ba <_vfiprintf_r+0x19a>
 800750c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800750e:	07d9      	lsls	r1, r3, #31
 8007510:	d405      	bmi.n	800751e <_vfiprintf_r+0x1fe>
 8007512:	89ab      	ldrh	r3, [r5, #12]
 8007514:	059a      	lsls	r2, r3, #22
 8007516:	d402      	bmi.n	800751e <_vfiprintf_r+0x1fe>
 8007518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800751a:	f7fe fbff 	bl	8005d1c <__retarget_lock_release_recursive>
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	065b      	lsls	r3, r3, #25
 8007522:	f53f af1f 	bmi.w	8007364 <_vfiprintf_r+0x44>
 8007526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007528:	e71e      	b.n	8007368 <_vfiprintf_r+0x48>
 800752a:	ab03      	add	r3, sp, #12
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	462a      	mov	r2, r5
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <_vfiprintf_r+0x228>)
 8007532:	a904      	add	r1, sp, #16
 8007534:	4630      	mov	r0, r6
 8007536:	f7fe f929 	bl	800578c <_printf_i>
 800753a:	e7e4      	b.n	8007506 <_vfiprintf_r+0x1e6>
 800753c:	08007d18 	.word	0x08007d18
 8007540:	08007d22 	.word	0x08007d22
 8007544:	0800525d 	.word	0x0800525d
 8007548:	080072fb 	.word	0x080072fb
 800754c:	08007d1e 	.word	0x08007d1e

08007550 <__sflush_r>:
 8007550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007558:	0716      	lsls	r6, r2, #28
 800755a:	4605      	mov	r5, r0
 800755c:	460c      	mov	r4, r1
 800755e:	d454      	bmi.n	800760a <__sflush_r+0xba>
 8007560:	684b      	ldr	r3, [r1, #4]
 8007562:	2b00      	cmp	r3, #0
 8007564:	dc02      	bgt.n	800756c <__sflush_r+0x1c>
 8007566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	dd48      	ble.n	80075fe <__sflush_r+0xae>
 800756c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800756e:	2e00      	cmp	r6, #0
 8007570:	d045      	beq.n	80075fe <__sflush_r+0xae>
 8007572:	2300      	movs	r3, #0
 8007574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007578:	682f      	ldr	r7, [r5, #0]
 800757a:	6a21      	ldr	r1, [r4, #32]
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	d030      	beq.n	80075e2 <__sflush_r+0x92>
 8007580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007582:	89a3      	ldrh	r3, [r4, #12]
 8007584:	0759      	lsls	r1, r3, #29
 8007586:	d505      	bpl.n	8007594 <__sflush_r+0x44>
 8007588:	6863      	ldr	r3, [r4, #4]
 800758a:	1ad2      	subs	r2, r2, r3
 800758c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800758e:	b10b      	cbz	r3, 8007594 <__sflush_r+0x44>
 8007590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007592:	1ad2      	subs	r2, r2, r3
 8007594:	2300      	movs	r3, #0
 8007596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007598:	6a21      	ldr	r1, [r4, #32]
 800759a:	4628      	mov	r0, r5
 800759c:	47b0      	blx	r6
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	89a3      	ldrh	r3, [r4, #12]
 80075a2:	d106      	bne.n	80075b2 <__sflush_r+0x62>
 80075a4:	6829      	ldr	r1, [r5, #0]
 80075a6:	291d      	cmp	r1, #29
 80075a8:	d82b      	bhi.n	8007602 <__sflush_r+0xb2>
 80075aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007654 <__sflush_r+0x104>)
 80075ac:	410a      	asrs	r2, r1
 80075ae:	07d6      	lsls	r6, r2, #31
 80075b0:	d427      	bmi.n	8007602 <__sflush_r+0xb2>
 80075b2:	2200      	movs	r2, #0
 80075b4:	6062      	str	r2, [r4, #4]
 80075b6:	04d9      	lsls	r1, r3, #19
 80075b8:	6922      	ldr	r2, [r4, #16]
 80075ba:	6022      	str	r2, [r4, #0]
 80075bc:	d504      	bpl.n	80075c8 <__sflush_r+0x78>
 80075be:	1c42      	adds	r2, r0, #1
 80075c0:	d101      	bne.n	80075c6 <__sflush_r+0x76>
 80075c2:	682b      	ldr	r3, [r5, #0]
 80075c4:	b903      	cbnz	r3, 80075c8 <__sflush_r+0x78>
 80075c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80075c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075ca:	602f      	str	r7, [r5, #0]
 80075cc:	b1b9      	cbz	r1, 80075fe <__sflush_r+0xae>
 80075ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075d2:	4299      	cmp	r1, r3
 80075d4:	d002      	beq.n	80075dc <__sflush_r+0x8c>
 80075d6:	4628      	mov	r0, r5
 80075d8:	f7ff f9f6 	bl	80069c8 <_free_r>
 80075dc:	2300      	movs	r3, #0
 80075de:	6363      	str	r3, [r4, #52]	@ 0x34
 80075e0:	e00d      	b.n	80075fe <__sflush_r+0xae>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4628      	mov	r0, r5
 80075e6:	47b0      	blx	r6
 80075e8:	4602      	mov	r2, r0
 80075ea:	1c50      	adds	r0, r2, #1
 80075ec:	d1c9      	bne.n	8007582 <__sflush_r+0x32>
 80075ee:	682b      	ldr	r3, [r5, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d0c6      	beq.n	8007582 <__sflush_r+0x32>
 80075f4:	2b1d      	cmp	r3, #29
 80075f6:	d001      	beq.n	80075fc <__sflush_r+0xac>
 80075f8:	2b16      	cmp	r3, #22
 80075fa:	d11e      	bne.n	800763a <__sflush_r+0xea>
 80075fc:	602f      	str	r7, [r5, #0]
 80075fe:	2000      	movs	r0, #0
 8007600:	e022      	b.n	8007648 <__sflush_r+0xf8>
 8007602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007606:	b21b      	sxth	r3, r3
 8007608:	e01b      	b.n	8007642 <__sflush_r+0xf2>
 800760a:	690f      	ldr	r7, [r1, #16]
 800760c:	2f00      	cmp	r7, #0
 800760e:	d0f6      	beq.n	80075fe <__sflush_r+0xae>
 8007610:	0793      	lsls	r3, r2, #30
 8007612:	680e      	ldr	r6, [r1, #0]
 8007614:	bf08      	it	eq
 8007616:	694b      	ldreq	r3, [r1, #20]
 8007618:	600f      	str	r7, [r1, #0]
 800761a:	bf18      	it	ne
 800761c:	2300      	movne	r3, #0
 800761e:	eba6 0807 	sub.w	r8, r6, r7
 8007622:	608b      	str	r3, [r1, #8]
 8007624:	f1b8 0f00 	cmp.w	r8, #0
 8007628:	dde9      	ble.n	80075fe <__sflush_r+0xae>
 800762a:	6a21      	ldr	r1, [r4, #32]
 800762c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800762e:	4643      	mov	r3, r8
 8007630:	463a      	mov	r2, r7
 8007632:	4628      	mov	r0, r5
 8007634:	47b0      	blx	r6
 8007636:	2800      	cmp	r0, #0
 8007638:	dc08      	bgt.n	800764c <__sflush_r+0xfc>
 800763a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800763e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007642:	81a3      	strh	r3, [r4, #12]
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764c:	4407      	add	r7, r0
 800764e:	eba8 0800 	sub.w	r8, r8, r0
 8007652:	e7e7      	b.n	8007624 <__sflush_r+0xd4>
 8007654:	dfbffffe 	.word	0xdfbffffe

08007658 <_fflush_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	690b      	ldr	r3, [r1, #16]
 800765c:	4605      	mov	r5, r0
 800765e:	460c      	mov	r4, r1
 8007660:	b913      	cbnz	r3, 8007668 <_fflush_r+0x10>
 8007662:	2500      	movs	r5, #0
 8007664:	4628      	mov	r0, r5
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	b118      	cbz	r0, 8007672 <_fflush_r+0x1a>
 800766a:	6a03      	ldr	r3, [r0, #32]
 800766c:	b90b      	cbnz	r3, 8007672 <_fflush_r+0x1a>
 800766e:	f7fe fa39 	bl	8005ae4 <__sinit>
 8007672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0f3      	beq.n	8007662 <_fflush_r+0xa>
 800767a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800767c:	07d0      	lsls	r0, r2, #31
 800767e:	d404      	bmi.n	800768a <_fflush_r+0x32>
 8007680:	0599      	lsls	r1, r3, #22
 8007682:	d402      	bmi.n	800768a <_fflush_r+0x32>
 8007684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007686:	f7fe fb48 	bl	8005d1a <__retarget_lock_acquire_recursive>
 800768a:	4628      	mov	r0, r5
 800768c:	4621      	mov	r1, r4
 800768e:	f7ff ff5f 	bl	8007550 <__sflush_r>
 8007692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007694:	07da      	lsls	r2, r3, #31
 8007696:	4605      	mov	r5, r0
 8007698:	d4e4      	bmi.n	8007664 <_fflush_r+0xc>
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	059b      	lsls	r3, r3, #22
 800769e:	d4e1      	bmi.n	8007664 <_fflush_r+0xc>
 80076a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076a2:	f7fe fb3b 	bl	8005d1c <__retarget_lock_release_recursive>
 80076a6:	e7dd      	b.n	8007664 <_fflush_r+0xc>

080076a8 <__swbuf_r>:
 80076a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076aa:	460e      	mov	r6, r1
 80076ac:	4614      	mov	r4, r2
 80076ae:	4605      	mov	r5, r0
 80076b0:	b118      	cbz	r0, 80076ba <__swbuf_r+0x12>
 80076b2:	6a03      	ldr	r3, [r0, #32]
 80076b4:	b90b      	cbnz	r3, 80076ba <__swbuf_r+0x12>
 80076b6:	f7fe fa15 	bl	8005ae4 <__sinit>
 80076ba:	69a3      	ldr	r3, [r4, #24]
 80076bc:	60a3      	str	r3, [r4, #8]
 80076be:	89a3      	ldrh	r3, [r4, #12]
 80076c0:	071a      	lsls	r2, r3, #28
 80076c2:	d501      	bpl.n	80076c8 <__swbuf_r+0x20>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	b943      	cbnz	r3, 80076da <__swbuf_r+0x32>
 80076c8:	4621      	mov	r1, r4
 80076ca:	4628      	mov	r0, r5
 80076cc:	f000 f82a 	bl	8007724 <__swsetup_r>
 80076d0:	b118      	cbz	r0, 80076da <__swbuf_r+0x32>
 80076d2:	f04f 37ff 	mov.w	r7, #4294967295
 80076d6:	4638      	mov	r0, r7
 80076d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	1a98      	subs	r0, r3, r2
 80076e0:	6963      	ldr	r3, [r4, #20]
 80076e2:	b2f6      	uxtb	r6, r6
 80076e4:	4283      	cmp	r3, r0
 80076e6:	4637      	mov	r7, r6
 80076e8:	dc05      	bgt.n	80076f6 <__swbuf_r+0x4e>
 80076ea:	4621      	mov	r1, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	f7ff ffb3 	bl	8007658 <_fflush_r>
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1ed      	bne.n	80076d2 <__swbuf_r+0x2a>
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	3b01      	subs	r3, #1
 80076fa:	60a3      	str	r3, [r4, #8]
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	6022      	str	r2, [r4, #0]
 8007702:	701e      	strb	r6, [r3, #0]
 8007704:	6962      	ldr	r2, [r4, #20]
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	429a      	cmp	r2, r3
 800770a:	d004      	beq.n	8007716 <__swbuf_r+0x6e>
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	07db      	lsls	r3, r3, #31
 8007710:	d5e1      	bpl.n	80076d6 <__swbuf_r+0x2e>
 8007712:	2e0a      	cmp	r6, #10
 8007714:	d1df      	bne.n	80076d6 <__swbuf_r+0x2e>
 8007716:	4621      	mov	r1, r4
 8007718:	4628      	mov	r0, r5
 800771a:	f7ff ff9d 	bl	8007658 <_fflush_r>
 800771e:	2800      	cmp	r0, #0
 8007720:	d0d9      	beq.n	80076d6 <__swbuf_r+0x2e>
 8007722:	e7d6      	b.n	80076d2 <__swbuf_r+0x2a>

08007724 <__swsetup_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4b29      	ldr	r3, [pc, #164]	@ (80077cc <__swsetup_r+0xa8>)
 8007728:	4605      	mov	r5, r0
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	460c      	mov	r4, r1
 800772e:	b118      	cbz	r0, 8007738 <__swsetup_r+0x14>
 8007730:	6a03      	ldr	r3, [r0, #32]
 8007732:	b90b      	cbnz	r3, 8007738 <__swsetup_r+0x14>
 8007734:	f7fe f9d6 	bl	8005ae4 <__sinit>
 8007738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800773c:	0719      	lsls	r1, r3, #28
 800773e:	d422      	bmi.n	8007786 <__swsetup_r+0x62>
 8007740:	06da      	lsls	r2, r3, #27
 8007742:	d407      	bmi.n	8007754 <__swsetup_r+0x30>
 8007744:	2209      	movs	r2, #9
 8007746:	602a      	str	r2, [r5, #0]
 8007748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774c:	81a3      	strh	r3, [r4, #12]
 800774e:	f04f 30ff 	mov.w	r0, #4294967295
 8007752:	e033      	b.n	80077bc <__swsetup_r+0x98>
 8007754:	0758      	lsls	r0, r3, #29
 8007756:	d512      	bpl.n	800777e <__swsetup_r+0x5a>
 8007758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800775a:	b141      	cbz	r1, 800776e <__swsetup_r+0x4a>
 800775c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007760:	4299      	cmp	r1, r3
 8007762:	d002      	beq.n	800776a <__swsetup_r+0x46>
 8007764:	4628      	mov	r0, r5
 8007766:	f7ff f92f 	bl	80069c8 <_free_r>
 800776a:	2300      	movs	r3, #0
 800776c:	6363      	str	r3, [r4, #52]	@ 0x34
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	2300      	movs	r3, #0
 8007778:	6063      	str	r3, [r4, #4]
 800777a:	6923      	ldr	r3, [r4, #16]
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	89a3      	ldrh	r3, [r4, #12]
 8007780:	f043 0308 	orr.w	r3, r3, #8
 8007784:	81a3      	strh	r3, [r4, #12]
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	b94b      	cbnz	r3, 800779e <__swsetup_r+0x7a>
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007794:	d003      	beq.n	800779e <__swsetup_r+0x7a>
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 f8d4 	bl	8007946 <__smakebuf_r>
 800779e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a2:	f013 0201 	ands.w	r2, r3, #1
 80077a6:	d00a      	beq.n	80077be <__swsetup_r+0x9a>
 80077a8:	2200      	movs	r2, #0
 80077aa:	60a2      	str	r2, [r4, #8]
 80077ac:	6962      	ldr	r2, [r4, #20]
 80077ae:	4252      	negs	r2, r2
 80077b0:	61a2      	str	r2, [r4, #24]
 80077b2:	6922      	ldr	r2, [r4, #16]
 80077b4:	b942      	cbnz	r2, 80077c8 <__swsetup_r+0xa4>
 80077b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077ba:	d1c5      	bne.n	8007748 <__swsetup_r+0x24>
 80077bc:	bd38      	pop	{r3, r4, r5, pc}
 80077be:	0799      	lsls	r1, r3, #30
 80077c0:	bf58      	it	pl
 80077c2:	6962      	ldrpl	r2, [r4, #20]
 80077c4:	60a2      	str	r2, [r4, #8]
 80077c6:	e7f4      	b.n	80077b2 <__swsetup_r+0x8e>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e7f7      	b.n	80077bc <__swsetup_r+0x98>
 80077cc:	20000020 	.word	0x20000020

080077d0 <_raise_r>:
 80077d0:	291f      	cmp	r1, #31
 80077d2:	b538      	push	{r3, r4, r5, lr}
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	d904      	bls.n	80077e4 <_raise_r+0x14>
 80077da:	2316      	movs	r3, #22
 80077dc:	6003      	str	r3, [r0, #0]
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80077e6:	b112      	cbz	r2, 80077ee <_raise_r+0x1e>
 80077e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077ec:	b94b      	cbnz	r3, 8007802 <_raise_r+0x32>
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f830 	bl	8007854 <_getpid_r>
 80077f4:	4622      	mov	r2, r4
 80077f6:	4601      	mov	r1, r0
 80077f8:	4628      	mov	r0, r5
 80077fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fe:	f000 b817 	b.w	8007830 <_kill_r>
 8007802:	2b01      	cmp	r3, #1
 8007804:	d00a      	beq.n	800781c <_raise_r+0x4c>
 8007806:	1c59      	adds	r1, r3, #1
 8007808:	d103      	bne.n	8007812 <_raise_r+0x42>
 800780a:	2316      	movs	r3, #22
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	2001      	movs	r0, #1
 8007810:	e7e7      	b.n	80077e2 <_raise_r+0x12>
 8007812:	2100      	movs	r1, #0
 8007814:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007818:	4620      	mov	r0, r4
 800781a:	4798      	blx	r3
 800781c:	2000      	movs	r0, #0
 800781e:	e7e0      	b.n	80077e2 <_raise_r+0x12>

08007820 <raise>:
 8007820:	4b02      	ldr	r3, [pc, #8]	@ (800782c <raise+0xc>)
 8007822:	4601      	mov	r1, r0
 8007824:	6818      	ldr	r0, [r3, #0]
 8007826:	f7ff bfd3 	b.w	80077d0 <_raise_r>
 800782a:	bf00      	nop
 800782c:	20000020 	.word	0x20000020

08007830 <_kill_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d07      	ldr	r5, [pc, #28]	@ (8007850 <_kill_r+0x20>)
 8007834:	2300      	movs	r3, #0
 8007836:	4604      	mov	r4, r0
 8007838:	4608      	mov	r0, r1
 800783a:	4611      	mov	r1, r2
 800783c:	602b      	str	r3, [r5, #0]
 800783e:	f7f9 fdcb 	bl	80013d8 <_kill>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d102      	bne.n	800784c <_kill_r+0x1c>
 8007846:	682b      	ldr	r3, [r5, #0]
 8007848:	b103      	cbz	r3, 800784c <_kill_r+0x1c>
 800784a:	6023      	str	r3, [r4, #0]
 800784c:	bd38      	pop	{r3, r4, r5, pc}
 800784e:	bf00      	nop
 8007850:	200003d8 	.word	0x200003d8

08007854 <_getpid_r>:
 8007854:	f7f9 bdb8 	b.w	80013c8 <_getpid>

08007858 <_sbrk_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4d06      	ldr	r5, [pc, #24]	@ (8007874 <_sbrk_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4604      	mov	r4, r0
 8007860:	4608      	mov	r0, r1
 8007862:	602b      	str	r3, [r5, #0]
 8007864:	f7f9 fe40 	bl	80014e8 <_sbrk>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_sbrk_r+0x1a>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	b103      	cbz	r3, 8007872 <_sbrk_r+0x1a>
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	200003d8 	.word	0x200003d8

08007878 <memcpy>:
 8007878:	440a      	add	r2, r1
 800787a:	4291      	cmp	r1, r2
 800787c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007880:	d100      	bne.n	8007884 <memcpy+0xc>
 8007882:	4770      	bx	lr
 8007884:	b510      	push	{r4, lr}
 8007886:	f811 4b01 	ldrb.w	r4, [r1], #1
 800788a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800788e:	4291      	cmp	r1, r2
 8007890:	d1f9      	bne.n	8007886 <memcpy+0xe>
 8007892:	bd10      	pop	{r4, pc}

08007894 <_calloc_r>:
 8007894:	b570      	push	{r4, r5, r6, lr}
 8007896:	fba1 5402 	umull	r5, r4, r1, r2
 800789a:	b93c      	cbnz	r4, 80078ac <_calloc_r+0x18>
 800789c:	4629      	mov	r1, r5
 800789e:	f7ff f907 	bl	8006ab0 <_malloc_r>
 80078a2:	4606      	mov	r6, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <_calloc_r+0x1e>
 80078a6:	2600      	movs	r6, #0
 80078a8:	4630      	mov	r0, r6
 80078aa:	bd70      	pop	{r4, r5, r6, pc}
 80078ac:	220c      	movs	r2, #12
 80078ae:	6002      	str	r2, [r0, #0]
 80078b0:	e7f9      	b.n	80078a6 <_calloc_r+0x12>
 80078b2:	462a      	mov	r2, r5
 80078b4:	4621      	mov	r1, r4
 80078b6:	f7fe f9b2 	bl	8005c1e <memset>
 80078ba:	e7f5      	b.n	80078a8 <_calloc_r+0x14>

080078bc <__ascii_mbtowc>:
 80078bc:	b082      	sub	sp, #8
 80078be:	b901      	cbnz	r1, 80078c2 <__ascii_mbtowc+0x6>
 80078c0:	a901      	add	r1, sp, #4
 80078c2:	b142      	cbz	r2, 80078d6 <__ascii_mbtowc+0x1a>
 80078c4:	b14b      	cbz	r3, 80078da <__ascii_mbtowc+0x1e>
 80078c6:	7813      	ldrb	r3, [r2, #0]
 80078c8:	600b      	str	r3, [r1, #0]
 80078ca:	7812      	ldrb	r2, [r2, #0]
 80078cc:	1e10      	subs	r0, r2, #0
 80078ce:	bf18      	it	ne
 80078d0:	2001      	movne	r0, #1
 80078d2:	b002      	add	sp, #8
 80078d4:	4770      	bx	lr
 80078d6:	4610      	mov	r0, r2
 80078d8:	e7fb      	b.n	80078d2 <__ascii_mbtowc+0x16>
 80078da:	f06f 0001 	mvn.w	r0, #1
 80078de:	e7f8      	b.n	80078d2 <__ascii_mbtowc+0x16>

080078e0 <__ascii_wctomb>:
 80078e0:	4603      	mov	r3, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	b141      	cbz	r1, 80078f8 <__ascii_wctomb+0x18>
 80078e6:	2aff      	cmp	r2, #255	@ 0xff
 80078e8:	d904      	bls.n	80078f4 <__ascii_wctomb+0x14>
 80078ea:	228a      	movs	r2, #138	@ 0x8a
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295
 80078f2:	4770      	bx	lr
 80078f4:	700a      	strb	r2, [r1, #0]
 80078f6:	2001      	movs	r0, #1
 80078f8:	4770      	bx	lr

080078fa <__swhatbuf_r>:
 80078fa:	b570      	push	{r4, r5, r6, lr}
 80078fc:	460c      	mov	r4, r1
 80078fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007902:	2900      	cmp	r1, #0
 8007904:	b096      	sub	sp, #88	@ 0x58
 8007906:	4615      	mov	r5, r2
 8007908:	461e      	mov	r6, r3
 800790a:	da0d      	bge.n	8007928 <__swhatbuf_r+0x2e>
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007912:	f04f 0100 	mov.w	r1, #0
 8007916:	bf14      	ite	ne
 8007918:	2340      	movne	r3, #64	@ 0x40
 800791a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800791e:	2000      	movs	r0, #0
 8007920:	6031      	str	r1, [r6, #0]
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	b016      	add	sp, #88	@ 0x58
 8007926:	bd70      	pop	{r4, r5, r6, pc}
 8007928:	466a      	mov	r2, sp
 800792a:	f000 f849 	bl	80079c0 <_fstat_r>
 800792e:	2800      	cmp	r0, #0
 8007930:	dbec      	blt.n	800790c <__swhatbuf_r+0x12>
 8007932:	9901      	ldr	r1, [sp, #4]
 8007934:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007938:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800793c:	4259      	negs	r1, r3
 800793e:	4159      	adcs	r1, r3
 8007940:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007944:	e7eb      	b.n	800791e <__swhatbuf_r+0x24>

08007946 <__smakebuf_r>:
 8007946:	898b      	ldrh	r3, [r1, #12]
 8007948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800794a:	079d      	lsls	r5, r3, #30
 800794c:	4606      	mov	r6, r0
 800794e:	460c      	mov	r4, r1
 8007950:	d507      	bpl.n	8007962 <__smakebuf_r+0x1c>
 8007952:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	6123      	str	r3, [r4, #16]
 800795a:	2301      	movs	r3, #1
 800795c:	6163      	str	r3, [r4, #20]
 800795e:	b003      	add	sp, #12
 8007960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007962:	ab01      	add	r3, sp, #4
 8007964:	466a      	mov	r2, sp
 8007966:	f7ff ffc8 	bl	80078fa <__swhatbuf_r>
 800796a:	9f00      	ldr	r7, [sp, #0]
 800796c:	4605      	mov	r5, r0
 800796e:	4639      	mov	r1, r7
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff f89d 	bl	8006ab0 <_malloc_r>
 8007976:	b948      	cbnz	r0, 800798c <__smakebuf_r+0x46>
 8007978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797c:	059a      	lsls	r2, r3, #22
 800797e:	d4ee      	bmi.n	800795e <__smakebuf_r+0x18>
 8007980:	f023 0303 	bic.w	r3, r3, #3
 8007984:	f043 0302 	orr.w	r3, r3, #2
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	e7e2      	b.n	8007952 <__smakebuf_r+0xc>
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	6020      	str	r0, [r4, #0]
 8007990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	9b01      	ldr	r3, [sp, #4]
 8007998:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800799c:	b15b      	cbz	r3, 80079b6 <__smakebuf_r+0x70>
 800799e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a2:	4630      	mov	r0, r6
 80079a4:	f000 f81e 	bl	80079e4 <_isatty_r>
 80079a8:	b128      	cbz	r0, 80079b6 <__smakebuf_r+0x70>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	f043 0301 	orr.w	r3, r3, #1
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	89a3      	ldrh	r3, [r4, #12]
 80079b8:	431d      	orrs	r5, r3
 80079ba:	81a5      	strh	r5, [r4, #12]
 80079bc:	e7cf      	b.n	800795e <__smakebuf_r+0x18>
	...

080079c0 <_fstat_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	@ (80079e0 <_fstat_r+0x20>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f7f9 fd63 	bl	8001498 <_fstat>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d102      	bne.n	80079dc <_fstat_r+0x1c>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b103      	cbz	r3, 80079dc <_fstat_r+0x1c>
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	bf00      	nop
 80079e0:	200003d8 	.word	0x200003d8

080079e4 <_isatty_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d06      	ldr	r5, [pc, #24]	@ (8007a00 <_isatty_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	f7f9 fd62 	bl	80014b8 <_isatty>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_isatty_r+0x1a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_isatty_r+0x1a>
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	200003d8 	.word	0x200003d8

08007a04 <_init>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr

08007a10 <_fini>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr
